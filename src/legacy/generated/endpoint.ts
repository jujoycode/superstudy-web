/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Super School Î∞±ÏóîÎìú
 * Super School API ÏÉÅÏÑ∏
 * OpenAPI spec version: 0.1
 */
import { useQuery, useMutation } from 'react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query'

import { mutator } from '@/legacy/lib/axios'
import type { ErrorType } from '@/legacy/lib/axios'

import type {
  ResponsePaginationTeacherInfoDto,
  AdminCommonSearchTeachersParams,
  ResponsePaginationStudentInfoDto,
  AdminCommonSearchStudentsParams,
  ResponseGroupDto,
  AdminCommonFindAllKlassBySchoolParams,
  AdminCommonFindGroupByteacherBySchoolParams,
  ResponseExpiredUserPaginationDto,
  AdminCommonGetExpiredUsersParams,
  PaginatedPoint,
  AdminPointGetParams,
  Point,
  PointCreateBody,
  PointUpdateBody,
  DeleteResult,
  ResponseApprovalLineDto,
  ApprovalLineGetApprovalLineByType2Params,
  ApprovalLine,
  ApprovalLineDeleteTeacherParams,
  Group,
  GroupManagementGetGroupListParams,
  ResponseErrorDto,
  RequestCreateGroupOnlyDto,
  ResponseGroupDetailInfoDto,
  RequestModifyGroupOnlyDto,
  RequestGroupTeachersDto,
  RequestGroupStudentsDto,
  ResponseKlassInfoDto,
  RequestChangeHomeroomTeacherDto,
  RequestCreateKlassDto,
  ResponsePaginationParentInfoDto,
  ParentManagementGetParentsParams,
  ResponseParentDetailInfoDto,
  ParentManagementGetParentInfoParams,
  RequestModifyParentDto,
  School,
  RequestUpdateSchoolInfoDto,
  SchoolManagementLoadHolidayDataParams,
  SchoolManagementLoadYearHolidayDataParams,
  SchoolManagementLoadTimetableFromNeisParams,
  ResponseTimetableUploadInfoDto,
  TimetableUploadInfo,
  RequestTimetableUploadInfoDto,
  SmsCreditHistory,
  SmsManagementGetStatisticsParams,
  ResponseSmsHistoryDto,
  SmsManagementGetSmsHistoryParams,
  SmsCreditCharge,
  SmsManagementGetCreditChargeParams,
  SmsCreditRemain,
  StudentManagementGetStudentsParams,
  ResponseStudentInfoDto,
  RequestCreateStudentDto,
  ResponseStudentDetailInfoDto,
  StudentManagementGetStudentInfoParams,
  RequestModifyStudentDto,
  RequestCreateUserBulkDto,
  RequestAdvancedStudentDto,
  TeacherManagementGetTeachersParams,
  ResponseTeacherDto,
  RequestCreateTeacherDto,
  ResponseTeacherDetailInfoDto,
  TeacherManagementGetTeacherInfoParams,
  RequestModifyTeacherDto,
  ResponseTimetableV3Dto,
  TimetableManagementGetTimeTableParams,
  Lecture,
  TimetableManagementGetMoveLectureListParams,
  RequestTradeLectureDto,
  RequestTradeLectureDayDto,
  ResponseLectureInfoDto,
  RequestCreateLectureDto,
  RequestModifyLectureInfoDto,
  RequestModifyMoveLectureDto,
  TimetableManagementDeleteLectureParams,
  TimetableManagementResetLectureParams,
  TeacherPointGetParams,
  PaginatedPointLog,
  TeacherPointLogGetParams,
  PointLog,
  PointLogCreateBody,
  PaginatedStudentGroup,
  TeacherStudentGroupGetParams,
  PaginatedUser,
  TeacherUserGetParams,
  User,
  TeacherUserGetOneParams,
  Course,
  CourseGetParams,
  CourseLecture,
  CourseLectureGetParams,
  CourseSeason,
  CourseTerm,
  CourseTrainee,
  CourseTraineeGetParams,
  LectureAttendance,
  LectureAttendanceGetOneByForeignKeysParams,
  SaveLectureAttendanceDto,
  Absent,
  ResponsePaginatedAbsentDto,
  AbsentsGetAbsentsByTeacherParams,
  AbsentsGetAbsentsHistoryParams,
  AbsentsGetAbsentsByGroupIdParams,
  AbsentsGetAbsentsForCSVParams,
  AbsentsDownloadAbsentsParams,
  ResponseListAttendeeItemDto,
  AbsentsGetAttendeeInfoParams,
  AbsentsDownloadAttendeeParams,
  RequestCreateAbsentDto,
  RequestUpdateAbsentDto,
  AbsentsRequestDeleteBody,
  AbsentsDenyBody,
  AbsentsTeacherCommentApprovalBody,
  AbsentsApproveByParentBody,
  AbsentsApproveByParentAppBody,
  AbsentsApproveBody,
  AbsentsSubmittedBody,
  AbsentsNiceSubmittedBody,
  AchievementChapter,
  AchievementCriteriaGetAllParams,
  AchievementCriteria,
  AchievementCriteriaGetByIdsParams,
  ActivityCardGenerateGPTAnalysis200,
  ResponseActivityWithSubmittedDto,
  ActivityFindByTeacherParams,
  Activity,
  ResponseActivityWithGroupDto,
  RequestCreateActivityDto,
  ResponseActivitySubmitUserDto,
  ActivityFindActivitySubmitUsersParams,
  ActivityDownloadSubmittersParams,
  ActivitySession,
  ActivitySessionFindByActivityV3IdParams,
  RequestCreateActivitySessionDto,
  ActivitySessionWithCountDto,
  ActivitySessionFindByTeacherParams,
  StudentGroup,
  ActivitySessionFindSubmittersParams,
  RequestUpdateActivitySessionDto,
  ActivitySessionDownloadSubmittersParams,
  ActivitySessionOrder,
  RequestUpdateActivitySessionOrderDto,
  ActivityV3WithCountDto,
  ActivityV3FindByTeacherParams,
  ActivityV3,
  ActivityV3FindByStudentParams,
  ActivityV3FindByGroupIdsParams,
  GetGPTReportDto,
  ActivityV3FindStudentCardParams,
  ActivityV3FindTitleByIdsParams,
  ActivityV3FindOneParams,
  RequestUpdateActivityV3Dto,
  RequestCreateActivityV3Dto,
  ActivityV3UpdateStudentTextBody,
  ResponseAnnouncementDto,
  RequestCreateAnnouncementDto,
  ResponsePaginatedAnnouncementDto,
  AnnouncementGetAllAnnouncementsParams,
  AnnouncementGetAllAnnouncementsForAdminParams,
  RequestUpdateAnnouncementDto,
  Attendance,
  AttendanceFindAttendanceAbsentParams,
  RequestCreateAttendanceAbsentDto,
  AttendanceDownloadAbsentsParams,
  LectureTeacherAttendance,
  RequestUpsertAttendanceCheckDto,
  AttendanceGetAttendanceCheckParams,
  ResponseBlockChainStatusDto,
  BlockChainRequestCheckParams,
  BlockChainGetDocumentStatusParams,
  ResponsePaginatedBoardDto,
  BoardFindAllParams,
  Board,
  RequestCreateBoardDto,
  BoardFindTitleByIdsParams,
  RequestUpdateBoardDto,
  Canteen,
  CanteenFindByYearMonthParams,
  RequestUpsertCanteenDto,
  RequestCreateChatMessageDto,
  ChatHistory,
  ChatHistoryFindByConversationIdParams,
  ResponseChatroomInfoDto,
  RequestCreateChatroomDto,
  RequestAddUsersChatroomDto,
  ResponseChatroomInfoDetailDto,
  ResponsePaginatedChatMessageDto,
  ChatroomGetMessageListParams,
  ChatroomReadInfo,
  RequestModifyChatroomStatusDto,
  RequestUpdateChatroomInfoDto,
  ResponseChatAttendeeDto,
  ChatroomSearchUsersParams,
  Code,
  Category,
  ResponseSearchUserDto,
  CommonUserSearchParams,
  ResponseUserWithKlassDto,
  CommonUserSearchByNameParams,
  ResponseSearchUserByGradeAndKlassItemsDto,
  CommonUserSearchtestParams,
  ResponseCounselingDetailDto,
  Counseling,
  RequestCreateCounselingDto,
  ResponseCounselingDetailStudentDto,
  UpdateStudentDto,
  RequestSendParentSignUpDto,
  ResponseDashboardDto,
  ResponseStudentNotificationDashboardDto,
  ResponseTeacherNotificationDashboardDto,
  ExternalGetUserByTokenParams,
  RequestExternalAlarmDto,
  Fieldtrip,
  RequestUpdateFieldtripResultDto,
  RequestUpdateFieldtripResultByTeacherDto,
  FieldtripResultDenyResultBody,
  FieldtripResultApproveResultByParentBody,
  FieldtripResultApproveResultByParentAppBody,
  FieldtripResultApproveResultBody,
  FieldtripsDownloadFieldtripsParams,
  ResponsePaginatedFieldtripDto,
  FieldtripsGetFieldtripsByTeacherParams,
  RequestCreateFieldtripDto,
  FieldtripsGetFieldtripsHistoryParams,
  FieldtripsGetResultsByTeacherParams,
  RequestUpdateFieldtripDto,
  FieldtripsDenyBody,
  FieldtripsApproveByParentBody,
  FieldtripsApproveByParentAppBody,
  FieldtripsApproveBody,
  GroupActivityV3,
  GroupActivityV3FindByTeacherParams,
  GroupsFindAllParams,
  RequestCreateGroupDto,
  GroupsFindComparisonParams,
  GroupsFindAllKlassParams,
  ResponseGroupByIdsDto,
  GroupsFindAllByIdsParams,
  GroupsFindAllKlassBySchoolParams,
  GroupsFindKlubBySchoolIdParams,
  ResponseSubjectGroupDto,
  GroupsFindSubjectByUserParams,
  GroupsUpdateSeatPositionBody,
  ImagesUploadImageBody,
  ImagesUploadImageParams,
  LifeRecordGetLifeActivityByStudentParams,
  ResponsePaginatedNewsletterDto,
  NewsLettersFindAllParams,
  Newsletter,
  RequestCreateNewsletterDto,
  NewsLettersFindTitleByIdsParams,
  ResponseNewsletterDetailDto,
  RequestUpdateNewsletterDto,
  NewsLettersUpdateEndAtBody,
  NiceComparison,
  NiceComparisonsFindOneParams,
  RequestCreateNiceComparisonDto,
  RequestUpdateNiceComparisonDto,
  ResponsePaginatedNoticeDto,
  NoticesFindAllParams,
  Notice,
  RequestCreateNoticeDto,
  NoticesFindTitleByIdsParams,
  NotificationLog,
  NotificationSetting,
  ResponseNotificationCheckDto,
  RequestNotificationCheckDto,
  RequestUpdateNotificationSettingDto,
  OtpSendPostBody,
  OtpSendPostAuthBody,
  OtpUserSearchPostBody,
  OtpUserSearchPostAuthBody,
  ResponsePaginatedOutingDto,
  OutingsFindAllByTeacherParams,
  OutingsFindHistoryParams,
  OutingsDownloadOutingsParams,
  Outing,
  ResponseCreateOutingDto,
  RequestCreateOutingDto,
  RequestUpdateOutingDto,
  OutingsRequestDeleteBody,
  OutingsDenyBody,
  OutingsApproveBody,
  OutingsApproveByParentBody,
  OutingsApproveByParentAppBody,
  PointLogGetParams,
  Record,
  RecordCreateBody,
  RecordCreateParams,
  UpdateResult,
  RecordUpdateBody,
  ResponseExtendedScheduleDto,
  SchedulesFindAllParams,
  RequestCreateExtendedScheduleDto,
  ResponseBaseScheduleDto,
  SchedulesFindRejectScheduleParams,
  SessionComment,
  SessionCommentCreateBody,
  SessionCommentCreateParams,
  SessionCommentUpdateBody,
  RequestCreateSmsMessageDto,
  ResponsePaginatedSmsHistoryDto,
  SmsGetFieldtripsByTeacherParams,
  ResponseCreateSmsMessageDto,
  Comment,
  RequestCreateActivityCommentDto,
  StudentActivityCommentUpdateBody,
  StudentActivity,
  StudentActivityFindByUserIdParams,
  RequestUpdateStudentActivityDto,
  StudentActivityUpdateFeedbackBody,
  StudentActivitySession,
  StudentActivitySessionFindByTeacherParams,
  StudentActivitySessionFindOneByTeacherParams,
  StudentActivitySessionFindOneByStudentParams,
  RequestUpdateStudentActivitySessionDto,
  StudentActivitySessionSaveOneParams,
  StudentActivityV3,
  StudentActivityV3FindStudentCardParams,
  StudentActivityV3FindByTeacherParams,
  RequestUpdateStudentActivityV3Dto,
  StudentActivityV3SaveByTeacherParams,
  StudentActivityV3FindByStudentParams,
  RequestUpdateStudentTextDto,
  StudentActivityV3SaveStudentTextParams,
  ResponseStudentCardStudentDto,
  StudentExamScoreGetMyScores200,
  StudentExamScoreGetStudentExamScoresByParent200,
  StudentExamScoreGetStudentExamScoresByParentParams,
  StudentExamScoreGetStudentMockExamScoresByParent200,
  StudentExamScoreGetStudentMockExamScoresByParentParams,
  StudentExamScoreGetStudentExamScores200,
  StudentExamScoreGetStudentExamScoresChart200,
  StudentExamScorePatchStudentExamScores200,
  StudentExamScorePatchStudentExamScoresParams,
  StudentExamScoreInsetClassScoresBody,
  StudentExamScoreInsetClassScoresParams,
  StudentExamScoreInsetClassScoresBulkBody,
  StudentExamScoreInsetClassScoresBulkParams,
  StudentExamScoreCheckScoreFileParams,
  StudentExamScoreCheckTestScoreFileParams,
  StudentExamScoreInsertMockScoresBody,
  StudentExamScoreInsertMockScoresParams,
  StudentExamScoreInsertTestScoresBody,
  StudentExamScoreInsertTestScoresParams,
  StudentExamScoreCheckMockScoreFileParams,
  StudentExamScoreGetMockExamScoresParams,
  StudentExamScoreDeleteStudentExamScoreParams,
  StudentExamScoreDeleteTestScoreParams,
  StudentExamScoreDeleteMockScoreParams,
  StudentExamScoreGetAnalysedTargetScoresParams,
  StudentGroupsFindByGroupIdsParams,
  ResponseStudentGroupWithKlassDto,
  StudentGroupsFindAllByKlassesParams,
  StudentNewsletter,
  RequestApproveStudentNewsletterDto,
  RequestUpsertStudentNewsletterDto,
  StudentProperty,
  RequestStudentPropertyDto,
  StudentRecord,
  StudentRecordontrollerFindAnnualReviewByStudentIdParams,
  StudentRecordontrollerFindByStudentIdParams,
  RequestCreateStudentRecordDto,
  StudentRecordontrollerCreateParams,
  StudentRecordontrollerUpdateBody,
  StudentRecordontrollerDownloadRecordSummaryParams,
  RequestUpsertStudentRoleDto,
  StudentSelfAssessment,
  RequestCreateStudentSelfAssessmentDto,
  RequestGetAnnualReviewBodyDto,
  Summary,
  SummariesFindByStudentGroupIdParams,
  RequestCreateSummaryDto,
  RequestUpdateSummaryDto,
  TeacherGroupsGetTeacherGroupsParams,
  TeacherGroup,
  TeacherGroupsFindBySubjectParams,
  TeacherStudentAssessment,
  RequestCreateTeacherStudentAssessmentDto,
  Timetable,
  RequestCreateTimetableDto,
  TimetableV2,
  ResponseTimetableV2TeacherDto,
  TimetablesV2GetAllTeacherParams,
  TimetableV2Student,
  TimetablesV2FindOneByStudentParams,
  TimetablesV2FindOneByStudentIdParams,
  TimetablesV2UpdateSeatPositionBody,
  Timetablev3GetTimetableByGroupIdParams,
  Timetablev3GetTimetableByStudentIdParams,
  Timetablev3GetTimetableByTeacherIdParams,
  UserFindIdParams,
  RequestFindPasswordDto,
  RequestResetPasswordDto,
  RequestSignupDto,
  AuthResponse,
  RequestLoginDto,
  ParentDto,
  ResponseUserDto,
  UpdateUserDto,
  RequestUpdateMyInfoAtFirstLoginDto,
  RequestParentSignUpDto,
  RequestRemoveChildDto,
  ResponseTeachersDto,
  ResponseGetParentsByStudentGroupDto,
  UserGetParentsByGroupIdParams,
  ResponseUserAttendanceDto,
  UserGetUserAttendanceParams,
  UserGetAttendanceBookParams,
  RequestDeleteUserDto,
  ResponseIBPortfolioDto,
  ResponseIBPortfolioItemsDto,
  IBCasPortfolioGetItemsParams,
  ResponseIBPortfolioSubmissionStatusCountDto,
  IBCasPortfolioGetSubmissionStatusByReflectionDiaryCountParams,
  ResponsePaginatedIBPortfolioReflectionDiarySubmissionStatusDto,
  IBCasPortfolioGetSubmissionStatusByReflectionDiaryParams,
  IBCasPortfolioReflectionDiaryUnsubmitNotificationParams,
  IBCasPortfolioGetSubmissionStatusByInterviewCountParams,
  ResponsePaginatedIBPortfolioInterviewSubmissionStatusDto,
  IBCasPortfolioGetSubmissionStatusByInterviewParams,
  IBCasPortfolioInterviewUnsubmitNotificationParams,
  ResponseIBStatusCountDto,
  IBGetCasSubmissionStatusCountParams,
  ResponsePaginatedIBCasSubmissionDto,
  IBGetCasSubmissionStatusParams,
  IBGetSubmissionStatusCountParams,
  ResponsePaginatedIBProposalSubmissionStatusDto,
  IBGetSubmissionStatusParams,
  IBGetTokOutlineSubmissionStatusCountParams,
  ResponsePaginatedIBTokOutlineSubmissionStatusDto,
  IBGetTokOutlineSubmissionStatusParams,
  IBTokOutlineUnsubmitNotificationParams,
  IBGetTokExhibitionPlanSubmissionStatusCountParams,
  ResponsePaginatedIBTokExhibitionPlanSubmissionStatusDto,
  IBGetTokExhibitionPlanSubmissionStatusParams,
  IBTokExhibitionPlanUnsubmitNotificationParams,
  ResponseIBDto,
  RequestIBDto,
  ResponsePaginatedIBDto,
  IBGetIBBycoordinatorParams,
  RequestIBProposalDto,
  RequestIBUpdateDto,
  RequestIBProposalRankItemDto,
  RequestIBProposalUpdateDto,
  RequestIBSetMentorBatchDto,
  RequestIBCommentDto,
  ResponseIBTokOutlineDto,
  RequestIBTokOutlineDto,
  ResponseIBTokExhibitionPlanDto,
  RequestIBTokExhibitionPlanDto,
  IBUnsubmitNotificationParams,
  ResponseFeedbackDto,
  RequestFeedbackDto,
  ResponsePaginatedFeedbackDto,
  FeedbackGetFeedbackParams,
  FeedbackGetFeedbackCountParams,
  FeedbackFindUnreadFeedbacksExistParams,
  ResponseBatchUnreadFeedBackCountItemsDto,
  FeedbackBatchFindUnreadFeedbacksExistParams,
  FeedbackGetNotReadFeedbackParams,
  ResponseEssayDto,
  RequestEssayDto,
  ResponseEssayStatusCountDto,
  EssayGetSubmissionStatusCountParams,
  ResponsePaginatedIBEssaySubmissionStatusDto,
  EssayGetSubmissionStatusParams,
  EssayUnsubmitNotificationParams,
  ResponsePaginationRRSDto,
  RRSFindAllParams,
  ResponseRRSDto,
  RequestRRSDto,
  ResponseRRSStatusCountDto,
  RRSGetSubmissionStatusCountParams,
  ResponsePaginatedIBRRSSubmissionStatusDto,
  RRSGetSubmissionStatusParams,
  RRSUnsubmitNotificationParams,
  ResponsePaginationRPPFDto,
  RPPFFindAllRPPFParams,
  ResponseRPPFDto,
  RequestCreateRPPFDto,
  RequestRPPFInfoUpdateDto,
  ResponseRPPFStatusCountDto,
  RPPFGetSubmissionStatusCountParams,
  ResponsePaginatedIBRPPFSubmissionStatusDto,
  RPPFGetSubmissionStatusParams,
  RPPFUnsubmitNotificationParams,
  ResponsePaginationIBActivityLogDto,
  IBActivityLogGetItemsParams,
  ResponseIBActivityLogDto,
  RequestIBActivityLogUpdateDto,
  RequestIBActivityLogDto,
  ResponseThemeQuestionDto,
  ThemeQuestionGetThemeQuestionItemsByTypeParams,
  RequestCreateThemeQuestionsDto,
  ThemeQuestionSaveThemeQuestionsParams,
  ResponsePaginatedIBCoordinatorDto,
  IBCoordinatorGetItemsParams,
  ResponseCoordinatorSelfCheckDto,
  ResponseCoordinatorDto,
  RequestCoordinatorDto,
  ResponseIBDeadlineitemsDto,
  IBDeadlineGetItemsParams,
  ResponseIBDeadlineDto,
  RequestIBDeadlineDto,
  RequestIBDeadlineUpdateDto,
  RequestChecklistBulkDto,
  ResponsePaginatedChecklistDto,
  ChecklistGetitemsParams,
  DeleteCheckListContent,
  RequestChecklistResponseBulkDto,
  ChecklistGetitemsByStudentParams,
  ResponseEEEvaluationRelationDto,
  RequestEEEvaluationDto,
  RequestUpdateEEEvaluationDto,
  ResponsePaginationEEEvaluationDto,
  EEEvaluationGetItemsParams,
  ResponseEEEvaluationRelationByStudentDto,
  EEEvaluationGetEEEvaluationByStudentParams,
  RequestEEEvaluationCheckItemsByStudentDto,
  ResponsePaginationReferenceInfoDto,
  ReferenceInfoGetReferenceInfoListParams,
  ResponseReferenceInfoDto,
  RequestCreateReferenceInfoDto,
  RequestReferenceInfoDto,
  ResponsePaginationFAQDto,
  FAQGetFAQListParams,
  ResponseFAQDto,
  RequestCreateFAQDto,
  RequestFAQDto,
  ResponseTKPPFDto,
  RequestCreateTKPPFDto,
  RequestTKPPFInfoUpdateDto,
  ResponseTKPPFStatusCountDto,
  TKPPFGetSubmissionStatusCountParams,
  ResponsePaginatedIBTKPPFSubmissionStatusDto,
  TKPPFGetSubmissionStatusParams,
  TKPPFTkppfUnsubmitNotificationParams,
  ResponseExhibitionDto,
  RequestExhibitionDto,
  ResponseExhibitionSubmissionStatusCountDto,
  ExhibitionGetSubmissionStatusCountParams,
  ResponsePaginatedIBExhibitionSubmissionStatusDto,
  ExhibitionGetSubmissionStatusParams,
  ExhibitionExhibitionUnsubmitNotificationParams,
  ResponsePaginationTokEvaluationCriteriaDto,
  TokEvaluationGetCriteriaItemsParams,
  ResponseTokEvaluationCriteriaDto,
  RequestCreateTokEvaluationDto,
  RequestUpdateTokEvaluationDto,
  RequestTokEvaluationDto,
  ResponseTokEvaluationInitialDataDto,
  TokEvaluationGetEvaluationInitialDataParams,
  ResponseIBSchoolManagementDto,
  RequestIBSchoolManagementDto,
  ResponseCopykillerResponseDto,
  RequestCopykillerUploadDto,
  ResponsePaginationCopykillerDto,
  PlagiarismGetCopykillerListParams,
  ResponseCopykillerWithContentDto,
  PlagiarismGetCopykillerStatusParams,
  RequestCopykillerSimilarSentenceDto,
  Buffer,
  PlagiarismDownloadCopyRatioResultParams,
  ResponseSchoolPropertyDto,
  SchoolPropertyGetPropertyParams,
  RequestSchoolPropertyDto,
  ResponseIBProfileDto,
  RequestIBProfileDto,
  ResponseIBProfilePaginationDto,
  IBProfileGetItemsParams,
  ResponseIBProfileTemplateDto,
  RequestIBProfileTemplateDto,
  ResponsePaginationInterviewDto,
  InterviewFindAllInterviewParams,
  ResponseInterviewDto,
  RequestCreateInterviewDto,
  RequestUpdateInterviewDto,
  ResponseInterviewListWithQnaDto,
  InterviewFindQnaByStudentIdParams,
  ResponseStudentInterviewDto,
  InterviewFindInterviewByStudentIdParams,
  ResponseInterviewWithQnaDto,
  ResponseInterviewQnaDto,
  RequestUpdateQnaDto,
  RequestCreateQnaDto,
  ResponsePaginationIBBasicContentDto,
  IBReflectionDiaryGetItemsParams,
  ResponseIBBasicContentDto,
  RequestIBBasicContentUpdateDto,
  RequestIBBasicContentDto,
} from './model'

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (config: any, args: infer P) => any ? P : never;

/**
 * @summary ÏÑ†ÏÉùÎãò Î™©Î°ù Í≤ÄÏÉâ
 */
export const adminCommonSearchTeachers = (
  params?: AdminCommonSearchTeachersParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationTeacherInfoDto>(
    { url: `/api/admin/common/search/teacher`, method: 'get', params, signal },
    options,
  )
}

export const getAdminCommonSearchTeachersQueryKey = (params?: AdminCommonSearchTeachersParams) => [
  `/api/admin/common/search/teacher`,
  ...(params ? [params] : []),
]

export type AdminCommonSearchTeachersQueryResult = NonNullable<Awaited<ReturnType<typeof adminCommonSearchTeachers>>>
export type AdminCommonSearchTeachersQueryError = ErrorType<unknown>

export const useAdminCommonSearchTeachers = <
  TData = Awaited<ReturnType<typeof adminCommonSearchTeachers>>,
  TError = ErrorType<unknown>,
>(
  params?: AdminCommonSearchTeachersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminCommonSearchTeachers>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminCommonSearchTeachersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminCommonSearchTeachers>>> = ({ signal }) =>
    adminCommonSearchTeachers(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof adminCommonSearchTeachers>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Î™©Î°ù Í≤ÄÏÉâ
 */
export const adminCommonSearchStudents = (
  params?: AdminCommonSearchStudentsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationStudentInfoDto>(
    { url: `/api/admin/common/search/student`, method: 'get', params, signal },
    options,
  )
}

export const getAdminCommonSearchStudentsQueryKey = (params?: AdminCommonSearchStudentsParams) => [
  `/api/admin/common/search/student`,
  ...(params ? [params] : []),
]

export type AdminCommonSearchStudentsQueryResult = NonNullable<Awaited<ReturnType<typeof adminCommonSearchStudents>>>
export type AdminCommonSearchStudentsQueryError = ErrorType<unknown>

export const useAdminCommonSearchStudents = <
  TData = Awaited<ReturnType<typeof adminCommonSearchStudents>>,
  TError = ErrorType<unknown>,
>(
  params?: AdminCommonSearchStudentsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminCommonSearchStudents>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminCommonSearchStudentsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminCommonSearchStudents>>> = ({ signal }) =>
    adminCommonSearchStudents(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof adminCommonSearchStudents>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍµêÏùò klass Í∑∏Î£π Ï°∞Ìöå
 */
export const adminCommonFindAllKlassBySchool = (
  params?: AdminCommonFindAllKlassBySchoolParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseGroupDto[]>({ url: `/api/admin/common/search/klass`, method: 'get', params, signal }, options)
}

export const getAdminCommonFindAllKlassBySchoolQueryKey = (params?: AdminCommonFindAllKlassBySchoolParams) => [
  `/api/admin/common/search/klass`,
  ...(params ? [params] : []),
]

export type AdminCommonFindAllKlassBySchoolQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminCommonFindAllKlassBySchool>>
>
export type AdminCommonFindAllKlassBySchoolQueryError = ErrorType<unknown>

export const useAdminCommonFindAllKlassBySchool = <
  TData = Awaited<ReturnType<typeof adminCommonFindAllKlassBySchool>>,
  TError = ErrorType<unknown>,
>(
  params?: AdminCommonFindAllKlassBySchoolParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminCommonFindAllKlassBySchool>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminCommonFindAllKlassBySchoolQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminCommonFindAllKlassBySchool>>> = ({ signal }) =>
    adminCommonFindAllKlassBySchool(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof adminCommonFindAllKlassBySchool>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍµêÏùò ÏÑ†ÏÉùÎãòÎ≥Ñ KLUB Í∑∏Î£π Ï°∞Ìöå
 */
export const adminCommonFindGroupByteacherBySchool = (
  params?: AdminCommonFindGroupByteacherBySchoolParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseGroupDto[]>({ url: `/api/admin/common/search/group`, method: 'get', params, signal }, options)
}

export const getAdminCommonFindGroupByteacherBySchoolQueryKey = (
  params?: AdminCommonFindGroupByteacherBySchoolParams,
) => [`/api/admin/common/search/group`, ...(params ? [params] : [])]

export type AdminCommonFindGroupByteacherBySchoolQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminCommonFindGroupByteacherBySchool>>
>
export type AdminCommonFindGroupByteacherBySchoolQueryError = ErrorType<unknown>

export const useAdminCommonFindGroupByteacherBySchool = <
  TData = Awaited<ReturnType<typeof adminCommonFindGroupByteacherBySchool>>,
  TError = ErrorType<unknown>,
>(
  params?: AdminCommonFindGroupByteacherBySchoolParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminCommonFindGroupByteacherBySchool>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminCommonFindGroupByteacherBySchoolQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminCommonFindGroupByteacherBySchool>>> = ({ signal }) =>
    adminCommonFindGroupByteacherBySchool(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof adminCommonFindGroupByteacherBySchool>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎßåÎ£åÎêú ÏÇ¨Ïö©ÏûêÎì§ Ï°∞Ìöå
 */
export const adminCommonGetExpiredUsers = (
  params?: AdminCommonGetExpiredUsersParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseExpiredUserPaginationDto>(
    { url: `/api/admin/common/expired/users`, method: 'get', params, signal },
    options,
  )
}

export const getAdminCommonGetExpiredUsersQueryKey = (params?: AdminCommonGetExpiredUsersParams) => [
  `/api/admin/common/expired/users`,
  ...(params ? [params] : []),
]

export type AdminCommonGetExpiredUsersQueryResult = NonNullable<Awaited<ReturnType<typeof adminCommonGetExpiredUsers>>>
export type AdminCommonGetExpiredUsersQueryError = ErrorType<unknown>

export const useAdminCommonGetExpiredUsers = <
  TData = Awaited<ReturnType<typeof adminCommonGetExpiredUsers>>,
  TError = ErrorType<unknown>,
>(
  params?: AdminCommonGetExpiredUsersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminCommonGetExpiredUsers>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminCommonGetExpiredUsersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminCommonGetExpiredUsers>>> = ({ signal }) =>
    adminCommonGetExpiredUsers(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof adminCommonGetExpiredUsers>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í¥ÄÎ¶¨ÏûêÏùò Ïú†Ï†ÄÌÉàÌá¥ API
 */
export const adminCommonDeleteUser = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/admin/common/delete/user/${id}`, method: 'delete' }, options)
}

export type AdminCommonDeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof adminCommonDeleteUser>>>

export type AdminCommonDeleteUserMutationError = ErrorType<unknown>

export const useAdminCommonDeleteUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof adminCommonDeleteUser>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminCommonDeleteUser>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return adminCommonDeleteUser(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof adminCommonDeleteUser>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

export const adminPointGet = (
  params: AdminPointGetParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<PaginatedPoint>({ url: `/api/admin/points`, method: 'get', params, signal }, options)
}

export const getAdminPointGetQueryKey = (params: AdminPointGetParams) => [
  `/api/admin/points`,
  ...(params ? [params] : []),
]

export type AdminPointGetQueryResult = NonNullable<Awaited<ReturnType<typeof adminPointGet>>>
export type AdminPointGetQueryError = ErrorType<unknown>

export const useAdminPointGet = <TData = Awaited<ReturnType<typeof adminPointGet>>, TError = ErrorType<unknown>>(
  params: AdminPointGetParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminPointGet>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminPointGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminPointGet>>> = ({ signal }) =>
    adminPointGet(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof adminPointGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const adminPointCreate = (pointCreateBody: PointCreateBody, options?: SecondParameter<typeof mutator>) => {
  return mutator<Point>(
    {
      url: `/api/admin/points`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: pointCreateBody,
    },
    options,
  )
}

export type AdminPointCreateMutationResult = NonNullable<Awaited<ReturnType<typeof adminPointCreate>>>
export type AdminPointCreateMutationBody = PointCreateBody
export type AdminPointCreateMutationError = ErrorType<unknown>

export const useAdminPointCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPointCreate>>,
    TError,
    { data: PointCreateBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminPointCreate>>, { data: PointCreateBody }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return adminPointCreate(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof adminPointCreate>>, TError, { data: PointCreateBody }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

export const adminPointGetOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Point>({ url: `/api/admin/points/${id}`, method: 'get', signal }, options)
}

export const getAdminPointGetOneQueryKey = (id: number) => [`/api/admin/points/${id}`]

export type AdminPointGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof adminPointGetOne>>>
export type AdminPointGetOneQueryError = ErrorType<unknown>

export const useAdminPointGetOne = <TData = Awaited<ReturnType<typeof adminPointGetOne>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof adminPointGetOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAdminPointGetOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminPointGetOne>>> = ({ signal }) =>
    adminPointGetOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof adminPointGetOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const adminPointUpdate = (
  id: number,
  pointUpdateBody: PointUpdateBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Point>(
    {
      url: `/api/admin/points/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: pointUpdateBody,
    },
    options,
  )
}

export type AdminPointUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof adminPointUpdate>>>
export type AdminPointUpdateMutationBody = PointUpdateBody
export type AdminPointUpdateMutationError = ErrorType<unknown>

export const useAdminPointUpdate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminPointUpdate>>,
    TError,
    { id: number; data: PointUpdateBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminPointUpdate>>,
    { id: number; data: PointUpdateBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return adminPointUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof adminPointUpdate>>,
    TError,
    { id: number; data: PointUpdateBody },
    TContext
  >(mutationFn, mutationOptions)
}

export const adminPointDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<DeleteResult>({ url: `/api/admin/points/${id}`, method: 'delete' }, options)
}

export type AdminPointDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof adminPointDelete>>>

export type AdminPointDeleteMutationError = ErrorType<unknown>

export const useAdminPointDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof adminPointDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof adminPointDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return adminPointDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof adminPointDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ïú†ÌòïÎ≥Ñ Í≤∞Ïû¨ÏÑ† Ï°∞Ìöå
 */
export const approvalLineGetApprovalLineByType2 = (
  params: ApprovalLineGetApprovalLineByType2Params,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseApprovalLineDto[]>({ url: `/api/admin/approval-line`, method: 'get', params, signal }, options)
}

export const getApprovalLineGetApprovalLineByType2QueryKey = (params: ApprovalLineGetApprovalLineByType2Params) => [
  `/api/admin/approval-line`,
  ...(params ? [params] : []),
]

export type ApprovalLineGetApprovalLineByType2QueryResult = NonNullable<
  Awaited<ReturnType<typeof approvalLineGetApprovalLineByType2>>
>
export type ApprovalLineGetApprovalLineByType2QueryError = ErrorType<unknown>

export const useApprovalLineGetApprovalLineByType2 = <
  TData = Awaited<ReturnType<typeof approvalLineGetApprovalLineByType2>>,
  TError = ErrorType<unknown>,
>(
  params: ApprovalLineGetApprovalLineByType2Params,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof approvalLineGetApprovalLineByType2>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApprovalLineGetApprovalLineByType2QueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof approvalLineGetApprovalLineByType2>>> = ({ signal }) =>
    approvalLineGetApprovalLineByType2(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof approvalLineGetApprovalLineByType2>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïú†ÌòïÎ≥Ñ Í≤∞Ïû¨ÏÑ† Îã§Í±¥ ÏÉùÏÑ±/ÏóÖÎç∞Ïù¥Ìä∏
 */
export const approvalLineCreateApprovalLines = (
  approvalLine: ApprovalLine[],
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/admin/approval-line`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: approvalLine,
    },
    options,
  )
}

export type ApprovalLineCreateApprovalLinesMutationResult = NonNullable<
  Awaited<ReturnType<typeof approvalLineCreateApprovalLines>>
>
export type ApprovalLineCreateApprovalLinesMutationBody = ApprovalLine[]
export type ApprovalLineCreateApprovalLinesMutationError = ErrorType<unknown>

export const useApprovalLineCreateApprovalLines = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof approvalLineCreateApprovalLines>>,
    TError,
    { data: ApprovalLine[] },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof approvalLineCreateApprovalLines>>,
    { data: ApprovalLine[] }
  > = (props) => {
    const { data } = props ?? {}

    return approvalLineCreateApprovalLines(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof approvalLineCreateApprovalLines>>,
    TError,
    { data: ApprovalLine[] },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í≤∞Ïû¨ÎùºÏù∏ ÏÇ≠Ï†ú
 */
export const approvalLineDeleteTeacher = (
  params: ApprovalLineDeleteTeacherParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>({ url: `/api/admin/approval-line`, method: 'delete', params }, options)
}

export type ApprovalLineDeleteTeacherMutationResult = NonNullable<Awaited<ReturnType<typeof approvalLineDeleteTeacher>>>

export type ApprovalLineDeleteTeacherMutationError = ErrorType<unknown>

export const useApprovalLineDeleteTeacher = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof approvalLineDeleteTeacher>>,
    TError,
    { params: ApprovalLineDeleteTeacherParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof approvalLineDeleteTeacher>>,
    { params: ApprovalLineDeleteTeacherParams }
  > = (props) => {
    const { params } = props ?? {}

    return approvalLineDeleteTeacher(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof approvalLineDeleteTeacher>>,
    TError,
    { params: ApprovalLineDeleteTeacherParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôïÏù∏Ï¶ù Í≤∞Ï†úÏ§ëÏù∏ Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏
 */
export const approvalLineUpdateOutingApprovalLines = (options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/admin/approval-line/update/outing`, method: 'post' }, options)
}

export type ApprovalLineUpdateOutingApprovalLinesMutationResult = NonNullable<
  Awaited<ReturnType<typeof approvalLineUpdateOutingApprovalLines>>
>

export type ApprovalLineUpdateOutingApprovalLinesMutationError = ErrorType<unknown>

export const useApprovalLineUpdateOutingApprovalLines = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof approvalLineUpdateOutingApprovalLines>>,
    TError,
    TVariables,
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof approvalLineUpdateOutingApprovalLines>>,
    TVariables
  > = () => {
    return approvalLineUpdateOutingApprovalLines(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof approvalLineUpdateOutingApprovalLines>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Í≤∞ÏÑùÏã†Í≥†ÏÑú Í≤∞Ï†úÏ§ëÏù∏ Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏
 */
export const approvalLineUpdateabsentApprovalLines = (options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/admin/approval-line/update/absent`, method: 'post' }, options)
}

export type ApprovalLineUpdateabsentApprovalLinesMutationResult = NonNullable<
  Awaited<ReturnType<typeof approvalLineUpdateabsentApprovalLines>>
>

export type ApprovalLineUpdateabsentApprovalLinesMutationError = ErrorType<unknown>

export const useApprovalLineUpdateabsentApprovalLines = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof approvalLineUpdateabsentApprovalLines>>,
    TError,
    TVariables,
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof approvalLineUpdateabsentApprovalLines>>,
    TVariables
  > = () => {
    return approvalLineUpdateabsentApprovalLines(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof approvalLineUpdateabsentApprovalLines>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Í≤∞Ï†úÏ§ëÏù∏ Î¨∏ÏÑú ÏóÖÎç∞Ïù¥Ìä∏
 */
export const approvalLineUpdateFieldTripApprovalLines = (options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/admin/approval-line/update/fieldtrip`, method: 'post' }, options)
}

export type ApprovalLineUpdateFieldTripApprovalLinesMutationResult = NonNullable<
  Awaited<ReturnType<typeof approvalLineUpdateFieldTripApprovalLines>>
>

export type ApprovalLineUpdateFieldTripApprovalLinesMutationError = ErrorType<unknown>

export const useApprovalLineUpdateFieldTripApprovalLines = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof approvalLineUpdateFieldTripApprovalLines>>,
    TError,
    TVariables,
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof approvalLineUpdateFieldTripApprovalLines>>,
    TVariables
  > = () => {
    return approvalLineUpdateFieldTripApprovalLines(requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof approvalLineUpdateFieldTripApprovalLines>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∑∏Î£π Î™©Î°ù Ï°∞Ìöå
 */
export const groupManagementGetGroupList = (
  params?: GroupManagementGetGroupListParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Group[]>({ url: `/api/admin/group-management`, method: 'get', params, signal }, options)
}

export const getGroupManagementGetGroupListQueryKey = (params?: GroupManagementGetGroupListParams) => [
  `/api/admin/group-management`,
  ...(params ? [params] : []),
]

export type GroupManagementGetGroupListQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupManagementGetGroupList>>
>
export type GroupManagementGetGroupListQueryError = ErrorType<void>

export const useGroupManagementGetGroupList = <
  TData = Awaited<ReturnType<typeof groupManagementGetGroupList>>,
  TError = ErrorType<void>,
>(
  params?: GroupManagementGetGroupListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupManagementGetGroupList>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupManagementGetGroupListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupManagementGetGroupList>>> = ({ signal }) =>
    groupManagementGetGroupList(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupManagementGetGroupList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∑∏Î£π Ï∂îÍ∞Ä
 */
export const groupManagementCreateGroup = (
  requestCreateGroupOnlyDto: RequestCreateGroupOnlyDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Group>(
    {
      url: `/api/admin/group-management`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateGroupOnlyDto,
    },
    options,
  )
}

export type GroupManagementCreateGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupManagementCreateGroup>>
>
export type GroupManagementCreateGroupMutationBody = RequestCreateGroupOnlyDto
export type GroupManagementCreateGroupMutationError = ErrorType<ResponseErrorDto>

export const useGroupManagementCreateGroup = <TError = ErrorType<ResponseErrorDto>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupManagementCreateGroup>>,
    TError,
    { data: RequestCreateGroupOnlyDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupManagementCreateGroup>>,
    { data: RequestCreateGroupOnlyDto }
  > = (props) => {
    const { data } = props ?? {}

    return groupManagementCreateGroup(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof groupManagementCreateGroup>>,
    TError,
    { data: RequestCreateGroupOnlyDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∑∏Î£π ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const groupManagementGetGroupDetailInfo = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseGroupDetailInfoDto>(
    { url: `/api/admin/group-management/${id}`, method: 'get', signal },
    options,
  )
}

export const getGroupManagementGetGroupDetailInfoQueryKey = (id: number) => [`/api/admin/group-management/${id}`]

export type GroupManagementGetGroupDetailInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupManagementGetGroupDetailInfo>>
>
export type GroupManagementGetGroupDetailInfoQueryError = ErrorType<void>

export const useGroupManagementGetGroupDetailInfo = <
  TData = Awaited<ReturnType<typeof groupManagementGetGroupDetailInfo>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupManagementGetGroupDetailInfo>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupManagementGetGroupDetailInfoQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupManagementGetGroupDetailInfo>>> = ({ signal }) =>
    groupManagementGetGroupDetailInfo(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupManagementGetGroupDetailInfo>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∑∏Î£π ÏàòÏ†ï
 */
export const groupManagementUpdateGroup = (
  id: number,
  requestModifyGroupOnlyDto: RequestModifyGroupOnlyDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/admin/group-management/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestModifyGroupOnlyDto,
    },
    options,
  )
}

export type GroupManagementUpdateGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupManagementUpdateGroup>>
>
export type GroupManagementUpdateGroupMutationBody = RequestModifyGroupOnlyDto
export type GroupManagementUpdateGroupMutationError = ErrorType<unknown>

export const useGroupManagementUpdateGroup = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupManagementUpdateGroup>>,
    TError,
    { id: number; data: RequestModifyGroupOnlyDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupManagementUpdateGroup>>,
    { id: number; data: RequestModifyGroupOnlyDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return groupManagementUpdateGroup(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof groupManagementUpdateGroup>>,
    TError,
    { id: number; data: RequestModifyGroupOnlyDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∑∏Î£π ÏÇ≠Ï†ú
 */
export const groupManagementDeleteGroup = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/admin/group-management/${id}/group`, method: 'delete' }, options)
}

export type GroupManagementDeleteGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupManagementDeleteGroup>>
>

export type GroupManagementDeleteGroupMutationError = ErrorType<unknown>

export const useGroupManagementDeleteGroup = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupManagementDeleteGroup>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof groupManagementDeleteGroup>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return groupManagementDeleteGroup(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof groupManagementDeleteGroup>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏÑ†ÏÉùÎãò Ï∂îÍ∞Ä
 */
export const groupManagementAddTeachers = (
  id: number,
  requestGroupTeachersDto: RequestGroupTeachersDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/admin/group-management/${id}/teacher`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestGroupTeachersDto,
    },
    options,
  )
}

export type GroupManagementAddTeachersMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupManagementAddTeachers>>
>
export type GroupManagementAddTeachersMutationBody = RequestGroupTeachersDto
export type GroupManagementAddTeachersMutationError = ErrorType<unknown>

export const useGroupManagementAddTeachers = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupManagementAddTeachers>>,
    TError,
    { id: number; data: RequestGroupTeachersDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupManagementAddTeachers>>,
    { id: number; data: RequestGroupTeachersDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return groupManagementAddTeachers(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof groupManagementAddTeachers>>,
    TError,
    { id: number; data: RequestGroupTeachersDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑ†ÏÉùÎãò ÏÇ≠Ï†ú
 */
export const groupManagementDeleteTeacher = (
  id: number,
  teacherId: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>({ url: `/api/admin/group-management/${id}/teacher/${teacherId}`, method: 'delete' }, options)
}

export type GroupManagementDeleteTeacherMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupManagementDeleteTeacher>>
>

export type GroupManagementDeleteTeacherMutationError = ErrorType<unknown>

export const useGroupManagementDeleteTeacher = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupManagementDeleteTeacher>>,
    TError,
    { id: number; teacherId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupManagementDeleteTeacher>>,
    { id: number; teacherId: number }
  > = (props) => {
    const { id, teacherId } = props ?? {}

    return groupManagementDeleteTeacher(id, teacherId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof groupManagementDeleteTeacher>>,
    TError,
    { id: number; teacherId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉù Ï∂îÍ∞Ä
 */
export const groupManagementAddStudent = (
  id: number,
  requestGroupStudentsDto: RequestGroupStudentsDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/admin/group-management/${id}/student`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestGroupStudentsDto,
    },
    options,
  )
}

export type GroupManagementAddStudentMutationResult = NonNullable<Awaited<ReturnType<typeof groupManagementAddStudent>>>
export type GroupManagementAddStudentMutationBody = RequestGroupStudentsDto
export type GroupManagementAddStudentMutationError = ErrorType<unknown>

export const useGroupManagementAddStudent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupManagementAddStudent>>,
    TError,
    { id: number; data: RequestGroupStudentsDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupManagementAddStudent>>,
    { id: number; data: RequestGroupStudentsDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return groupManagementAddStudent(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof groupManagementAddStudent>>,
    TError,
    { id: number; data: RequestGroupStudentsDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉù ÏÇ≠Ï†ú
 */
export const groupManagementDeleteStudent = (
  id: number,
  studentId: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>({ url: `/api/admin/group-management/${id}/student/${studentId}`, method: 'delete' }, options)
}

export type GroupManagementDeleteStudentMutationResult = NonNullable<
  Awaited<ReturnType<typeof groupManagementDeleteStudent>>
>

export type GroupManagementDeleteStudentMutationError = ErrorType<unknown>

export const useGroupManagementDeleteStudent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupManagementDeleteStudent>>,
    TError,
    { id: number; studentId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupManagementDeleteStudent>>,
    { id: number; studentId: number }
  > = (props) => {
    const { id, studentId } = props ?? {}

    return groupManagementDeleteStudent(id, studentId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof groupManagementDeleteStudent>>,
    TError,
    { id: number; studentId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÍ∏â Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const klassManagementGetKlassInfo = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseKlassInfoDto>({ url: `/api/admin/klass-management/${id}`, method: 'get', signal }, options)
}

export const getKlassManagementGetKlassInfoQueryKey = (id: number) => [`/api/admin/klass-management/${id}`]

export type KlassManagementGetKlassInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof klassManagementGetKlassInfo>>
>
export type KlassManagementGetKlassInfoQueryError = ErrorType<void>

export const useKlassManagementGetKlassInfo = <
  TData = Awaited<ReturnType<typeof klassManagementGetKlassInfo>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof klassManagementGetKlassInfo>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getKlassManagementGetKlassInfoQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof klassManagementGetKlassInfo>>> = ({ signal }) =>
    klassManagementGetKlassInfo(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof klassManagementGetKlassInfo>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍ∏â ÏÇ≠Ï†ú
 */
export const klassManagementDeleteKlass = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/admin/klass-management/${id}`, method: 'delete' }, options)
}

export type KlassManagementDeleteKlassMutationResult = NonNullable<
  Awaited<ReturnType<typeof klassManagementDeleteKlass>>
>

export type KlassManagementDeleteKlassMutationError = ErrorType<void>

export const useKlassManagementDeleteKlass = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof klassManagementDeleteKlass>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof klassManagementDeleteKlass>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return klassManagementDeleteKlass(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof klassManagementDeleteKlass>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Îã¥ÏûÑ ÏÑ†ÏÉùÎãò Î≥ÄÍ≤Ω
 */
export const klassManagementChangeHomeroomTeacher = (
  id: number,
  requestChangeHomeroomTeacherDto: RequestChangeHomeroomTeacherDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseKlassInfoDto>(
    {
      url: `/api/admin/klass-management/${id}/homeroom-teacher`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestChangeHomeroomTeacherDto,
    },
    options,
  )
}

export type KlassManagementChangeHomeroomTeacherMutationResult = NonNullable<
  Awaited<ReturnType<typeof klassManagementChangeHomeroomTeacher>>
>
export type KlassManagementChangeHomeroomTeacherMutationBody = RequestChangeHomeroomTeacherDto
export type KlassManagementChangeHomeroomTeacherMutationError = ErrorType<void>

export const useKlassManagementChangeHomeroomTeacher = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof klassManagementChangeHomeroomTeacher>>,
    TError,
    { id: number; data: RequestChangeHomeroomTeacherDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof klassManagementChangeHomeroomTeacher>>,
    { id: number; data: RequestChangeHomeroomTeacherDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return klassManagementChangeHomeroomTeacher(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof klassManagementChangeHomeroomTeacher>>,
    TError,
    { id: number; data: RequestChangeHomeroomTeacherDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÍ∏â Ï∂îÍ∞Ä
 */
export const klassManagementCreateKlass = (
  requestCreateKlassDto: RequestCreateKlassDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Group>(
    {
      url: `/api/admin/klass-management`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateKlassDto,
    },
    options,
  )
}

export type KlassManagementCreateKlassMutationResult = NonNullable<
  Awaited<ReturnType<typeof klassManagementCreateKlass>>
>
export type KlassManagementCreateKlassMutationBody = RequestCreateKlassDto
export type KlassManagementCreateKlassMutationError = ErrorType<void>

export const useKlassManagementCreateKlass = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof klassManagementCreateKlass>>,
    TError,
    { data: RequestCreateKlassDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof klassManagementCreateKlass>>,
    { data: RequestCreateKlassDto }
  > = (props) => {
    const { data } = props ?? {}

    return klassManagementCreateKlass(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof klassManagementCreateKlass>>,
    TError,
    { data: RequestCreateKlassDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Î≥¥Ìò∏Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const parentManagementGetParents = (
  params?: ParentManagementGetParentsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationParentInfoDto>(
    { url: `/api/admin/parent-management`, method: 'get', params, signal },
    options,
  )
}

export const getParentManagementGetParentsQueryKey = (params?: ParentManagementGetParentsParams) => [
  `/api/admin/parent-management`,
  ...(params ? [params] : []),
]

export type ParentManagementGetParentsQueryResult = NonNullable<Awaited<ReturnType<typeof parentManagementGetParents>>>
export type ParentManagementGetParentsQueryError = ErrorType<unknown>

export const useParentManagementGetParents = <
  TData = Awaited<ReturnType<typeof parentManagementGetParents>>,
  TError = ErrorType<unknown>,
>(
  params?: ParentManagementGetParentsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof parentManagementGetParents>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getParentManagementGetParentsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof parentManagementGetParents>>> = ({ signal }) =>
    parentManagementGetParents(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof parentManagementGetParents>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î≥¥Ìò∏Ïûê Ï†ïÎ≥¥ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const parentManagementGetParentInfo = (
  id: number,
  params?: ParentManagementGetParentInfoParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseParentDetailInfoDto>(
    { url: `/api/admin/parent-management/${id}`, method: 'get', params, signal },
    options,
  )
}

export const getParentManagementGetParentInfoQueryKey = (id: number, params?: ParentManagementGetParentInfoParams) => [
  `/api/admin/parent-management/${id}`,
  ...(params ? [params] : []),
]

export type ParentManagementGetParentInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof parentManagementGetParentInfo>>
>
export type ParentManagementGetParentInfoQueryError = ErrorType<void>

export const useParentManagementGetParentInfo = <
  TData = Awaited<ReturnType<typeof parentManagementGetParentInfo>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: ParentManagementGetParentInfoParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof parentManagementGetParentInfo>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getParentManagementGetParentInfoQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof parentManagementGetParentInfo>>> = ({ signal }) =>
    parentManagementGetParentInfo(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof parentManagementGetParentInfo>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î≥¥Ìò∏Ïûê Ï†ïÎ≥¥ ÏÇ≠Ï†ú
 */
export const parentManagementDeleteParent = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/admin/parent-management/${id}`, method: 'delete' }, options)
}

export type ParentManagementDeleteParentMutationResult = NonNullable<
  Awaited<ReturnType<typeof parentManagementDeleteParent>>
>

export type ParentManagementDeleteParentMutationError = ErrorType<void>

export const useParentManagementDeleteParent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof parentManagementDeleteParent>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof parentManagementDeleteParent>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return parentManagementDeleteParent(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof parentManagementDeleteParent>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Î≥¥Ìò∏Ïûê Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const parentManagementUpdateParent = (
  id: number,
  requestModifyParentDto: RequestModifyParentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseParentDetailInfoDto>(
    {
      url: `/api/admin/parent-management/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestModifyParentDto,
    },
    options,
  )
}

export type ParentManagementUpdateParentMutationResult = NonNullable<
  Awaited<ReturnType<typeof parentManagementUpdateParent>>
>
export type ParentManagementUpdateParentMutationBody = RequestModifyParentDto
export type ParentManagementUpdateParentMutationError = ErrorType<void>

export const useParentManagementUpdateParent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof parentManagementUpdateParent>>,
    TError,
    { id: number; data: RequestModifyParentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof parentManagementUpdateParent>>,
    { id: number; data: RequestModifyParentDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return parentManagementUpdateParent(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof parentManagementUpdateParent>>,
    TError,
    { id: number; data: RequestModifyParentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const schoolManagementGetSchoolInfo = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<School>({ url: `/api/admin/school-management`, method: 'get', signal }, options)
}

export const getSchoolManagementGetSchoolInfoQueryKey = () => [`/api/admin/school-management`]

export type SchoolManagementGetSchoolInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolManagementGetSchoolInfo>>
>
export type SchoolManagementGetSchoolInfoQueryError = ErrorType<void>

export const useSchoolManagementGetSchoolInfo = <
  TData = Awaited<ReturnType<typeof schoolManagementGetSchoolInfo>>,
  TError = ErrorType<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof schoolManagementGetSchoolInfo>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolManagementGetSchoolInfoQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolManagementGetSchoolInfo>>> = ({ signal }) =>
    schoolManagementGetSchoolInfo(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolManagementGetSchoolInfo>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∏∞Î≥∏ Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const schoolManagementModifySchoolInfo = (
  requestUpdateSchoolInfoDto: RequestUpdateSchoolInfoDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<School>(
    {
      url: `/api/admin/school-management`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateSchoolInfoDto,
    },
    options,
  )
}

export type SchoolManagementModifySchoolInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolManagementModifySchoolInfo>>
>
export type SchoolManagementModifySchoolInfoMutationBody = RequestUpdateSchoolInfoDto
export type SchoolManagementModifySchoolInfoMutationError = ErrorType<unknown>

export const useSchoolManagementModifySchoolInfo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolManagementModifySchoolInfo>>,
    TError,
    { data: RequestUpdateSchoolInfoDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolManagementModifySchoolInfo>>,
    { data: RequestUpdateSchoolInfoDto }
  > = (props) => {
    const { data } = props ?? {}

    return schoolManagementModifySchoolInfo(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof schoolManagementModifySchoolInfo>>,
    TError,
    { data: RequestUpdateSchoolInfoDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í≥µÌú¥Ïùº Î∂àÎü¨Ïò§Í∏∞
 */
export const schoolManagementLoadHolidayData = (
  params: SchoolManagementLoadHolidayDataParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<boolean>({ url: `/api/admin/school-management/holiday`, method: 'get', params, signal }, options)
}

export const getSchoolManagementLoadHolidayDataQueryKey = (params: SchoolManagementLoadHolidayDataParams) => [
  `/api/admin/school-management/holiday`,
  ...(params ? [params] : []),
]

export type SchoolManagementLoadHolidayDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolManagementLoadHolidayData>>
>
export type SchoolManagementLoadHolidayDataQueryError = ErrorType<void>

export const useSchoolManagementLoadHolidayData = <
  TData = Awaited<ReturnType<typeof schoolManagementLoadHolidayData>>,
  TError = ErrorType<void>,
>(
  params: SchoolManagementLoadHolidayDataParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof schoolManagementLoadHolidayData>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolManagementLoadHolidayDataQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolManagementLoadHolidayData>>> = ({ signal }) =>
    schoolManagementLoadHolidayData(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolManagementLoadHolidayData>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í≥µÌú¥Ïùº Î∂àÎü¨Ïò§Í∏∞(Ïó∞ÎèÑ Ï†ÑÏ≤¥)
 */
export const schoolManagementLoadYearHolidayData = (
  params: SchoolManagementLoadYearHolidayDataParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<boolean[]>(
    { url: `/api/admin/school-management/holiday-year`, method: 'get', params, signal },
    options,
  )
}

export const getSchoolManagementLoadYearHolidayDataQueryKey = (params: SchoolManagementLoadYearHolidayDataParams) => [
  `/api/admin/school-management/holiday-year`,
  ...(params ? [params] : []),
]

export type SchoolManagementLoadYearHolidayDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolManagementLoadYearHolidayData>>
>
export type SchoolManagementLoadYearHolidayDataQueryError = ErrorType<void>

export const useSchoolManagementLoadYearHolidayData = <
  TData = Awaited<ReturnType<typeof schoolManagementLoadYearHolidayData>>,
  TError = ErrorType<void>,
>(
  params: SchoolManagementLoadYearHolidayDataParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof schoolManagementLoadYearHolidayData>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolManagementLoadYearHolidayDataQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolManagementLoadYearHolidayData>>> = ({ signal }) =>
    schoolManagementLoadYearHolidayData(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolManagementLoadYearHolidayData>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∏âÏãùÏ†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞
 */
export const schoolManagementLoadMealData = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<boolean>({ url: `/api/admin/school-management/meal`, method: 'get', signal }, options)
}

export const getSchoolManagementLoadMealDataQueryKey = () => [`/api/admin/school-management/meal`]

export type SchoolManagementLoadMealDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolManagementLoadMealData>>
>
export type SchoolManagementLoadMealDataQueryError = ErrorType<void>

export const useSchoolManagementLoadMealData = <
  TData = Awaited<ReturnType<typeof schoolManagementLoadMealData>>,
  TError = ErrorType<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof schoolManagementLoadMealData>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolManagementLoadMealDataQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolManagementLoadMealData>>> = ({ signal }) =>
    schoolManagementLoadMealData(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolManagementLoadMealData>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary NEIS ÏãúÍ∞ÑÌëú Î∂àÎü¨Ïò§Í∏∞
 */
export const schoolManagementLoadTimetableFromNeis = (
  params: SchoolManagementLoadTimetableFromNeisParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<boolean>(
    { url: `/api/admin/school-management/neis-timetable`, method: 'get', params, signal },
    options,
  )
}

export const getSchoolManagementLoadTimetableFromNeisQueryKey = (
  params: SchoolManagementLoadTimetableFromNeisParams,
) => [`/api/admin/school-management/neis-timetable`, ...(params ? [params] : [])]

export type SchoolManagementLoadTimetableFromNeisQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolManagementLoadTimetableFromNeis>>
>
export type SchoolManagementLoadTimetableFromNeisQueryError = ErrorType<void>

export const useSchoolManagementLoadTimetableFromNeis = <
  TData = Awaited<ReturnType<typeof schoolManagementLoadTimetableFromNeis>>,
  TError = ErrorType<void>,
>(
  params: SchoolManagementLoadTimetableFromNeisParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof schoolManagementLoadTimetableFromNeis>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolManagementLoadTimetableFromNeisQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolManagementLoadTimetableFromNeis>>> = ({ signal }) =>
    schoolManagementLoadTimetableFromNeis(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolManagementLoadTimetableFromNeis>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏãúÍ∞ÑÌëú Îì±Î°ù ÏöîÏ≤≠ Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const schoolManagementGetRegistTimetable = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseTimetableUploadInfoDto[]>(
    { url: `/api/admin/school-management/timetable`, method: 'get', signal },
    options,
  )
}

export const getSchoolManagementGetRegistTimetableQueryKey = () => [`/api/admin/school-management/timetable`]

export type SchoolManagementGetRegistTimetableQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolManagementGetRegistTimetable>>
>
export type SchoolManagementGetRegistTimetableQueryError = ErrorType<unknown>

export const useSchoolManagementGetRegistTimetable = <
  TData = Awaited<ReturnType<typeof schoolManagementGetRegistTimetable>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof schoolManagementGetRegistTimetable>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolManagementGetRegistTimetableQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolManagementGetRegistTimetable>>> = ({ signal }) =>
    schoolManagementGetRegistTimetable(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolManagementGetRegistTimetable>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏãúÍ∞ÑÌëú Îì±Î°ù ÏöîÏ≤≠
 */
export const schoolManagementRegistTimetable = (
  requestTimetableUploadInfoDto: RequestTimetableUploadInfoDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<TimetableUploadInfo>(
    {
      url: `/api/admin/school-management/timetable`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestTimetableUploadInfoDto,
    },
    options,
  )
}

export type SchoolManagementRegistTimetableMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolManagementRegistTimetable>>
>
export type SchoolManagementRegistTimetableMutationBody = RequestTimetableUploadInfoDto
export type SchoolManagementRegistTimetableMutationError = ErrorType<unknown>

export const useSchoolManagementRegistTimetable = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolManagementRegistTimetable>>,
    TError,
    { data: RequestTimetableUploadInfoDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolManagementRegistTimetable>>,
    { data: RequestTimetableUploadInfoDto }
  > = (props) => {
    const { data } = props ?? {}

    return schoolManagementRegistTimetable(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof schoolManagementRegistTimetable>>,
    TError,
    { data: RequestTimetableUploadInfoDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏãúÍ∞ÑÌëú ÌååÏùº Ï¥àÍ∏∞Ìôî
 */
export const schoolManagementResetLecture = (options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/admin/school-management/timetable`, method: 'delete' }, options)
}

export type SchoolManagementResetLectureMutationResult = NonNullable<
  Awaited<ReturnType<typeof schoolManagementResetLecture>>
>

export type SchoolManagementResetLectureMutationError = ErrorType<void>

export const useSchoolManagementResetLecture = <
  TError = ErrorType<void>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof schoolManagementResetLecture>>, TError, TVariables, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof schoolManagementResetLecture>>, TVariables> = () => {
    return schoolManagementResetLecture(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof schoolManagementResetLecture>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏãúÍ∞ÑÌëú Îì±Î°ù ÏÉÅÌÉú ÌôïÏù∏
 */
export const schoolManagementGetTimetableUploadInfo = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<TimetableUploadInfo>(
    { url: `/api/admin/school-management/timetable/${id}`, method: 'get', signal },
    options,
  )
}

export const getSchoolManagementGetTimetableUploadInfoQueryKey = (id: number) => [
  `/api/admin/school-management/timetable/${id}`,
]

export type SchoolManagementGetTimetableUploadInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolManagementGetTimetableUploadInfo>>
>
export type SchoolManagementGetTimetableUploadInfoQueryError = ErrorType<void>

export const useSchoolManagementGetTimetableUploadInfo = <
  TData = Awaited<ReturnType<typeof schoolManagementGetTimetableUploadInfo>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof schoolManagementGetTimetableUploadInfo>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolManagementGetTimetableUploadInfoQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolManagementGetTimetableUploadInfo>>> = ({ signal }) =>
    schoolManagementGetTimetableUploadInfo(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolManagementGetTimetableUploadInfo>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌÜµÍ≥Ñ Ï°∞Ìöå
 */
export const smsManagementGetStatistics = (
  params: SmsManagementGetStatisticsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<SmsCreditHistory[]>(
    { url: `/api/admin/sms-management/statistics`, method: 'get', params, signal },
    options,
  )
}

export const getSmsManagementGetStatisticsQueryKey = (params: SmsManagementGetStatisticsParams) => [
  `/api/admin/sms-management/statistics`,
  ...(params ? [params] : []),
]

export type SmsManagementGetStatisticsQueryResult = NonNullable<Awaited<ReturnType<typeof smsManagementGetStatistics>>>
export type SmsManagementGetStatisticsQueryError = ErrorType<unknown>

export const useSmsManagementGetStatistics = <
  TData = Awaited<ReturnType<typeof smsManagementGetStatistics>>,
  TError = ErrorType<unknown>,
>(
  params: SmsManagementGetStatisticsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof smsManagementGetStatistics>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSmsManagementGetStatisticsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof smsManagementGetStatistics>>> = ({ signal }) =>
    smsManagementGetStatistics(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof smsManagementGetStatistics>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïù¥Î†• Ï°∞Ìöå
 */
export const smsManagementGetSmsHistory = (
  params: SmsManagementGetSmsHistoryParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseSmsHistoryDto[]>(
    { url: `/api/admin/sms-management/history`, method: 'get', params, signal },
    options,
  )
}

export const getSmsManagementGetSmsHistoryQueryKey = (params: SmsManagementGetSmsHistoryParams) => [
  `/api/admin/sms-management/history`,
  ...(params ? [params] : []),
]

export type SmsManagementGetSmsHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof smsManagementGetSmsHistory>>>
export type SmsManagementGetSmsHistoryQueryError = ErrorType<unknown>

export const useSmsManagementGetSmsHistory = <
  TData = Awaited<ReturnType<typeof smsManagementGetSmsHistory>>,
  TError = ErrorType<unknown>,
>(
  params: SmsManagementGetSmsHistoryParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof smsManagementGetSmsHistory>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSmsManagementGetSmsHistoryQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof smsManagementGetSmsHistory>>> = ({ signal }) =>
    smsManagementGetSmsHistory(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof smsManagementGetSmsHistory>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∂©Ï†Ñ Ïù¥Î†• Ï°∞Ìöå
 */
export const smsManagementGetCreditCharge = (
  params: SmsManagementGetCreditChargeParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<SmsCreditCharge[]>(
    { url: `/api/admin/sms-management/credit-charge`, method: 'get', params, signal },
    options,
  )
}

export const getSmsManagementGetCreditChargeQueryKey = (params: SmsManagementGetCreditChargeParams) => [
  `/api/admin/sms-management/credit-charge`,
  ...(params ? [params] : []),
]

export type SmsManagementGetCreditChargeQueryResult = NonNullable<
  Awaited<ReturnType<typeof smsManagementGetCreditCharge>>
>
export type SmsManagementGetCreditChargeQueryError = ErrorType<unknown>

export const useSmsManagementGetCreditCharge = <
  TData = Awaited<ReturnType<typeof smsManagementGetCreditCharge>>,
  TError = ErrorType<unknown>,
>(
  params: SmsManagementGetCreditChargeParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof smsManagementGetCreditCharge>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSmsManagementGetCreditChargeQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof smsManagementGetCreditCharge>>> = ({ signal }) =>
    smsManagementGetCreditCharge(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof smsManagementGetCreditCharge>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏûîÏó¨Îüâ Ï°∞Ìöå
 */
export const smsManagementGetCreditRemain = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<SmsCreditRemain>({ url: `/api/admin/sms-management/credit-remain`, method: 'get', signal }, options)
}

export const getSmsManagementGetCreditRemainQueryKey = () => [`/api/admin/sms-management/credit-remain`]

export type SmsManagementGetCreditRemainQueryResult = NonNullable<
  Awaited<ReturnType<typeof smsManagementGetCreditRemain>>
>
export type SmsManagementGetCreditRemainQueryError = ErrorType<unknown>

export const useSmsManagementGetCreditRemain = <
  TData = Awaited<ReturnType<typeof smsManagementGetCreditRemain>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof smsManagementGetCreditRemain>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSmsManagementGetCreditRemainQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof smsManagementGetCreditRemain>>> = ({ signal }) =>
    smsManagementGetCreditRemain(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof smsManagementGetCreditRemain>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const studentManagementGetStudents = (
  params?: StudentManagementGetStudentsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationStudentInfoDto>(
    { url: `/api/admin/student-management`, method: 'get', params, signal },
    options,
  )
}

export const getStudentManagementGetStudentsQueryKey = (params?: StudentManagementGetStudentsParams) => [
  `/api/admin/student-management`,
  ...(params ? [params] : []),
]

export type StudentManagementGetStudentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentManagementGetStudents>>
>
export type StudentManagementGetStudentsQueryError = ErrorType<unknown>

export const useStudentManagementGetStudents = <
  TData = Awaited<ReturnType<typeof studentManagementGetStudents>>,
  TError = ErrorType<unknown>,
>(
  params?: StudentManagementGetStudentsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentManagementGetStudents>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentManagementGetStudentsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentManagementGetStudents>>> = ({ signal }) =>
    studentManagementGetStudents(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentManagementGetStudents>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Ï†ïÎ≥¥ Ï∂îÍ∞Ä
 */
export const studentManagementCreateStudent = (
  requestCreateStudentDto: RequestCreateStudentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseStudentInfoDto>(
    {
      url: `/api/admin/student-management`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateStudentDto,
    },
    options,
  )
}

export type StudentManagementCreateStudentMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentManagementCreateStudent>>
>
export type StudentManagementCreateStudentMutationBody = RequestCreateStudentDto
export type StudentManagementCreateStudentMutationError = ErrorType<void>

export const useStudentManagementCreateStudent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentManagementCreateStudent>>,
    TError,
    { data: RequestCreateStudentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentManagementCreateStudent>>,
    { data: RequestCreateStudentDto }
  > = (props) => {
    const { data } = props ?? {}

    return studentManagementCreateStudent(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentManagementCreateStudent>>,
    TError,
    { data: RequestCreateStudentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉù Ï†ïÎ≥¥ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const studentManagementGetStudentInfo = (
  id: number,
  params?: StudentManagementGetStudentInfoParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseStudentDetailInfoDto>(
    { url: `/api/admin/student-management/${id}`, method: 'get', params, signal },
    options,
  )
}

export const getStudentManagementGetStudentInfoQueryKey = (
  id: number,
  params?: StudentManagementGetStudentInfoParams,
) => [`/api/admin/student-management/${id}`, ...(params ? [params] : [])]

export type StudentManagementGetStudentInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentManagementGetStudentInfo>>
>
export type StudentManagementGetStudentInfoQueryError = ErrorType<void>

export const useStudentManagementGetStudentInfo = <
  TData = Awaited<ReturnType<typeof studentManagementGetStudentInfo>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: StudentManagementGetStudentInfoParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentManagementGetStudentInfo>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentManagementGetStudentInfoQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentManagementGetStudentInfo>>> = ({ signal }) =>
    studentManagementGetStudentInfo(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentManagementGetStudentInfo>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Ï†ïÎ≥¥ ÏÇ≠Ï†ú
 */
export const studentManagementDeleteStudent = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/admin/student-management/${id}`, method: 'delete' }, options)
}

export type StudentManagementDeleteStudentMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentManagementDeleteStudent>>
>

export type StudentManagementDeleteStudentMutationError = ErrorType<void>

export const useStudentManagementDeleteStudent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentManagementDeleteStudent>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof studentManagementDeleteStudent>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return studentManagementDeleteStudent(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof studentManagementDeleteStudent>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌïôÏÉù Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const studentManagementUpdateStudent = (
  id: number,
  requestModifyStudentDto: RequestModifyStudentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseStudentDetailInfoDto>(
    {
      url: `/api/admin/student-management/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestModifyStudentDto,
    },
    options,
  )
}

export type StudentManagementUpdateStudentMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentManagementUpdateStudent>>
>
export type StudentManagementUpdateStudentMutationBody = RequestModifyStudentDto
export type StudentManagementUpdateStudentMutationError = ErrorType<void>

export const useStudentManagementUpdateStudent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentManagementUpdateStudent>>,
    TError,
    { id: number; data: RequestModifyStudentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentManagementUpdateStudent>>,
    { id: number; data: RequestModifyStudentDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return studentManagementUpdateStudent(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentManagementUpdateStudent>>,
    TError,
    { id: number; data: RequestModifyStudentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉù Ï†ïÎ≥¥ Ï∂îÍ∞Ä(Îã§Í±¥)
 */
export const studentManagementBulkCreateStudent = (
  requestCreateStudentDto: RequestCreateStudentDto[],
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<RequestCreateUserBulkDto[]>(
    {
      url: `/api/admin/student-management/bulk`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateStudentDto,
    },
    options,
  )
}

export type StudentManagementBulkCreateStudentMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentManagementBulkCreateStudent>>
>
export type StudentManagementBulkCreateStudentMutationBody = RequestCreateStudentDto[]
export type StudentManagementBulkCreateStudentMutationError = ErrorType<void>

export const useStudentManagementBulkCreateStudent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentManagementBulkCreateStudent>>,
    TError,
    { data: RequestCreateStudentDto[] },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentManagementBulkCreateStudent>>,
    { data: RequestCreateStudentDto[] }
  > = (props) => {
    const { data } = props ?? {}

    return studentManagementBulkCreateStudent(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentManagementBulkCreateStudent>>,
    TError,
    { data: RequestCreateStudentDto[] },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∞ÄÏûÖÏöîÏ≤≠ Î©îÏùº Ï†ÑÏÜ°(ÌïôÏÉù)
 */
export const studentManagementRequestSignUp = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/admin/student-management/${id}/send-request-signup`, method: 'post' }, options)
}

export type StudentManagementRequestSignUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentManagementRequestSignUp>>
>

export type StudentManagementRequestSignUpMutationError = ErrorType<void>

export const useStudentManagementRequestSignUp = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentManagementRequestSignUp>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof studentManagementRequestSignUp>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return studentManagementRequestSignUp(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof studentManagementRequestSignUp>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌïôÏÉù ÏßÑÍ∏â ÏöîÏ≤≠
 */
export const studentManagementAdvancedStudent = (
  requestAdvancedStudentDto: RequestAdvancedStudentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseStudentInfoDto>(
    {
      url: `/api/admin/student-management/advanced-student`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestAdvancedStudentDto,
    },
    options,
  )
}

export type StudentManagementAdvancedStudentMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentManagementAdvancedStudent>>
>
export type StudentManagementAdvancedStudentMutationBody = RequestAdvancedStudentDto
export type StudentManagementAdvancedStudentMutationError = ErrorType<void>

export const useStudentManagementAdvancedStudent = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentManagementAdvancedStudent>>,
    TError,
    { data: RequestAdvancedStudentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentManagementAdvancedStudent>>,
    { data: RequestAdvancedStudentDto }
  > = (props) => {
    const { data } = props ?? {}

    return studentManagementAdvancedStudent(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentManagementAdvancedStudent>>,
    TError,
    { data: RequestAdvancedStudentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑ†ÏÉùÎãò Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const teacherManagementGetTeachers = (
  params?: TeacherManagementGetTeachersParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationTeacherInfoDto>(
    { url: `/api/admin/teacher-management`, method: 'get', params, signal },
    options,
  )
}

export const getTeacherManagementGetTeachersQueryKey = (params?: TeacherManagementGetTeachersParams) => [
  `/api/admin/teacher-management`,
  ...(params ? [params] : []),
]

export type TeacherManagementGetTeachersQueryResult = NonNullable<
  Awaited<ReturnType<typeof teacherManagementGetTeachers>>
>
export type TeacherManagementGetTeachersQueryError = ErrorType<unknown>

export const useTeacherManagementGetTeachers = <
  TData = Awaited<ReturnType<typeof teacherManagementGetTeachers>>,
  TError = ErrorType<unknown>,
>(
  params?: TeacherManagementGetTeachersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherManagementGetTeachers>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherManagementGetTeachersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherManagementGetTeachers>>> = ({ signal }) =>
    teacherManagementGetTeachers(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherManagementGetTeachers>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãò Ï†ïÎ≥¥ Ï∂îÍ∞Ä
 */
export const teacherManagementCreateTeacher = (
  requestCreateTeacherDto: RequestCreateTeacherDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseTeacherDto>(
    {
      url: `/api/admin/teacher-management`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateTeacherDto,
    },
    options,
  )
}

export type TeacherManagementCreateTeacherMutationResult = NonNullable<
  Awaited<ReturnType<typeof teacherManagementCreateTeacher>>
>
export type TeacherManagementCreateTeacherMutationBody = RequestCreateTeacherDto
export type TeacherManagementCreateTeacherMutationError = ErrorType<void>

export const useTeacherManagementCreateTeacher = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teacherManagementCreateTeacher>>,
    TError,
    { data: RequestCreateTeacherDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teacherManagementCreateTeacher>>,
    { data: RequestCreateTeacherDto }
  > = (props) => {
    const { data } = props ?? {}

    return teacherManagementCreateTeacher(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof teacherManagementCreateTeacher>>,
    TError,
    { data: RequestCreateTeacherDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑ†ÏÉùÎãò Ï†ïÎ≥¥ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const teacherManagementGetTeacherInfo = (
  id: number,
  params?: TeacherManagementGetTeacherInfoParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseTeacherDetailInfoDto>(
    { url: `/api/admin/teacher-management/${id}`, method: 'get', params, signal },
    options,
  )
}

export const getTeacherManagementGetTeacherInfoQueryKey = (
  id: number,
  params?: TeacherManagementGetTeacherInfoParams,
) => [`/api/admin/teacher-management/${id}`, ...(params ? [params] : [])]

export type TeacherManagementGetTeacherInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof teacherManagementGetTeacherInfo>>
>
export type TeacherManagementGetTeacherInfoQueryError = ErrorType<void>

export const useTeacherManagementGetTeacherInfo = <
  TData = Awaited<ReturnType<typeof teacherManagementGetTeacherInfo>>,
  TError = ErrorType<void>,
>(
  id: number,
  params?: TeacherManagementGetTeacherInfoParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherManagementGetTeacherInfo>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherManagementGetTeacherInfoQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherManagementGetTeacherInfo>>> = ({ signal }) =>
    teacherManagementGetTeacherInfo(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherManagementGetTeacherInfo>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãò Ï†ïÎ≥¥ ÏÇ≠Ï†ú
 */
export const teacherManagementDeleteTeacher = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/admin/teacher-management/${id}`, method: 'delete' }, options)
}

export type TeacherManagementDeleteTeacherMutationResult = NonNullable<
  Awaited<ReturnType<typeof teacherManagementDeleteTeacher>>
>

export type TeacherManagementDeleteTeacherMutationError = ErrorType<void>

export const useTeacherManagementDeleteTeacher = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teacherManagementDeleteTeacher>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof teacherManagementDeleteTeacher>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return teacherManagementDeleteTeacher(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof teacherManagementDeleteTeacher>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏÑ†ÏÉùÎãò Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const teacherManagementUpdateTeacher = (
  id: number,
  requestModifyTeacherDto: RequestModifyTeacherDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseTeacherDetailInfoDto>(
    {
      url: `/api/admin/teacher-management/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestModifyTeacherDto,
    },
    options,
  )
}

export type TeacherManagementUpdateTeacherMutationResult = NonNullable<
  Awaited<ReturnType<typeof teacherManagementUpdateTeacher>>
>
export type TeacherManagementUpdateTeacherMutationBody = RequestModifyTeacherDto
export type TeacherManagementUpdateTeacherMutationError = ErrorType<void>

export const useTeacherManagementUpdateTeacher = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teacherManagementUpdateTeacher>>,
    TError,
    { id: number; data: RequestModifyTeacherDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teacherManagementUpdateTeacher>>,
    { id: number; data: RequestModifyTeacherDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return teacherManagementUpdateTeacher(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof teacherManagementUpdateTeacher>>,
    TError,
    { id: number; data: RequestModifyTeacherDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑ†ÏÉùÎãò Ï†ïÎ≥¥ Ï∂îÍ∞Ä(Îã§Í±¥)
 */
export const teacherManagementBulkCreateTeacher = (
  requestCreateTeacherDto: RequestCreateTeacherDto[],
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<RequestCreateUserBulkDto[]>(
    {
      url: `/api/admin/teacher-management/bulk`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateTeacherDto,
    },
    options,
  )
}

export type TeacherManagementBulkCreateTeacherMutationResult = NonNullable<
  Awaited<ReturnType<typeof teacherManagementBulkCreateTeacher>>
>
export type TeacherManagementBulkCreateTeacherMutationBody = RequestCreateTeacherDto[]
export type TeacherManagementBulkCreateTeacherMutationError = ErrorType<void>

export const useTeacherManagementBulkCreateTeacher = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teacherManagementBulkCreateTeacher>>,
    TError,
    { data: RequestCreateTeacherDto[] },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teacherManagementBulkCreateTeacher>>,
    { data: RequestCreateTeacherDto[] }
  > = (props) => {
    const { data } = props ?? {}

    return teacherManagementBulkCreateTeacher(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof teacherManagementBulkCreateTeacher>>,
    TError,
    { data: RequestCreateTeacherDto[] },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∞ÄÏûÖÏöîÏ≤≠ Î©îÏùº Ï†ÑÏÜ°(ÏÑ†ÏÉùÎãò)
 */
export const teacherManagementRequestSignUp = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/admin/teacher-management/${id}/send-request-signup`, method: 'post' }, options)
}

export type TeacherManagementRequestSignUpMutationResult = NonNullable<
  Awaited<ReturnType<typeof teacherManagementRequestSignUp>>
>

export type TeacherManagementRequestSignUpMutationError = ErrorType<void>

export const useTeacherManagementRequestSignUp = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teacherManagementRequestSignUp>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof teacherManagementRequestSignUp>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return teacherManagementRequestSignUp(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof teacherManagementRequestSignUp>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏãúÍ∞ÑÌëú Ï°∞Ìöå
 */
export const timetableManagementGetTimeTable = (
  params: TimetableManagementGetTimeTableParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseTimetableV3Dto[]>(
    { url: `/api/admin/timetable-management`, method: 'get', params, signal },
    options,
  )
}

export const getTimetableManagementGetTimeTableQueryKey = (params: TimetableManagementGetTimeTableParams) => [
  `/api/admin/timetable-management`,
  ...(params ? [params] : []),
]

export type TimetableManagementGetTimeTableQueryResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementGetTimeTable>>
>
export type TimetableManagementGetTimeTableQueryError = ErrorType<unknown>

export const useTimetableManagementGetTimeTable = <
  TData = Awaited<ReturnType<typeof timetableManagementGetTimeTable>>,
  TError = ErrorType<unknown>,
>(
  params: TimetableManagementGetTimeTableParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetableManagementGetTimeTable>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetableManagementGetTimeTableQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetableManagementGetTimeTable>>> = ({ signal }) =>
    timetableManagementGetTimeTable(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetableManagementGetTimeTable>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïù¥Îèô ÏàòÏóÖ Î™©Î°ù Ï°∞Ìöå
 */
export const timetableManagementGetMoveLectureList = (
  params: TimetableManagementGetMoveLectureListParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Lecture[]>(
    { url: `/api/admin/timetable-management/move-lecture`, method: 'get', params, signal },
    options,
  )
}

export const getTimetableManagementGetMoveLectureListQueryKey = (
  params: TimetableManagementGetMoveLectureListParams,
) => [`/api/admin/timetable-management/move-lecture`, ...(params ? [params] : [])]

export type TimetableManagementGetMoveLectureListQueryResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementGetMoveLectureList>>
>
export type TimetableManagementGetMoveLectureListQueryError = ErrorType<unknown>

export const useTimetableManagementGetMoveLectureList = <
  TData = Awaited<ReturnType<typeof timetableManagementGetMoveLectureList>>,
  TError = ErrorType<unknown>,
>(
  params: TimetableManagementGetMoveLectureListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetableManagementGetMoveLectureList>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetableManagementGetMoveLectureListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetableManagementGetMoveLectureList>>> = ({ signal }) =>
    timetableManagementGetMoveLectureList(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetableManagementGetMoveLectureList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏàòÏóÖ ÍµêÌôò
 */
export const timetableManagementTradeLecture = (
  requestTradeLectureDto: RequestTradeLectureDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/admin/timetable-management/trade`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestTradeLectureDto,
    },
    options,
  )
}

export type TimetableManagementTradeLectureMutationResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementTradeLecture>>
>
export type TimetableManagementTradeLectureMutationBody = RequestTradeLectureDto
export type TimetableManagementTradeLectureMutationError = ErrorType<void>

export const useTimetableManagementTradeLecture = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timetableManagementTradeLecture>>,
    TError,
    { data: RequestTradeLectureDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timetableManagementTradeLecture>>,
    { data: RequestTradeLectureDto }
  > = (props) => {
    const { data } = props ?? {}

    return timetableManagementTradeLecture(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof timetableManagementTradeLecture>>,
    TError,
    { data: RequestTradeLectureDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏöîÏùº ÍµêÌôò
 */
export const timetableManagementTradeLectureDay = (
  requestTradeLectureDayDto: RequestTradeLectureDayDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/admin/timetable-management/trade-day`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestTradeLectureDayDto,
    },
    options,
  )
}

export type TimetableManagementTradeLectureDayMutationResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementTradeLectureDay>>
>
export type TimetableManagementTradeLectureDayMutationBody = RequestTradeLectureDayDto
export type TimetableManagementTradeLectureDayMutationError = ErrorType<void>

export const useTimetableManagementTradeLectureDay = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timetableManagementTradeLectureDay>>,
    TError,
    { data: RequestTradeLectureDayDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timetableManagementTradeLectureDay>>,
    { data: RequestTradeLectureDayDto }
  > = (props) => {
    const { data } = props ?? {}

    return timetableManagementTradeLectureDay(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof timetableManagementTradeLectureDay>>,
    TError,
    { data: RequestTradeLectureDayDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏàòÏóÖ Ï∂îÍ∞Ä
 */
export const timetableManagementCreateMoveLecture = (
  week: number,
  lectureId: number,
  requestCreateLectureDto: RequestCreateLectureDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseLectureInfoDto>(
    {
      url: `/api/admin/timetable-management/lecture/${week}/${lectureId}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateLectureDto,
    },
    options,
  )
}

export type TimetableManagementCreateMoveLectureMutationResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementCreateMoveLecture>>
>
export type TimetableManagementCreateMoveLectureMutationBody = RequestCreateLectureDto
export type TimetableManagementCreateMoveLectureMutationError = ErrorType<void>

export const useTimetableManagementCreateMoveLecture = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timetableManagementCreateMoveLecture>>,
    TError,
    { week: number; lectureId: number; data: RequestCreateLectureDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timetableManagementCreateMoveLecture>>,
    { week: number; lectureId: number; data: RequestCreateLectureDto }
  > = (props) => {
    const { week, lectureId, data } = props ?? {}

    return timetableManagementCreateMoveLecture(week, lectureId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof timetableManagementCreateMoveLecture>>,
    TError,
    { week: number; lectureId: number; data: RequestCreateLectureDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏàòÏóÖ Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const timetableManagementModifyLectureInfo = (
  lectureId: number,
  week: number,
  requestModifyLectureInfoDto: RequestModifyLectureInfoDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseLectureInfoDto>(
    {
      url: `/api/admin/timetable-management/${lectureId}/${week}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestModifyLectureInfoDto,
    },
    options,
  )
}

export type TimetableManagementModifyLectureInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementModifyLectureInfo>>
>
export type TimetableManagementModifyLectureInfoMutationBody = RequestModifyLectureInfoDto
export type TimetableManagementModifyLectureInfoMutationError = ErrorType<void>

export const useTimetableManagementModifyLectureInfo = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timetableManagementModifyLectureInfo>>,
    TError,
    { lectureId: number; week: number; data: RequestModifyLectureInfoDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timetableManagementModifyLectureInfo>>,
    { lectureId: number; week: number; data: RequestModifyLectureInfoDto }
  > = (props) => {
    const { lectureId, week, data } = props ?? {}

    return timetableManagementModifyLectureInfo(lectureId, week, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof timetableManagementModifyLectureInfo>>,
    TError,
    { lectureId: number; week: number; data: RequestModifyLectureInfoDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï£ºÎ≥Ñ ÏàòÏóÖ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const timetableManagementGetLectureInfoWithWeek = (
  lectureId: number,
  week: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseLectureInfoDto>(
    { url: `/api/admin/timetable-management/${lectureId}/${week}`, method: 'get', signal },
    options,
  )
}

export const getTimetableManagementGetLectureInfoWithWeekQueryKey = (lectureId: number, week: number) => [
  `/api/admin/timetable-management/${lectureId}/${week}`,
]

export type TimetableManagementGetLectureInfoWithWeekQueryResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementGetLectureInfoWithWeek>>
>
export type TimetableManagementGetLectureInfoWithWeekQueryError = ErrorType<void>

export const useTimetableManagementGetLectureInfoWithWeek = <
  TData = Awaited<ReturnType<typeof timetableManagementGetLectureInfoWithWeek>>,
  TError = ErrorType<void>,
>(
  lectureId: number,
  week: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetableManagementGetLectureInfoWithWeek>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetableManagementGetLectureInfoWithWeekQueryKey(lectureId, week)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetableManagementGetLectureInfoWithWeek>>> = ({ signal }) =>
    timetableManagementGetLectureInfoWithWeek(lectureId, week, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetableManagementGetLectureInfoWithWeek>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!(lectureId && week), ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïù¥Îèô ÏàòÏóÖ ÏÑ†ÌÉù(ÌïôÏÉù ÏãúÍ∞ÑÌëú only)
 */
export const timetableManagementSetStudentMoveLecture = (
  requestModifyMoveLectureDto: RequestModifyMoveLectureDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/admin/timetable-management/move-lecture/student`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestModifyMoveLectureDto,
    },
    options,
  )
}

export type TimetableManagementSetStudentMoveLectureMutationResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementSetStudentMoveLecture>>
>
export type TimetableManagementSetStudentMoveLectureMutationBody = RequestModifyMoveLectureDto
export type TimetableManagementSetStudentMoveLectureMutationError = ErrorType<void>

export const useTimetableManagementSetStudentMoveLecture = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timetableManagementSetStudentMoveLecture>>,
    TError,
    { data: RequestModifyMoveLectureDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timetableManagementSetStudentMoveLecture>>,
    { data: RequestModifyMoveLectureDto }
  > = (props) => {
    const { data } = props ?? {}

    return timetableManagementSetStudentMoveLecture(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof timetableManagementSetStudentMoveLecture>>,
    TError,
    { data: RequestModifyMoveLectureDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏàòÏóÖ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const timetableManagementGetLectureInfo = (
  lectureId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseLectureInfoDto>(
    { url: `/api/admin/timetable-management/${lectureId}`, method: 'get', signal },
    options,
  )
}

export const getTimetableManagementGetLectureInfoQueryKey = (lectureId: number) => [
  `/api/admin/timetable-management/${lectureId}`,
]

export type TimetableManagementGetLectureInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementGetLectureInfo>>
>
export type TimetableManagementGetLectureInfoQueryError = ErrorType<void>

export const useTimetableManagementGetLectureInfo = <
  TData = Awaited<ReturnType<typeof timetableManagementGetLectureInfo>>,
  TError = ErrorType<void>,
>(
  lectureId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetableManagementGetLectureInfo>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetableManagementGetLectureInfoQueryKey(lectureId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetableManagementGetLectureInfo>>> = ({ signal }) =>
    timetableManagementGetLectureInfo(lectureId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetableManagementGetLectureInfo>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!lectureId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÌÉùÌïú ÏàòÏóÖ ÏÇ≠Ï†ú
 */
export const timetableManagementDeleteLecture = (
  lectureId: number,
  params?: TimetableManagementDeleteLectureParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>({ url: `/api/admin/timetable-management/${lectureId}`, method: 'delete', params }, options)
}

export type TimetableManagementDeleteLectureMutationResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementDeleteLecture>>
>

export type TimetableManagementDeleteLectureMutationError = ErrorType<void>

export const useTimetableManagementDeleteLecture = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timetableManagementDeleteLecture>>,
    TError,
    { lectureId: number; params?: TimetableManagementDeleteLectureParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timetableManagementDeleteLecture>>,
    { lectureId: number; params?: TimetableManagementDeleteLectureParams }
  > = (props) => {
    const { lectureId, params } = props ?? {}

    return timetableManagementDeleteLecture(lectureId, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof timetableManagementDeleteLecture>>,
    TError,
    { lectureId: number; params?: TimetableManagementDeleteLectureParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏãúÍ∞ÑÌëú Ï¥àÍ∏∞Ìôî
 */
export const timetableManagementResetLecture = (
  type: string,
  params: TimetableManagementResetLectureParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>({ url: `/api/admin/timetable-management/reset/${type}`, method: 'delete', params }, options)
}

export type TimetableManagementResetLectureMutationResult = NonNullable<
  Awaited<ReturnType<typeof timetableManagementResetLecture>>
>

export type TimetableManagementResetLectureMutationError = ErrorType<void>

export const useTimetableManagementResetLecture = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timetableManagementResetLecture>>,
    TError,
    { type: string; params: TimetableManagementResetLectureParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timetableManagementResetLecture>>,
    { type: string; params: TimetableManagementResetLectureParams }
  > = (props) => {
    const { type, params } = props ?? {}

    return timetableManagementResetLecture(type, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof timetableManagementResetLecture>>,
    TError,
    { type: string; params: TimetableManagementResetLectureParams },
    TContext
  >(mutationFn, mutationOptions)
}

export const teacherPointGet = (
  params: TeacherPointGetParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<PaginatedPoint>({ url: `/api/teacher/points`, method: 'get', params, signal }, options)
}

export const getTeacherPointGetQueryKey = (params: TeacherPointGetParams) => [
  `/api/teacher/points`,
  ...(params ? [params] : []),
]

export type TeacherPointGetQueryResult = NonNullable<Awaited<ReturnType<typeof teacherPointGet>>>
export type TeacherPointGetQueryError = ErrorType<unknown>

export const useTeacherPointGet = <TData = Awaited<ReturnType<typeof teacherPointGet>>, TError = ErrorType<unknown>>(
  params: TeacherPointGetParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherPointGet>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherPointGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherPointGet>>> = ({ signal }) =>
    teacherPointGet(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherPointGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const teacherPointLogGet = (
  params: TeacherPointLogGetParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<PaginatedPointLog>({ url: `/api/teacher/point-logs`, method: 'get', params, signal }, options)
}

export const getTeacherPointLogGetQueryKey = (params: TeacherPointLogGetParams) => [
  `/api/teacher/point-logs`,
  ...(params ? [params] : []),
]

export type TeacherPointLogGetQueryResult = NonNullable<Awaited<ReturnType<typeof teacherPointLogGet>>>
export type TeacherPointLogGetQueryError = ErrorType<unknown>

export const useTeacherPointLogGet = <
  TData = Awaited<ReturnType<typeof teacherPointLogGet>>,
  TError = ErrorType<unknown>,
>(
  params: TeacherPointLogGetParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherPointLogGet>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherPointLogGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherPointLogGet>>> = ({ signal }) =>
    teacherPointLogGet(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherPointLogGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const teacherPointLogCreate = (
  pointLogCreateBody: PointLogCreateBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<PointLog>(
    {
      url: `/api/teacher/point-logs`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: pointLogCreateBody,
    },
    options,
  )
}

export type TeacherPointLogCreateMutationResult = NonNullable<Awaited<ReturnType<typeof teacherPointLogCreate>>>
export type TeacherPointLogCreateMutationBody = PointLogCreateBody
export type TeacherPointLogCreateMutationError = ErrorType<unknown>

export const useTeacherPointLogCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teacherPointLogCreate>>,
    TError,
    { data: PointLogCreateBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teacherPointLogCreate>>,
    { data: PointLogCreateBody }
  > = (props) => {
    const { data } = props ?? {}

    return teacherPointLogCreate(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof teacherPointLogCreate>>, TError, { data: PointLogCreateBody }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

export const teacherPointLogGetOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<PointLog>({ url: `/api/teacher/point-logs/${id}`, method: 'get', signal }, options)
}

export const getTeacherPointLogGetOneQueryKey = (id: number) => [`/api/teacher/point-logs/${id}`]

export type TeacherPointLogGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof teacherPointLogGetOne>>>
export type TeacherPointLogGetOneQueryError = ErrorType<unknown>

export const useTeacherPointLogGetOne = <
  TData = Awaited<ReturnType<typeof teacherPointLogGetOne>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherPointLogGetOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherPointLogGetOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherPointLogGetOne>>> = ({ signal }) =>
    teacherPointLogGetOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherPointLogGetOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const teacherPointLogDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<PointLog>({ url: `/api/teacher/point-logs/${id}`, method: 'delete' }, options)
}

export type TeacherPointLogDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof teacherPointLogDelete>>>

export type TeacherPointLogDeleteMutationError = ErrorType<unknown>

export const useTeacherPointLogDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof teacherPointLogDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof teacherPointLogDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return teacherPointLogDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof teacherPointLogDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

export const teacherStudentGroupGet = (
  params: TeacherStudentGroupGetParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<PaginatedStudentGroup>({ url: `/api/teacher/student-groups`, method: 'get', params, signal }, options)
}

export const getTeacherStudentGroupGetQueryKey = (params: TeacherStudentGroupGetParams) => [
  `/api/teacher/student-groups`,
  ...(params ? [params] : []),
]

export type TeacherStudentGroupGetQueryResult = NonNullable<Awaited<ReturnType<typeof teacherStudentGroupGet>>>
export type TeacherStudentGroupGetQueryError = ErrorType<unknown>

export const useTeacherStudentGroupGet = <
  TData = Awaited<ReturnType<typeof teacherStudentGroupGet>>,
  TError = ErrorType<unknown>,
>(
  params: TeacherStudentGroupGetParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherStudentGroupGet>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherStudentGroupGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherStudentGroupGet>>> = ({ signal }) =>
    teacherStudentGroupGet(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherStudentGroupGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const teacherUserGet = (
  params: TeacherUserGetParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<PaginatedUser>({ url: `/api/teacher/users`, method: 'get', params, signal }, options)
}

export const getTeacherUserGetQueryKey = (params: TeacherUserGetParams) => [
  `/api/teacher/users`,
  ...(params ? [params] : []),
]

export type TeacherUserGetQueryResult = NonNullable<Awaited<ReturnType<typeof teacherUserGet>>>
export type TeacherUserGetQueryError = ErrorType<unknown>

export const useTeacherUserGet = <TData = Awaited<ReturnType<typeof teacherUserGet>>, TError = ErrorType<unknown>>(
  params: TeacherUserGetParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherUserGet>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherUserGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherUserGet>>> = ({ signal }) =>
    teacherUserGet(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherUserGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const teacherUserGetOne = (
  id: number,
  params: TeacherUserGetOneParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<User>({ url: `/api/teacher/users/${id}`, method: 'get', params, signal }, options)
}

export const getTeacherUserGetOneQueryKey = (id: number, params: TeacherUserGetOneParams) => [
  `/api/teacher/users/${id}`,
  ...(params ? [params] : []),
]

export type TeacherUserGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof teacherUserGetOne>>>
export type TeacherUserGetOneQueryError = ErrorType<unknown>

export const useTeacherUserGetOne = <
  TData = Awaited<ReturnType<typeof teacherUserGetOne>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  params: TeacherUserGetOneParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherUserGetOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherUserGetOneQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherUserGetOne>>> = ({ signal }) =>
    teacherUserGetOne(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherUserGetOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Course Î™©Î°ù Ï°∞Ìöå
 */
export const courseGet = (params: CourseGetParams, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Course[]>({ url: `/api/course`, method: 'get', params, signal }, options)
}

export const getCourseGetQueryKey = (params: CourseGetParams) => [`/api/course`, ...(params ? [params] : [])]

export type CourseGetQueryResult = NonNullable<Awaited<ReturnType<typeof courseGet>>>
export type CourseGetQueryError = ErrorType<unknown>

export const useCourseGet = <TData = Awaited<ReturnType<typeof courseGet>>, TError = ErrorType<unknown>>(
  params: CourseGetParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof courseGet>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCourseGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof courseGet>>> = ({ signal }) =>
    courseGet(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof courseGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Course Lecture Î™©Î°ù Ï°∞Ìöå
 */
export const courseLectureGet = (
  params: CourseLectureGetParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<CourseLecture[]>({ url: `/api/course-lecture`, method: 'get', params, signal }, options)
}

export const getCourseLectureGetQueryKey = (params: CourseLectureGetParams) => [
  `/api/course-lecture`,
  ...(params ? [params] : []),
]

export type CourseLectureGetQueryResult = NonNullable<Awaited<ReturnType<typeof courseLectureGet>>>
export type CourseLectureGetQueryError = ErrorType<unknown>

export const useCourseLectureGet = <TData = Awaited<ReturnType<typeof courseLectureGet>>, TError = ErrorType<unknown>>(
  params: CourseLectureGetParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof courseLectureGet>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCourseLectureGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof courseLectureGet>>> = ({ signal }) =>
    courseLectureGet(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof courseLectureGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Course Season Îã®Í±¥ Ï°∞Ìöå
 */
export const courseSeasonGetOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<CourseSeason>({ url: `/api/course-season/${id}`, method: 'get', signal }, options)
}

export const getCourseSeasonGetOneQueryKey = (id: number) => [`/api/course-season/${id}`]

export type CourseSeasonGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof courseSeasonGetOne>>>
export type CourseSeasonGetOneQueryError = ErrorType<unknown>

export const useCourseSeasonGetOne = <
  TData = Awaited<ReturnType<typeof courseSeasonGetOne>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof courseSeasonGetOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCourseSeasonGetOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof courseSeasonGetOne>>> = ({ signal }) =>
    courseSeasonGetOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof courseSeasonGetOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Course Season Î™©Î°ù Ï°∞Ìöå
 */
export const courseSeasonGet = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<CourseSeason[]>({ url: `/api/course-season`, method: 'get', signal }, options)
}

export const getCourseSeasonGetQueryKey = () => [`/api/course-season`]

export type CourseSeasonGetQueryResult = NonNullable<Awaited<ReturnType<typeof courseSeasonGet>>>
export type CourseSeasonGetQueryError = ErrorType<unknown>

export const useCourseSeasonGet = <
  TData = Awaited<ReturnType<typeof courseSeasonGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof courseSeasonGet>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCourseSeasonGetQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof courseSeasonGet>>> = ({ signal }) =>
    courseSeasonGet(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof courseSeasonGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Course Term Îã®Í±¥ Ï°∞Ìöå
 */
export const courseTermGetOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<CourseTerm>({ url: `/api/course-term/${id}`, method: 'get', signal }, options)
}

export const getCourseTermGetOneQueryKey = (id: number) => [`/api/course-term/${id}`]

export type CourseTermGetOneQueryResult = NonNullable<Awaited<ReturnType<typeof courseTermGetOne>>>
export type CourseTermGetOneQueryError = ErrorType<unknown>

export const useCourseTermGetOne = <TData = Awaited<ReturnType<typeof courseTermGetOne>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof courseTermGetOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCourseTermGetOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof courseTermGetOne>>> = ({ signal }) =>
    courseTermGetOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof courseTermGetOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Course Trainee Î™©Î°ù Ï°∞Ìöå
 */
export const courseTraineeGet = (
  params: CourseTraineeGetParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<CourseTrainee[]>({ url: `/api/course-trainee`, method: 'get', params, signal }, options)
}

export const getCourseTraineeGetQueryKey = (params: CourseTraineeGetParams) => [
  `/api/course-trainee`,
  ...(params ? [params] : []),
]

export type CourseTraineeGetQueryResult = NonNullable<Awaited<ReturnType<typeof courseTraineeGet>>>
export type CourseTraineeGetQueryError = ErrorType<unknown>

export const useCourseTraineeGet = <TData = Awaited<ReturnType<typeof courseTraineeGet>>, TError = ErrorType<unknown>>(
  params: CourseTraineeGetParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof courseTraineeGet>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCourseTraineeGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof courseTraineeGet>>> = ({ signal }) =>
    courseTraineeGet(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof courseTraineeGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Lecture Attendance Îã®Í±¥ Ï°∞Ìöå
 */
export const lectureAttendanceGetOneByForeignKeys = (
  params: LectureAttendanceGetOneByForeignKeysParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<LectureAttendance>(
    { url: `/api/lecture-attendance/one-by-foreign-keys`, method: 'get', params, signal },
    options,
  )
}

export const getLectureAttendanceGetOneByForeignKeysQueryKey = (params: LectureAttendanceGetOneByForeignKeysParams) => [
  `/api/lecture-attendance/one-by-foreign-keys`,
  ...(params ? [params] : []),
]

export type LectureAttendanceGetOneByForeignKeysQueryResult = NonNullable<
  Awaited<ReturnType<typeof lectureAttendanceGetOneByForeignKeys>>
>
export type LectureAttendanceGetOneByForeignKeysQueryError = ErrorType<unknown>

export const useLectureAttendanceGetOneByForeignKeys = <
  TData = Awaited<ReturnType<typeof lectureAttendanceGetOneByForeignKeys>>,
  TError = ErrorType<unknown>,
>(
  params: LectureAttendanceGetOneByForeignKeysParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof lectureAttendanceGetOneByForeignKeys>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLectureAttendanceGetOneByForeignKeysQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof lectureAttendanceGetOneByForeignKeys>>> = ({ signal }) =>
    lectureAttendanceGetOneByForeignKeys(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof lectureAttendanceGetOneByForeignKeys>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Lecture Attendance Ï†ÄÏû• (ÎòêÎäî ÏÇ≠Ï†ú)
 */
export const lectureAttendanceSave = (
  saveLectureAttendanceDto: SaveLectureAttendanceDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/lecture-attendance`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: saveLectureAttendanceDto,
    },
    options,
  )
}

export type LectureAttendanceSaveMutationResult = NonNullable<Awaited<ReturnType<typeof lectureAttendanceSave>>>
export type LectureAttendanceSaveMutationBody = SaveLectureAttendanceDto
export type LectureAttendanceSaveMutationError = ErrorType<unknown>

export const useLectureAttendanceSave = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof lectureAttendanceSave>>,
    TError,
    { data: SaveLectureAttendanceDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof lectureAttendanceSave>>,
    { data: SaveLectureAttendanceDto }
  > = (props) => {
    const { data } = props ?? {}

    return lectureAttendanceSave(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof lectureAttendanceSave>>,
    TError,
    { data: SaveLectureAttendanceDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú Î™©Î°ù(ÌïôÏÉùÏö©)
 */
export const absentsFindAllByStudent = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Absent[]>({ url: `/api/absents/list-by-student`, method: 'get', signal }, options)
}

export const getAbsentsFindAllByStudentQueryKey = () => [`/api/absents/list-by-student`]

export type AbsentsFindAllByStudentQueryResult = NonNullable<Awaited<ReturnType<typeof absentsFindAllByStudent>>>
export type AbsentsFindAllByStudentQueryError = ErrorType<unknown>

export const useAbsentsFindAllByStudent = <
  TData = Awaited<ReturnType<typeof absentsFindAllByStudent>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof absentsFindAllByStudent>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsFindAllByStudentQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsFindAllByStudent>>> = ({ signal }) =>
    absentsFindAllByStudent(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsFindAllByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú Î™©Î°ù(ÏÑ†ÏÉùÎãòÏö©), Î†àÍ±∞Ïãú Í±∞Ïùò Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
 */
export const absentsGetAbsentsByTeacher = (
  params: AbsentsGetAbsentsByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedAbsentDto>({ url: `/api/absents/teacher`, method: 'get', params, signal }, options)
}

export const getAbsentsGetAbsentsByTeacherQueryKey = (params: AbsentsGetAbsentsByTeacherParams) => [
  `/api/absents/teacher`,
  ...(params ? [params] : []),
]

export type AbsentsGetAbsentsByTeacherQueryResult = NonNullable<Awaited<ReturnType<typeof absentsGetAbsentsByTeacher>>>
export type AbsentsGetAbsentsByTeacherQueryError = ErrorType<unknown>

export const useAbsentsGetAbsentsByTeacher = <
  TData = Awaited<ReturnType<typeof absentsGetAbsentsByTeacher>>,
  TError = ErrorType<unknown>,
>(
  params: AbsentsGetAbsentsByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof absentsGetAbsentsByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsGetAbsentsByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsGetAbsentsByTeacher>>> = ({ signal }) =>
    absentsGetAbsentsByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsGetAbsentsByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∂úÍ≤∞ ÏÑúÎ•òÍ¥ÄÎ¶¨ Î™©Î°ù(ÏÑ†ÏÉùÎãòÏö©)
 */
export const absentsGetAbsentsHistory = (
  params: AbsentsGetAbsentsHistoryParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedAbsentDto>({ url: `/api/absents/history`, method: 'get', params, signal }, options)
}

export const getAbsentsGetAbsentsHistoryQueryKey = (params: AbsentsGetAbsentsHistoryParams) => [
  `/api/absents/history`,
  ...(params ? [params] : []),
]

export type AbsentsGetAbsentsHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof absentsGetAbsentsHistory>>>
export type AbsentsGetAbsentsHistoryQueryError = ErrorType<unknown>

export const useAbsentsGetAbsentsHistory = <
  TData = Awaited<ReturnType<typeof absentsGetAbsentsHistory>>,
  TError = ErrorType<unknown>,
>(
  params: AbsentsGetAbsentsHistoryParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof absentsGetAbsentsHistory>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsGetAbsentsHistoryQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsGetAbsentsHistory>>> = ({ signal }) =>
    absentsGetAbsentsHistory(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsGetAbsentsHistory>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú Î™©Î°ù Í∑∏Î£πÏïÑÏù¥ÎîîÎ°ú Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©), Î†àÍ±∞Ïãú Í±∞Ïùò Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
 */
export const absentsGetAbsentsByGroupId = (
  params: AbsentsGetAbsentsByGroupIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedAbsentDto>({ url: `/api/absents/groupid`, method: 'get', params, signal }, options)
}

export const getAbsentsGetAbsentsByGroupIdQueryKey = (params: AbsentsGetAbsentsByGroupIdParams) => [
  `/api/absents/groupid`,
  ...(params ? [params] : []),
]

export type AbsentsGetAbsentsByGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof absentsGetAbsentsByGroupId>>>
export type AbsentsGetAbsentsByGroupIdQueryError = ErrorType<unknown>

export const useAbsentsGetAbsentsByGroupId = <
  TData = Awaited<ReturnType<typeof absentsGetAbsentsByGroupId>>,
  TError = ErrorType<unknown>,
>(
  params: AbsentsGetAbsentsByGroupIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof absentsGetAbsentsByGroupId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsGetAbsentsByGroupIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsGetAbsentsByGroupId>>> = ({ signal }) =>
    absentsGetAbsentsByGroupId(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsGetAbsentsByGroupId>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @deprecated
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú csv Î™©Î°ù(ÏÑ†ÏÉùÎãòÏö©), Î†àÍ±∞Ïãú Í±∞Ïùò Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
 */
export const absentsGetAbsentsForCSV = (
  params: AbsentsGetAbsentsForCSVParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedAbsentDto>(
    { url: `/api/absents/teacher/csv`, method: 'get', params, signal },
    options,
  )
}

export const getAbsentsGetAbsentsForCSVQueryKey = (params: AbsentsGetAbsentsForCSVParams) => [
  `/api/absents/teacher/csv`,
  ...(params ? [params] : []),
]

export type AbsentsGetAbsentsForCSVQueryResult = NonNullable<Awaited<ReturnType<typeof absentsGetAbsentsForCSV>>>
export type AbsentsGetAbsentsForCSVQueryError = ErrorType<unknown>

export const useAbsentsGetAbsentsForCSV = <
  TData = Awaited<ReturnType<typeof absentsGetAbsentsForCSV>>,
  TError = ErrorType<unknown>,
>(
  params: AbsentsGetAbsentsForCSVParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof absentsGetAbsentsForCSV>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsGetAbsentsForCSVQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsGetAbsentsForCSV>>> = ({ signal }) =>
    absentsGetAbsentsForCSV(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsGetAbsentsForCSV>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú(ÏÑ†ÏÉùÎãòÏö©)
 */
export const absentsDownloadAbsents = (
  params: AbsentsDownloadAbsentsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>({ url: `/api/absents/download`, method: 'get', params, responseType: 'blob', signal }, options)
}

export const getAbsentsDownloadAbsentsQueryKey = (params: AbsentsDownloadAbsentsParams) => [
  `/api/absents/download`,
  ...(params ? [params] : []),
]

export type AbsentsDownloadAbsentsQueryResult = NonNullable<Awaited<ReturnType<typeof absentsDownloadAbsents>>>
export type AbsentsDownloadAbsentsQueryError = ErrorType<unknown>

export const useAbsentsDownloadAbsents = <
  TData = Awaited<ReturnType<typeof absentsDownloadAbsents>>,
  TError = ErrorType<unknown>,
>(
  params: AbsentsDownloadAbsentsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof absentsDownloadAbsents>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsDownloadAbsentsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsDownloadAbsents>>> = ({ signal }) =>
    absentsDownloadAbsents(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsDownloadAbsents>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * TODO /teacher/:id endpoint Ï†úÍ±∞ ÌïÑÏöî
 * @summary ÎÇòÏù¥Ïä§ ÎπÑÍµê Í≤∞ÏÑùÏã†Í≥†ÏÑú Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const absentsGetAttendeeInfo = (
  params: AbsentsGetAttendeeInfoParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseListAttendeeItemDto[]>(
    { url: `/api/absents/list-attendee`, method: 'get', params, signal },
    options,
  )
}

export const getAbsentsGetAttendeeInfoQueryKey = (params: AbsentsGetAttendeeInfoParams) => [
  `/api/absents/list-attendee`,
  ...(params ? [params] : []),
]

export type AbsentsGetAttendeeInfoQueryResult = NonNullable<Awaited<ReturnType<typeof absentsGetAttendeeInfo>>>
export type AbsentsGetAttendeeInfoQueryError = ErrorType<unknown>

export const useAbsentsGetAttendeeInfo = <
  TData = Awaited<ReturnType<typeof absentsGetAttendeeInfo>>,
  TError = ErrorType<unknown>,
>(
  params: AbsentsGetAttendeeInfoParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof absentsGetAttendeeInfo>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsGetAttendeeInfoQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsGetAttendeeInfo>>> = ({ signal }) =>
    absentsGetAttendeeInfo(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsGetAttendeeInfo>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍ∏âÎ≥Ñ Ï∂úÍ≤∞ ÌòÑÌô© Îã§Ïö¥Î°úÎìú(ÏÑ†ÏÉùÎãòÏö©)
 */
export const absentsDownloadAttendee = (
  params: AbsentsDownloadAttendeeParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/absents/teacher/download/attendee`, method: 'get', params, responseType: 'blob', signal },
    options,
  )
}

export const getAbsentsDownloadAttendeeQueryKey = (params: AbsentsDownloadAttendeeParams) => [
  `/api/absents/teacher/download/attendee`,
  ...(params ? [params] : []),
]

export type AbsentsDownloadAttendeeQueryResult = NonNullable<Awaited<ReturnType<typeof absentsDownloadAttendee>>>
export type AbsentsDownloadAttendeeQueryError = ErrorType<unknown>

export const useAbsentsDownloadAttendee = <
  TData = Awaited<ReturnType<typeof absentsDownloadAttendee>>,
  TError = ErrorType<unknown>,
>(
  params: AbsentsDownloadAttendeeParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof absentsDownloadAttendee>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsDownloadAttendeeQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsDownloadAttendee>>> = ({ signal }) =>
    absentsDownloadAttendee(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsDownloadAttendee>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * TODO /teacher/:id endpoint Ï†úÍ±∞ ÌïÑÏöî
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú Îã®Í±¥ Ï°∞Ìöå
 */
export const absentsFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Absent>({ url: `/api/absents/${id}`, method: 'get', signal }, options)
}

export const getAbsentsFindOneQueryKey = (id: number) => [`/api/absents/${id}`]

export type AbsentsFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof absentsFindOne>>>
export type AbsentsFindOneQueryError = ErrorType<void>

export const useAbsentsFindOne = <TData = Awaited<ReturnType<typeof absentsFindOne>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof absentsFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsFindOne>>> = ({ signal }) =>
    absentsFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú ÏàòÏ†ï
 */
export const absentsUpdate = (
  id: number,
  requestCreateAbsentDto: RequestCreateAbsentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Absent>(
    {
      url: `/api/absents/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateAbsentDto,
    },
    options,
  )
}

export type AbsentsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof absentsUpdate>>>
export type AbsentsUpdateMutationBody = RequestCreateAbsentDto
export type AbsentsUpdateMutationError = ErrorType<void>

export const useAbsentsUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsUpdate>>,
    TError,
    { id: number; data: RequestCreateAbsentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof absentsUpdate>>,
    { id: number; data: RequestCreateAbsentDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return absentsUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof absentsUpdate>>,
    TError,
    { id: number; data: RequestCreateAbsentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú ÏÇ≠Ï†ú
 */
export const absentsDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/absents/${id}`, method: 'delete' }, options)
}

export type AbsentsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof absentsDelete>>>

export type AbsentsDeleteMutationError = ErrorType<unknown>

export const useAbsentsDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof absentsDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof absentsDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return absentsDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof absentsDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú Îã®Í±¥ Ï°∞Ìöå(by UUID)
 */
export const absentsFindOneByUUID = (uuid: string, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Absent>({ url: `/api/absents/by-uuid/${uuid}`, method: 'get', signal }, options)
}

export const getAbsentsFindOneByUUIDQueryKey = (uuid: string) => [`/api/absents/by-uuid/${uuid}`]

export type AbsentsFindOneByUUIDQueryResult = NonNullable<Awaited<ReturnType<typeof absentsFindOneByUUID>>>
export type AbsentsFindOneByUUIDQueryError = ErrorType<unknown>

export const useAbsentsFindOneByUUID = <
  TData = Awaited<ReturnType<typeof absentsFindOneByUUID>>,
  TError = ErrorType<unknown>,
>(
  uuid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof absentsFindOneByUUID>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsFindOneByUUIDQueryKey(uuid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsFindOneByUUID>>> = ({ signal }) =>
    absentsFindOneByUUID(uuid, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsFindOneByUUID>>, TError, TData>(queryKey, queryFn, {
    enabled: !!uuid,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú Ï∂îÍ∞Ä
 */
export const absentsCreate = (
  requestCreateAbsentDto: RequestCreateAbsentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Absent>(
    {
      url: `/api/absents`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateAbsentDto,
    },
    options,
  )
}

export type AbsentsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof absentsCreate>>>
export type AbsentsCreateMutationBody = RequestCreateAbsentDto
export type AbsentsCreateMutationError = ErrorType<void>

export const useAbsentsCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsCreate>>,
    TError,
    { data: RequestCreateAbsentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof absentsCreate>>, { data: RequestCreateAbsentDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return absentsCreate(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof absentsCreate>>, TError, { data: RequestCreateAbsentDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú ÏàòÏ†ï(ÏÑ†ÏÉùÎãòÏö©)
 */
export const absentsUpdateByTeacher = (
  id: number,
  requestUpdateAbsentDto: RequestUpdateAbsentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Absent>(
    {
      url: `/api/absents/update-by-teacher/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateAbsentDto,
    },
    options,
  )
}

export type AbsentsUpdateByTeacherMutationResult = NonNullable<Awaited<ReturnType<typeof absentsUpdateByTeacher>>>
export type AbsentsUpdateByTeacherMutationBody = RequestUpdateAbsentDto
export type AbsentsUpdateByTeacherMutationError = ErrorType<void>

export const useAbsentsUpdateByTeacher = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsUpdateByTeacher>>,
    TError,
    { id: number; data: RequestUpdateAbsentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof absentsUpdateByTeacher>>,
    { id: number; data: RequestUpdateAbsentDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return absentsUpdateByTeacher(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof absentsUpdateByTeacher>>,
    TError,
    { id: number; data: RequestUpdateAbsentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú ÏÇ≠Ï†úÏöîÏ≤≠
 */
export const absentsRequestDelete = (
  id: number,
  absentsRequestDeleteBody: AbsentsRequestDeleteBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Absent>(
    {
      url: `/api/absents/request-delete/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: absentsRequestDeleteBody,
    },
    options,
  )
}

export type AbsentsRequestDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof absentsRequestDelete>>>
export type AbsentsRequestDeleteMutationBody = AbsentsRequestDeleteBody
export type AbsentsRequestDeleteMutationError = ErrorType<void>

export const useAbsentsRequestDelete = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsRequestDelete>>,
    TError,
    { id: number; data: AbsentsRequestDeleteBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof absentsRequestDelete>>,
    { id: number; data: AbsentsRequestDeleteBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return absentsRequestDelete(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof absentsRequestDelete>>,
    TError,
    { id: number; data: AbsentsRequestDeleteBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú Î∞òÎ†§
 */
export const absentsDeny = (
  id: number,
  absentsDenyBody: AbsentsDenyBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/absents/deny/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: absentsDenyBody,
    },
    options,
  )
}

export type AbsentsDenyMutationResult = NonNullable<Awaited<ReturnType<typeof absentsDeny>>>
export type AbsentsDenyMutationBody = AbsentsDenyBody
export type AbsentsDenyMutationError = ErrorType<unknown>

export const useAbsentsDeny = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsDeny>>,
    TError,
    { id: number; data: AbsentsDenyBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof absentsDeny>>, { id: number; data: AbsentsDenyBody }> = (
    props,
  ) => {
    const { id, data } = props ?? {}

    return absentsDeny(id, data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof absentsDeny>>, TError, { id: number; data: AbsentsDenyBody }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Í≤∞ÏÑù Ïã†Í≥†ÏÑú ÏäπÏù∏(Îã¥ÏûÑ) ÏΩîÎ©òÌä∏ Ï†ÄÏû•
 */
export const absentsTeacherCommentApproval = (
  id: number,
  absentsTeacherCommentApprovalBody: AbsentsTeacherCommentApprovalBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/absents/teacherCommentApproval/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: absentsTeacherCommentApprovalBody,
    },
    options,
  )
}

export type AbsentsTeacherCommentApprovalMutationResult = NonNullable<
  Awaited<ReturnType<typeof absentsTeacherCommentApproval>>
>
export type AbsentsTeacherCommentApprovalMutationBody = AbsentsTeacherCommentApprovalBody
export type AbsentsTeacherCommentApprovalMutationError = ErrorType<unknown>

export const useAbsentsTeacherCommentApproval = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsTeacherCommentApproval>>,
    TError,
    { id: number; data: AbsentsTeacherCommentApprovalBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof absentsTeacherCommentApproval>>,
    { id: number; data: AbsentsTeacherCommentApprovalBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return absentsTeacherCommentApproval(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof absentsTeacherCommentApproval>>,
    TError,
    { id: number; data: AbsentsTeacherCommentApprovalBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú ÏäπÏù∏(Î∂ÄÎ™®Îãò) from ÏïåÎ¶ºÌÜ°
 */
export const absentsApproveByParent = (
  uuid: string,
  absentsApproveByParentBody: AbsentsApproveByParentBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/absents/approve-by-parent/${uuid}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: absentsApproveByParentBody,
    },
    options,
  )
}

export type AbsentsApproveByParentMutationResult = NonNullable<Awaited<ReturnType<typeof absentsApproveByParent>>>
export type AbsentsApproveByParentMutationBody = AbsentsApproveByParentBody
export type AbsentsApproveByParentMutationError = ErrorType<unknown>

export const useAbsentsApproveByParent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsApproveByParent>>,
    TError,
    { uuid: string; data: AbsentsApproveByParentBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof absentsApproveByParent>>,
    { uuid: string; data: AbsentsApproveByParentBody }
  > = (props) => {
    const { uuid, data } = props ?? {}

    return absentsApproveByParent(uuid, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof absentsApproveByParent>>,
    TError,
    { uuid: string; data: AbsentsApproveByParentBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú ÏäπÏù∏(Î∂ÄÎ™®Îãò) from ÏäàÌçºÏä§Ïø®Ïï±
 */
export const absentsApproveByParentApp = (
  id: number,
  absentsApproveByParentAppBody: AbsentsApproveByParentAppBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/absents/approve-by-parentapp/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: absentsApproveByParentAppBody,
    },
    options,
  )
}

export type AbsentsApproveByParentAppMutationResult = NonNullable<Awaited<ReturnType<typeof absentsApproveByParentApp>>>
export type AbsentsApproveByParentAppMutationBody = AbsentsApproveByParentAppBody
export type AbsentsApproveByParentAppMutationError = ErrorType<unknown>

export const useAbsentsApproveByParentApp = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsApproveByParentApp>>,
    TError,
    { id: number; data: AbsentsApproveByParentAppBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof absentsApproveByParentApp>>,
    { id: number; data: AbsentsApproveByParentAppBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return absentsApproveByParentApp(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof absentsApproveByParentApp>>,
    TError,
    { id: number; data: AbsentsApproveByParentAppBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú ÏäπÏù∏
 */
export const absentsApprove = (
  id: number,
  absentsApproveBody: AbsentsApproveBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/absents/approve/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: absentsApproveBody,
    },
    options,
  )
}

export type AbsentsApproveMutationResult = NonNullable<Awaited<ReturnType<typeof absentsApprove>>>
export type AbsentsApproveMutationBody = AbsentsApproveBody
export type AbsentsApproveMutationError = ErrorType<unknown>

export const useAbsentsApprove = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsApprove>>,
    TError,
    { id: number; data: AbsentsApproveBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof absentsApprove>>,
    { id: number; data: AbsentsApproveBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return absentsApprove(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof absentsApprove>>,
    TError,
    { id: number; data: AbsentsApproveBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú Ï¶ùÎπôÏÑúÎ•ò ÌôïÏù∏ Ï≤¥ÌÅ¨
 */
export const absentsSubmitted = (
  id: number,
  absentsSubmittedBody: AbsentsSubmittedBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/absents/submitted/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: absentsSubmittedBody,
    },
    options,
  )
}

export type AbsentsSubmittedMutationResult = NonNullable<Awaited<ReturnType<typeof absentsSubmitted>>>
export type AbsentsSubmittedMutationBody = AbsentsSubmittedBody
export type AbsentsSubmittedMutationError = ErrorType<unknown>

export const useAbsentsSubmitted = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsSubmitted>>,
    TError,
    { id: number; data: AbsentsSubmittedBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof absentsSubmitted>>,
    { id: number; data: AbsentsSubmittedBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return absentsSubmitted(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof absentsSubmitted>>,
    TError,
    { id: number; data: AbsentsSubmittedBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÍ≤∞ Ïã†Í≥†ÏÑú ÎÇòÏù¥Ïä§ ÌôïÏù∏ Ï≤¥ÌÅ¨
 */
export const absentsNiceSubmitted = (
  id: number,
  absentsNiceSubmittedBody: AbsentsNiceSubmittedBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/absents/nice-submitted/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: absentsNiceSubmittedBody,
    },
    options,
  )
}

export type AbsentsNiceSubmittedMutationResult = NonNullable<Awaited<ReturnType<typeof absentsNiceSubmitted>>>
export type AbsentsNiceSubmittedMutationBody = AbsentsNiceSubmittedBody
export type AbsentsNiceSubmittedMutationError = ErrorType<unknown>

export const useAbsentsNiceSubmitted = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof absentsNiceSubmitted>>,
    TError,
    { id: number; data: AbsentsNiceSubmittedBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof absentsNiceSubmitted>>,
    { id: number; data: AbsentsNiceSubmittedBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return absentsNiceSubmitted(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof absentsNiceSubmitted>>,
    TError,
    { id: number; data: AbsentsNiceSubmittedBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í≤∞ÏÑùÏã†Í≥†ÏÑú Î∂ÄÎ™®Îãò ÏÇ¨Ïù∏ Ïû¨ÏöîÏ≤≠
 */
export const absentsResend = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<void>({ url: `/api/absents/resend/${id}`, method: 'get', signal }, options)
}

export const getAbsentsResendQueryKey = (id: number) => [`/api/absents/resend/${id}`]

export type AbsentsResendQueryResult = NonNullable<Awaited<ReturnType<typeof absentsResend>>>
export type AbsentsResendQueryError = ErrorType<unknown>

export const useAbsentsResend = <TData = Awaited<ReturnType<typeof absentsResend>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof absentsResend>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAbsentsResendQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof absentsResend>>> = ({ signal }) =>
    absentsResend(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof absentsResend>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ±Ï∑®Í∏∞Ï§Ä Ï°∞Ìöå
 */
export const achievementCriteriaGetAll = (
  params: AchievementCriteriaGetAllParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<AchievementChapter[]>({ url: `/api/achievement-criteria`, method: 'get', params, signal }, options)
}

export const getAchievementCriteriaGetAllQueryKey = (params: AchievementCriteriaGetAllParams) => [
  `/api/achievement-criteria`,
  ...(params ? [params] : []),
]

export type AchievementCriteriaGetAllQueryResult = NonNullable<Awaited<ReturnType<typeof achievementCriteriaGetAll>>>
export type AchievementCriteriaGetAllQueryError = ErrorType<unknown>

export const useAchievementCriteriaGetAll = <
  TData = Awaited<ReturnType<typeof achievementCriteriaGetAll>>,
  TError = ErrorType<unknown>,
>(
  params: AchievementCriteriaGetAllParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof achievementCriteriaGetAll>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAchievementCriteriaGetAllQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof achievementCriteriaGetAll>>> = ({ signal }) =>
    achievementCriteriaGetAll(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof achievementCriteriaGetAll>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ids Í∏∞Î∞òÏúºÎ°ú ÏÑ±Ï∑®Í∏∞Ï§Ä Ï°∞Ìöå
 */
export const achievementCriteriaGetByIds = (
  params?: AchievementCriteriaGetByIdsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<AchievementCriteria[]>(
    { url: `/api/achievement-criteria/get-by-ids`, method: 'get', params, signal },
    options,
  )
}

export const getAchievementCriteriaGetByIdsQueryKey = (params?: AchievementCriteriaGetByIdsParams) => [
  `/api/achievement-criteria/get-by-ids`,
  ...(params ? [params] : []),
]

export type AchievementCriteriaGetByIdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof achievementCriteriaGetByIds>>
>
export type AchievementCriteriaGetByIdsQueryError = ErrorType<unknown>

export const useAchievementCriteriaGetByIds = <
  TData = Awaited<ReturnType<typeof achievementCriteriaGetByIds>>,
  TError = ErrorType<unknown>,
>(
  params?: AchievementCriteriaGetByIdsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof achievementCriteriaGetByIds>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAchievementCriteriaGetByIdsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof achievementCriteriaGetByIds>>> = ({ signal }) =>
    achievementCriteriaGetByIds(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof achievementCriteriaGetByIds>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÌôúÎèôÏöîÏïΩ GPT ÏãúÏïà Î∂àÎü¨Ïò§Í∏∞
 */
export const activityCardGetActivityGPTAnalysis = (
  studentId: number,
  activityId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>(
    { url: `/api/activity-card/${studentId}/activity/${activityId}`, method: 'get', signal },
    options,
  )
}

export const getActivityCardGetActivityGPTAnalysisQueryKey = (studentId: number, activityId: number) => [
  `/api/activity-card/${studentId}/activity/${activityId}`,
]

export type ActivityCardGetActivityGPTAnalysisQueryResult = NonNullable<
  Awaited<ReturnType<typeof activityCardGetActivityGPTAnalysis>>
>
export type ActivityCardGetActivityGPTAnalysisQueryError = ErrorType<unknown>

export const useActivityCardGetActivityGPTAnalysis = <
  TData = Awaited<ReturnType<typeof activityCardGetActivityGPTAnalysis>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  activityId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityCardGetActivityGPTAnalysis>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityCardGetActivityGPTAnalysisQueryKey(studentId, activityId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityCardGetActivityGPTAnalysis>>> = ({ signal }) =>
    activityCardGetActivityGPTAnalysis(studentId, activityId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityCardGetActivityGPTAnalysis>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!(studentId && activityId), ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÌôúÎèôÏöîÏïΩ GPT ÏãúÏïà ÏÉùÏÑ±
 */
export const activityCardGenerateGPTAnalysis = (
  studentId: number,
  activityId: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ActivityCardGenerateGPTAnalysis200>(
    { url: `/api/activity-card/${studentId}/activity/${activityId}`, method: 'post' },
    options,
  )
}

export type ActivityCardGenerateGPTAnalysisMutationResult = NonNullable<
  Awaited<ReturnType<typeof activityCardGenerateGPTAnalysis>>
>

export type ActivityCardGenerateGPTAnalysisMutationError = ErrorType<unknown>

export const useActivityCardGenerateGPTAnalysis = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activityCardGenerateGPTAnalysis>>,
    TError,
    { studentId: number; activityId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activityCardGenerateGPTAnalysis>>,
    { studentId: number; activityId: number }
  > = (props) => {
    const { studentId, activityId } = props ?? {}

    return activityCardGenerateGPTAnalysis(studentId, activityId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof activityCardGenerateGPTAnalysis>>,
    TError,
    { studentId: number; activityId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèô Ï°∞Ìöå(ÌïôÏÉùÏö©)
 */
export const activityFindByStudent = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseActivityWithSubmittedDto[]>(
    { url: `/api/activities/by-student`, method: 'get', signal },
    options,
  )
}

export const getActivityFindByStudentQueryKey = () => [`/api/activities/by-student`]

export type ActivityFindByStudentQueryResult = NonNullable<Awaited<ReturnType<typeof activityFindByStudent>>>
export type ActivityFindByStudentQueryError = ErrorType<void>

export const useActivityFindByStudent = <
  TData = Awaited<ReturnType<typeof activityFindByStudent>>,
  TError = ErrorType<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof activityFindByStudent>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityFindByStudentQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityFindByStudent>>> = ({ signal }) =>
    activityFindByStudent(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityFindByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const activityFindByTeacher = (
  params: ActivityFindByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseActivityWithSubmittedDto[]>(
    { url: `/api/activities/by-teacher`, method: 'get', params, signal },
    options,
  )
}

export const getActivityFindByTeacherQueryKey = (params: ActivityFindByTeacherParams) => [
  `/api/activities/by-teacher`,
  ...(params ? [params] : []),
]

export type ActivityFindByTeacherQueryResult = NonNullable<Awaited<ReturnType<typeof activityFindByTeacher>>>
export type ActivityFindByTeacherQueryError = ErrorType<void>

export const useActivityFindByTeacher = <
  TData = Awaited<ReturnType<typeof activityFindByTeacher>>,
  TError = ErrorType<void>,
>(
  params: ActivityFindByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityFindByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityFindByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityFindByTeacher>>> = ({ signal }) =>
    activityFindByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityFindByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï°∞Ìöå(Í∑∏Î£π ÏïÑÏù¥ÎîîÎ°ú)
 */
export const activityFindByGroupId = (
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Activity[]>({ url: `/api/activities/by-group-id/${groupId}`, method: 'get', signal }, options)
}

export const getActivityFindByGroupIdQueryKey = (groupId: number) => [`/api/activities/by-group-id/${groupId}`]

export type ActivityFindByGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof activityFindByGroupId>>>
export type ActivityFindByGroupIdQueryError = ErrorType<void>

export const useActivityFindByGroupId = <
  TData = Awaited<ReturnType<typeof activityFindByGroupId>>,
  TError = ErrorType<void>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityFindByGroupId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityFindByGroupIdQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityFindByGroupId>>> = ({ signal }) =>
    activityFindByGroupId(groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityFindByGroupId>>, TError, TData>(queryKey, queryFn, {
    enabled: !!groupId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï°∞Ìöå(Í≥ºÎ™©Î™ÖÏúºÎ°ú)
 */
export const activityFindBySubject = (
  subject: string,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseActivityWithGroupDto[]>(
    { url: `/api/activities/by-Subject/${subject}`, method: 'get', signal },
    options,
  )
}

export const getActivityFindBySubjectQueryKey = (subject: string) => [`/api/activities/by-Subject/${subject}`]

export type ActivityFindBySubjectQueryResult = NonNullable<Awaited<ReturnType<typeof activityFindBySubject>>>
export type ActivityFindBySubjectQueryError = ErrorType<void>

export const useActivityFindBySubject = <
  TData = Awaited<ReturnType<typeof activityFindBySubject>>,
  TError = ErrorType<void>,
>(
  subject: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityFindBySubject>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityFindBySubjectQueryKey(subject)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityFindBySubject>>> = ({ signal }) =>
    activityFindBySubject(subject, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityFindBySubject>>, TError, TData>(queryKey, queryFn, {
    enabled: !!subject,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Îã®Í±¥ Ï°∞Ìöå
 */
export const activityFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Activity>({ url: `/api/activities/${id}`, method: 'get', signal }, options)
}

export const getActivityFindOneQueryKey = (id: number) => [`/api/activities/${id}`]

export type ActivityFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof activityFindOne>>>
export type ActivityFindOneQueryError = ErrorType<void>

export const useActivityFindOne = <TData = Awaited<ReturnType<typeof activityFindOne>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityFindOne>>> = ({ signal }) =>
    activityFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô ÏàòÏ†ï
 */
export const activityUpdate = (
  id: number,
  requestCreateActivityDto: RequestCreateActivityDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Activity>(
    {
      url: `/api/activities/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateActivityDto,
    },
    options,
  )
}

export type ActivityUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof activityUpdate>>>
export type ActivityUpdateMutationBody = RequestCreateActivityDto
export type ActivityUpdateMutationError = ErrorType<void>

export const useActivityUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activityUpdate>>,
    TError,
    { id: number; data: RequestCreateActivityDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activityUpdate>>,
    { id: number; data: RequestCreateActivityDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return activityUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof activityUpdate>>,
    TError,
    { id: number; data: RequestCreateActivityDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèô ÏÇ≠Ï†ú
 */
export const activityDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/activities/${id}`, method: 'delete' }, options)
}

export type ActivityDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof activityDelete>>>

export type ActivityDeleteMutationError = ErrorType<unknown>

export const useActivityDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof activityDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof activityDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return activityDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof activityDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌôúÎèô Ï†úÏ∂úÏûê Î™©Î°ù Ï°∞Ìöå
 */
export const activityFindActivitySubmitUsers = (
  id: number,
  params?: ActivityFindActivitySubmitUsersParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseActivitySubmitUserDto[]>(
    { url: `/api/activities/get-submit-users/${id}`, method: 'get', params, signal },
    options,
  )
}

export const getActivityFindActivitySubmitUsersQueryKey = (
  id: number,
  params?: ActivityFindActivitySubmitUsersParams,
) => [`/api/activities/get-submit-users/${id}`, ...(params ? [params] : [])]

export type ActivityFindActivitySubmitUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof activityFindActivitySubmitUsers>>
>
export type ActivityFindActivitySubmitUsersQueryError = ErrorType<unknown>

export const useActivityFindActivitySubmitUsers = <
  TData = Awaited<ReturnType<typeof activityFindActivitySubmitUsers>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  params?: ActivityFindActivitySubmitUsersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityFindActivitySubmitUsers>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityFindActivitySubmitUsersQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityFindActivitySubmitUsers>>> = ({ signal }) =>
    activityFindActivitySubmitUsers(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityFindActivitySubmitUsers>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï∂îÍ∞Ä
 */
export const activityCreate = (
  requestCreateActivityDto: RequestCreateActivityDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Activity>(
    {
      url: `/api/activities`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateActivityDto,
    },
    options,
  )
}

export type ActivityCreateMutationResult = NonNullable<Awaited<ReturnType<typeof activityCreate>>>
export type ActivityCreateMutationBody = RequestCreateActivityDto
export type ActivityCreateMutationError = ErrorType<void>

export const useActivityCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activityCreate>>,
    TError,
    { data: RequestCreateActivityDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof activityCreate>>, { data: RequestCreateActivityDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return activityCreate(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof activityCreate>>, TError, { data: RequestCreateActivityDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌôúÎèô Îã§Ïö¥Î°úÎìú
 */
export const activityDownloadSubmitters = (
  id: number,
  params?: ActivityDownloadSubmittersParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/activities/download/${id}`, method: 'get', params, responseType: 'blob', signal },
    options,
  )
}

export const getActivityDownloadSubmittersQueryKey = (id: number, params?: ActivityDownloadSubmittersParams) => [
  `/api/activities/download/${id}`,
  ...(params ? [params] : []),
]

export type ActivityDownloadSubmittersQueryResult = NonNullable<Awaited<ReturnType<typeof activityDownloadSubmitters>>>
export type ActivityDownloadSubmittersQueryError = ErrorType<unknown>

export const useActivityDownloadSubmitters = <
  TData = Awaited<ReturnType<typeof activityDownloadSubmitters>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  params?: ActivityDownloadSubmittersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityDownloadSubmitters>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityDownloadSubmittersQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityDownloadSubmitters>>> = ({ signal }) =>
    activityDownloadSubmitters(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityDownloadSubmitters>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï∞®Ïãú ÌôúÎèôIDÎ≥Ñ Ï°∞Ìöå
 */
export const activitySessionFindByActivityV3Id = (
  params: ActivitySessionFindByActivityV3IdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ActivitySession[]>({ url: `/api/activity-session`, method: 'get', params, signal }, options)
}

export const getActivitySessionFindByActivityV3IdQueryKey = (params: ActivitySessionFindByActivityV3IdParams) => [
  `/api/activity-session`,
  ...(params ? [params] : []),
]

export type ActivitySessionFindByActivityV3IdQueryResult = NonNullable<
  Awaited<ReturnType<typeof activitySessionFindByActivityV3Id>>
>
export type ActivitySessionFindByActivityV3IdQueryError = ErrorType<void>

export const useActivitySessionFindByActivityV3Id = <
  TData = Awaited<ReturnType<typeof activitySessionFindByActivityV3Id>>,
  TError = ErrorType<void>,
>(
  params: ActivitySessionFindByActivityV3IdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activitySessionFindByActivityV3Id>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivitySessionFindByActivityV3IdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activitySessionFindByActivityV3Id>>> = ({ signal }) =>
    activitySessionFindByActivityV3Id(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activitySessionFindByActivityV3Id>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï∞®Ïãú Ï∂îÍ∞Ä
 */
export const activitySessionCreate = (
  requestCreateActivitySessionDto: RequestCreateActivitySessionDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ActivitySession>(
    {
      url: `/api/activity-session`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateActivitySessionDto,
    },
    options,
  )
}

export type ActivitySessionCreateMutationResult = NonNullable<Awaited<ReturnType<typeof activitySessionCreate>>>
export type ActivitySessionCreateMutationBody = RequestCreateActivitySessionDto
export type ActivitySessionCreateMutationError = ErrorType<void>

export const useActivitySessionCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activitySessionCreate>>,
    TError,
    { data: RequestCreateActivitySessionDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activitySessionCreate>>,
    { data: RequestCreateActivitySessionDto }
  > = (props) => {
    const { data } = props ?? {}

    return activitySessionCreate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof activitySessionCreate>>,
    TError,
    { data: RequestCreateActivitySessionDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèô Ï∞®Ïãú Î¶¨Ïä§Ìä∏ Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const activitySessionFindByTeacher = (
  params?: ActivitySessionFindByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ActivitySessionWithCountDto[]>(
    { url: `/api/activity-session/teacher`, method: 'get', params, signal },
    options,
  )
}

export const getActivitySessionFindByTeacherQueryKey = (params?: ActivitySessionFindByTeacherParams) => [
  `/api/activity-session/teacher`,
  ...(params ? [params] : []),
]

export type ActivitySessionFindByTeacherQueryResult = NonNullable<
  Awaited<ReturnType<typeof activitySessionFindByTeacher>>
>
export type ActivitySessionFindByTeacherQueryError = ErrorType<void>

export const useActivitySessionFindByTeacher = <
  TData = Awaited<ReturnType<typeof activitySessionFindByTeacher>>,
  TError = ErrorType<void>,
>(
  params?: ActivitySessionFindByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activitySessionFindByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivitySessionFindByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activitySessionFindByTeacher>>> = ({ signal }) =>
    activitySessionFindByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activitySessionFindByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï∞®Ïãú Ï†úÏ∂úÏûê Î∞è Ï†úÏ∂úÎÇ¥Ïó≠ Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const activitySessionFindSubmitters = (
  params: ActivitySessionFindSubmittersParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentGroup[]>({ url: `/api/activity-session/submitters`, method: 'get', params, signal }, options)
}

export const getActivitySessionFindSubmittersQueryKey = (params: ActivitySessionFindSubmittersParams) => [
  `/api/activity-session/submitters`,
  ...(params ? [params] : []),
]

export type ActivitySessionFindSubmittersQueryResult = NonNullable<
  Awaited<ReturnType<typeof activitySessionFindSubmitters>>
>
export type ActivitySessionFindSubmittersQueryError = ErrorType<unknown>

export const useActivitySessionFindSubmitters = <
  TData = Awaited<ReturnType<typeof activitySessionFindSubmitters>>,
  TError = ErrorType<unknown>,
>(
  params: ActivitySessionFindSubmittersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activitySessionFindSubmitters>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivitySessionFindSubmittersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activitySessionFindSubmitters>>> = ({ signal }) =>
    activitySessionFindSubmitters(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activitySessionFindSubmitters>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï∞®Ïãú Îã®Í±¥ Ï°∞Ìöå(ÌïôÏÉùÏö©)
 */
export const activitySessionFindOneByStudent = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ActivitySession>({ url: `/api/activity-session/student/${id}`, method: 'get', signal }, options)
}

export const getActivitySessionFindOneByStudentQueryKey = (id: number) => [`/api/activity-session/student/${id}`]

export type ActivitySessionFindOneByStudentQueryResult = NonNullable<
  Awaited<ReturnType<typeof activitySessionFindOneByStudent>>
>
export type ActivitySessionFindOneByStudentQueryError = ErrorType<void>

export const useActivitySessionFindOneByStudent = <
  TData = Awaited<ReturnType<typeof activitySessionFindOneByStudent>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activitySessionFindOneByStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivitySessionFindOneByStudentQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activitySessionFindOneByStudent>>> = ({ signal }) =>
    activitySessionFindOneByStudent(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activitySessionFindOneByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï∞®Ïãú Îã®Í±¥ Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const activitySessionFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ActivitySession>({ url: `/api/activity-session/${id}`, method: 'get', signal }, options)
}

export const getActivitySessionFindOneQueryKey = (id: number) => [`/api/activity-session/${id}`]

export type ActivitySessionFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof activitySessionFindOne>>>
export type ActivitySessionFindOneQueryError = ErrorType<void>

export const useActivitySessionFindOne = <
  TData = Awaited<ReturnType<typeof activitySessionFindOne>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activitySessionFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivitySessionFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activitySessionFindOne>>> = ({ signal }) =>
    activitySessionFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activitySessionFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∞®Ïãú ÏàòÏ†ï
 */
export const activitySessionUpdate = (
  id: number,
  requestUpdateActivitySessionDto: RequestUpdateActivitySessionDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ActivitySession>(
    {
      url: `/api/activity-session/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateActivitySessionDto,
    },
    options,
  )
}

export type ActivitySessionUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof activitySessionUpdate>>>
export type ActivitySessionUpdateMutationBody = RequestUpdateActivitySessionDto
export type ActivitySessionUpdateMutationError = ErrorType<void>

export const useActivitySessionUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activitySessionUpdate>>,
    TError,
    { id: number; data: RequestUpdateActivitySessionDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activitySessionUpdate>>,
    { id: number; data: RequestUpdateActivitySessionDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return activitySessionUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof activitySessionUpdate>>,
    TError,
    { id: number; data: RequestUpdateActivitySessionDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∞®Ïãú ÏÇ≠Ï†ú
 */
export const activitySessionDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/activity-session/${id}`, method: 'delete' }, options)
}

export type ActivitySessionDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof activitySessionDelete>>>

export type ActivitySessionDeleteMutationError = ErrorType<unknown>

export const useActivitySessionDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof activitySessionDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof activitySessionDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return activitySessionDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof activitySessionDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï∞®Ïãú Îã§Ïö¥Î°úÎìú
 */
export const activitySessionDownloadSubmitters = (
  id: number,
  params: ActivitySessionDownloadSubmittersParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/activity-session/download/${id}`, method: 'get', params, responseType: 'blob', signal },
    options,
  )
}

export const getActivitySessionDownloadSubmittersQueryKey = (
  id: number,
  params: ActivitySessionDownloadSubmittersParams,
) => [`/api/activity-session/download/${id}`, ...(params ? [params] : [])]

export type ActivitySessionDownloadSubmittersQueryResult = NonNullable<
  Awaited<ReturnType<typeof activitySessionDownloadSubmitters>>
>
export type ActivitySessionDownloadSubmittersQueryError = ErrorType<unknown>

export const useActivitySessionDownloadSubmitters = <
  TData = Awaited<ReturnType<typeof activitySessionDownloadSubmitters>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  params: ActivitySessionDownloadSubmittersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activitySessionDownloadSubmitters>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivitySessionDownloadSubmittersQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activitySessionDownloadSubmitters>>> = ({ signal }) =>
    activitySessionDownloadSubmitters(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activitySessionDownloadSubmitters>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∞®Ïãú ÏàúÏÑú ÏàòÏ†ï
 */
export const activitySessionOrderUpdate = (
  requestUpdateActivitySessionOrderDto: RequestUpdateActivitySessionOrderDto[],
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ActivitySessionOrder[]>(
    {
      url: `/api/activity-session-order`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateActivitySessionOrderDto,
    },
    options,
  )
}

export type ActivitySessionOrderUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof activitySessionOrderUpdate>>
>
export type ActivitySessionOrderUpdateMutationBody = RequestUpdateActivitySessionOrderDto[]
export type ActivitySessionOrderUpdateMutationError = ErrorType<void>

export const useActivitySessionOrderUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activitySessionOrderUpdate>>,
    TError,
    { data: RequestUpdateActivitySessionOrderDto[] },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activitySessionOrderUpdate>>,
    { data: RequestUpdateActivitySessionOrderDto[] }
  > = (props) => {
    const { data } = props ?? {}

    return activitySessionOrderUpdate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof activitySessionOrderUpdate>>,
    TError,
    { data: RequestUpdateActivitySessionOrderDto[] },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèô Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const activityV3FindByTeacher = (
  params?: ActivityV3FindByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ActivityV3WithCountDto[]>({ url: `/api/activityv3/teacher`, method: 'get', params, signal }, options)
}

export const getActivityV3FindByTeacherQueryKey = (params?: ActivityV3FindByTeacherParams) => [
  `/api/activityv3/teacher`,
  ...(params ? [params] : []),
]

export type ActivityV3FindByTeacherQueryResult = NonNullable<Awaited<ReturnType<typeof activityV3FindByTeacher>>>
export type ActivityV3FindByTeacherQueryError = ErrorType<void>

export const useActivityV3FindByTeacher = <
  TData = Awaited<ReturnType<typeof activityV3FindByTeacher>>,
  TError = ErrorType<void>,
>(
  params?: ActivityV3FindByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityV3FindByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityV3FindByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityV3FindByTeacher>>> = ({ signal }) =>
    activityV3FindByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityV3FindByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï°∞Ìöå(ÌïôÏÉùÏö©)
 */
export const activityV3FindByStudent = (
  params?: ActivityV3FindByStudentParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ActivityV3[]>({ url: `/api/activityv3/student`, method: 'get', params, signal }, options)
}

export const getActivityV3FindByStudentQueryKey = (params?: ActivityV3FindByStudentParams) => [
  `/api/activityv3/student`,
  ...(params ? [params] : []),
]

export type ActivityV3FindByStudentQueryResult = NonNullable<Awaited<ReturnType<typeof activityV3FindByStudent>>>
export type ActivityV3FindByStudentQueryError = ErrorType<void>

export const useActivityV3FindByStudent = <
  TData = Awaited<ReturnType<typeof activityV3FindByStudent>>,
  TError = ErrorType<void>,
>(
  params?: ActivityV3FindByStudentParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityV3FindByStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityV3FindByStudentQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityV3FindByStudent>>> = ({ signal }) =>
    activityV3FindByStudent(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityV3FindByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïó¨Îü¨ Í∑∏Î£πIDÎ°ú ÌôúÎèô Ï†úÏ∂úÏûê Î™©Î°ù Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const activityV3FindByGroupIds = (
  activityv3Id: number,
  params: ActivityV3FindByGroupIdsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentGroup[]>(
    { url: `/api/activityv3/by-groups/${activityv3Id}`, method: 'get', params, signal },
    options,
  )
}

export const getActivityV3FindByGroupIdsQueryKey = (activityv3Id: number, params: ActivityV3FindByGroupIdsParams) => [
  `/api/activityv3/by-groups/${activityv3Id}`,
  ...(params ? [params] : []),
]

export type ActivityV3FindByGroupIdsQueryResult = NonNullable<Awaited<ReturnType<typeof activityV3FindByGroupIds>>>
export type ActivityV3FindByGroupIdsQueryError = ErrorType<unknown>

export const useActivityV3FindByGroupIds = <
  TData = Awaited<ReturnType<typeof activityV3FindByGroupIds>>,
  TError = ErrorType<unknown>,
>(
  activityv3Id: number,
  params: ActivityV3FindByGroupIdsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityV3FindByGroupIds>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityV3FindByGroupIdsQueryKey(activityv3Id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityV3FindByGroupIds>>> = ({ signal }) =>
    activityV3FindByGroupIds(activityv3Id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityV3FindByGroupIds>>, TError, TData>(queryKey, queryFn, {
    enabled: !!activityv3Id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary GPT ÌôúÎèôÍ∏∞Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
 */
export const activityV3GetGPTReport = (getGPTReportDto: GetGPTReportDto, options?: SecondParameter<typeof mutator>) => {
  return mutator<unknown>(
    {
      url: `/api/activityv3/gpt`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: getGPTReportDto,
    },
    options,
  )
}

export type ActivityV3GetGPTReportMutationResult = NonNullable<Awaited<ReturnType<typeof activityV3GetGPTReport>>>
export type ActivityV3GetGPTReportMutationBody = GetGPTReportDto
export type ActivityV3GetGPTReportMutationError = ErrorType<void>

export const useActivityV3GetGPTReport = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activityV3GetGPTReport>>,
    TError,
    { data: GetGPTReportDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof activityV3GetGPTReport>>, { data: GetGPTReportDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return activityV3GetGPTReport(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof activityV3GetGPTReport>>, TError, { data: GetGPTReportDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌïôÏÉùÏπ¥Îìú ÌôúÎèô Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const activityV3FindStudentCard = (
  params: ActivityV3FindStudentCardParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ActivityV3[]>({ url: `/api/activityv3/student-card`, method: 'get', params, signal }, options)
}

export const getActivityV3FindStudentCardQueryKey = (params: ActivityV3FindStudentCardParams) => [
  `/api/activityv3/student-card`,
  ...(params ? [params] : []),
]

export type ActivityV3FindStudentCardQueryResult = NonNullable<Awaited<ReturnType<typeof activityV3FindStudentCard>>>
export type ActivityV3FindStudentCardQueryError = ErrorType<void>

export const useActivityV3FindStudentCard = <
  TData = Awaited<ReturnType<typeof activityV3FindStudentCard>>,
  TError = ErrorType<void>,
>(
  params: ActivityV3FindStudentCardParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityV3FindStudentCard>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityV3FindStudentCardQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityV3FindStudentCard>>> = ({ signal }) =>
    activityV3FindStudentCard(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityV3FindStudentCard>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Ï†úÎ™© Ï°∞Ìöå (Î©îÏãúÏßÄÏö©)
 */
export const activityV3FindTitleByIds = (
  params?: ActivityV3FindTitleByIdsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ActivityV3[]>({ url: `/api/activityv3/title`, method: 'get', params, signal }, options)
}

export const getActivityV3FindTitleByIdsQueryKey = (params?: ActivityV3FindTitleByIdsParams) => [
  `/api/activityv3/title`,
  ...(params ? [params] : []),
]

export type ActivityV3FindTitleByIdsQueryResult = NonNullable<Awaited<ReturnType<typeof activityV3FindTitleByIds>>>
export type ActivityV3FindTitleByIdsQueryError = ErrorType<void>

export const useActivityV3FindTitleByIds = <
  TData = Awaited<ReturnType<typeof activityV3FindTitleByIds>>,
  TError = ErrorType<void>,
>(
  params?: ActivityV3FindTitleByIdsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityV3FindTitleByIds>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityV3FindTitleByIdsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityV3FindTitleByIds>>> = ({ signal }) =>
    activityV3FindTitleByIds(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityV3FindTitleByIds>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô Îã®Í±¥ Ï°∞Ìöå
 */
export const activityV3FindOne = (
  id: number,
  params?: ActivityV3FindOneParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ActivityV3>({ url: `/api/activityv3/${id}`, method: 'get', params, signal }, options)
}

export const getActivityV3FindOneQueryKey = (id: number, params?: ActivityV3FindOneParams) => [
  `/api/activityv3/${id}`,
  ...(params ? [params] : []),
]

export type ActivityV3FindOneQueryResult = NonNullable<Awaited<ReturnType<typeof activityV3FindOne>>>
export type ActivityV3FindOneQueryError = ErrorType<void>

export const useActivityV3FindOne = <TData = Awaited<ReturnType<typeof activityV3FindOne>>, TError = ErrorType<void>>(
  id: number,
  params?: ActivityV3FindOneParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof activityV3FindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getActivityV3FindOneQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof activityV3FindOne>>> = ({ signal }) =>
    activityV3FindOne(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof activityV3FindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèô ÏàòÏ†ï
 */
export const activityV3Update = (
  id: number,
  requestUpdateActivityV3Dto: RequestUpdateActivityV3Dto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ActivityV3>(
    {
      url: `/api/activityv3/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateActivityV3Dto,
    },
    options,
  )
}

export type ActivityV3UpdateMutationResult = NonNullable<Awaited<ReturnType<typeof activityV3Update>>>
export type ActivityV3UpdateMutationBody = RequestUpdateActivityV3Dto
export type ActivityV3UpdateMutationError = ErrorType<void>

export const useActivityV3Update = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activityV3Update>>,
    TError,
    { id: number; data: RequestUpdateActivityV3Dto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activityV3Update>>,
    { id: number; data: RequestUpdateActivityV3Dto }
  > = (props) => {
    const { id, data } = props ?? {}

    return activityV3Update(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof activityV3Update>>,
    TError,
    { id: number; data: RequestUpdateActivityV3Dto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèô ÏÇ≠Ï†ú
 */
export const activityV3Delete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/activityv3/${id}`, method: 'delete' }, options)
}

export type ActivityV3DeleteMutationResult = NonNullable<Awaited<ReturnType<typeof activityV3Delete>>>

export type ActivityV3DeleteMutationError = ErrorType<unknown>

export const useActivityV3Delete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof activityV3Delete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof activityV3Delete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return activityV3Delete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof activityV3Delete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌôúÎèô Ï∂îÍ∞Ä
 */
export const activityV3Create = (
  requestCreateActivityV3Dto: RequestCreateActivityV3Dto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ActivityV3>(
    {
      url: `/api/activityv3`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateActivityV3Dto,
    },
    options,
  )
}

export type ActivityV3CreateMutationResult = NonNullable<Awaited<ReturnType<typeof activityV3Create>>>
export type ActivityV3CreateMutationBody = RequestCreateActivityV3Dto
export type ActivityV3CreateMutationError = ErrorType<void>

export const useActivityV3Create = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activityV3Create>>,
    TError,
    { data: RequestCreateActivityV3Dto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activityV3Create>>,
    { data: RequestCreateActivityV3Dto }
  > = (props) => {
    const { data } = props ?? {}

    return activityV3Create(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof activityV3Create>>,
    TError,
    { data: RequestCreateActivityV3Dto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉù ÌôúÎèô Î≥¥Í≥†ÏÑú ÏàòÏ†ï
 */
export const activityV3UpdateStudentText = (
  id: number,
  activityV3UpdateStudentTextBody: ActivityV3UpdateStudentTextBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ActivityV3>(
    {
      url: `/api/activityv3/${id}/student-text`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: activityV3UpdateStudentTextBody,
    },
    options,
  )
}

export type ActivityV3UpdateStudentTextMutationResult = NonNullable<
  Awaited<ReturnType<typeof activityV3UpdateStudentText>>
>
export type ActivityV3UpdateStudentTextMutationBody = ActivityV3UpdateStudentTextBody
export type ActivityV3UpdateStudentTextMutationError = ErrorType<void>

export const useActivityV3UpdateStudentText = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof activityV3UpdateStudentText>>,
    TError,
    { id: number; data: ActivityV3UpdateStudentTextBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof activityV3UpdateStudentText>>,
    { id: number; data: ActivityV3UpdateStudentTextBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return activityV3UpdateStudentText(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof activityV3UpdateStudentText>>,
    TError,
    { id: number; data: ActivityV3UpdateStudentTextBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑúÎπÑÏä§ Í≥µÏßÄÏÇ¨Ìï≠ Ï∂îÍ∞Ä (Í¥ÄÎ¶¨ÏûêÏö©)
 */
export const announcementAddAnnouncement = (
  requestCreateAnnouncementDto: RequestCreateAnnouncementDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseAnnouncementDto>(
    {
      url: `/api/announcements`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateAnnouncementDto,
    },
    options,
  )
}

export type AnnouncementAddAnnouncementMutationResult = NonNullable<
  Awaited<ReturnType<typeof announcementAddAnnouncement>>
>
export type AnnouncementAddAnnouncementMutationBody = RequestCreateAnnouncementDto
export type AnnouncementAddAnnouncementMutationError = ErrorType<unknown>

export const useAnnouncementAddAnnouncement = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof announcementAddAnnouncement>>,
    TError,
    { data: RequestCreateAnnouncementDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof announcementAddAnnouncement>>,
    { data: RequestCreateAnnouncementDto }
  > = (props) => {
    const { data } = props ?? {}

    return announcementAddAnnouncement(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof announcementAddAnnouncement>>,
    TError,
    { data: RequestCreateAnnouncementDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï†ÑÏ≤¥/ÌÉÄÏûÖÎ≥Ñ ÏÑúÎπÑÏä§ Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå
 */
export const announcementGetAllAnnouncements = (
  params: AnnouncementGetAllAnnouncementsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedAnnouncementDto>(
    { url: `/api/announcements`, method: 'get', params, signal },
    options,
  )
}

export const getAnnouncementGetAllAnnouncementsQueryKey = (params: AnnouncementGetAllAnnouncementsParams) => [
  `/api/announcements`,
  ...(params ? [params] : []),
]

export type AnnouncementGetAllAnnouncementsQueryResult = NonNullable<
  Awaited<ReturnType<typeof announcementGetAllAnnouncements>>
>
export type AnnouncementGetAllAnnouncementsQueryError = ErrorType<unknown>

export const useAnnouncementGetAllAnnouncements = <
  TData = Awaited<ReturnType<typeof announcementGetAllAnnouncements>>,
  TError = ErrorType<unknown>,
>(
  params: AnnouncementGetAllAnnouncementsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof announcementGetAllAnnouncements>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAnnouncementGetAllAnnouncementsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof announcementGetAllAnnouncements>>> = ({ signal }) =>
    announcementGetAllAnnouncements(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof announcementGetAllAnnouncements>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï†ÑÏ≤¥/ÌÉÄÏûÖÎ≥Ñ Í≥µÏßÄÏÇ¨Ìï≠ Ï°∞Ìöå (Í¥ÄÎ¶¨ÏûêÏö©)
 */
export const announcementGetAllAnnouncementsForAdmin = (
  params: AnnouncementGetAllAnnouncementsForAdminParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedAnnouncementDto>(
    { url: `/api/announcements/all`, method: 'get', params, signal },
    options,
  )
}

export const getAnnouncementGetAllAnnouncementsForAdminQueryKey = (
  params: AnnouncementGetAllAnnouncementsForAdminParams,
) => [`/api/announcements/all`, ...(params ? [params] : [])]

export type AnnouncementGetAllAnnouncementsForAdminQueryResult = NonNullable<
  Awaited<ReturnType<typeof announcementGetAllAnnouncementsForAdmin>>
>
export type AnnouncementGetAllAnnouncementsForAdminQueryError = ErrorType<unknown>

export const useAnnouncementGetAllAnnouncementsForAdmin = <
  TData = Awaited<ReturnType<typeof announcementGetAllAnnouncementsForAdmin>>,
  TError = ErrorType<unknown>,
>(
  params: AnnouncementGetAllAnnouncementsForAdminParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof announcementGetAllAnnouncementsForAdmin>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAnnouncementGetAllAnnouncementsForAdminQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof announcementGetAllAnnouncementsForAdmin>>> = ({ signal }) =>
    announcementGetAllAnnouncementsForAdmin(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof announcementGetAllAnnouncementsForAdmin>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÏÑ±ÌôîÎêú ÏÑúÎπÑÏä§ Í≥µÏßÄÏÇ¨Ìï≠ Ï†ÑÏ≤¥ Ï°∞Ìöå
 */
export const announcementGetActiveAnnouncements = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseAnnouncementDto[]>({ url: `/api/announcements/active`, method: 'get', signal }, options)
}

export const getAnnouncementGetActiveAnnouncementsQueryKey = () => [`/api/announcements/active`]

export type AnnouncementGetActiveAnnouncementsQueryResult = NonNullable<
  Awaited<ReturnType<typeof announcementGetActiveAnnouncements>>
>
export type AnnouncementGetActiveAnnouncementsQueryError = ErrorType<unknown>

export const useAnnouncementGetActiveAnnouncements = <
  TData = Awaited<ReturnType<typeof announcementGetActiveAnnouncements>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof announcementGetActiveAnnouncements>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAnnouncementGetActiveAnnouncementsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof announcementGetActiveAnnouncements>>> = ({ signal }) =>
    announcementGetActiveAnnouncements(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof announcementGetActiveAnnouncements>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary IDÎ°ú ÏÑúÎπÑÏä§ Í≥µÏßÄÏÇ¨Ìï≠ Îã®Ïùº Ï°∞Ìöå
 */
export const announcementGetAnnouncementById = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseAnnouncementDto>({ url: `/api/announcements/${id}`, method: 'get', signal }, options)
}

export const getAnnouncementGetAnnouncementByIdQueryKey = (id: number) => [`/api/announcements/${id}`]

export type AnnouncementGetAnnouncementByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof announcementGetAnnouncementById>>
>
export type AnnouncementGetAnnouncementByIdQueryError = ErrorType<unknown>

export const useAnnouncementGetAnnouncementById = <
  TData = Awaited<ReturnType<typeof announcementGetAnnouncementById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof announcementGetAnnouncementById>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAnnouncementGetAnnouncementByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof announcementGetAnnouncementById>>> = ({ signal }) =>
    announcementGetAnnouncementById(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof announcementGetAnnouncementById>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑúÎπÑÏä§ Í≥µÏßÄÏÇ¨Ìï≠ ÏÇ≠Ï†ú (Í¥ÄÎ¶¨ÏûêÏö©)
 */
export const announcementDeleteAnnouncement = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<ResponseAnnouncementDto>({ url: `/api/announcements/${id}`, method: 'delete' }, options)
}

export type AnnouncementDeleteAnnouncementMutationResult = NonNullable<
  Awaited<ReturnType<typeof announcementDeleteAnnouncement>>
>

export type AnnouncementDeleteAnnouncementMutationError = ErrorType<unknown>

export const useAnnouncementDeleteAnnouncement = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof announcementDeleteAnnouncement>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof announcementDeleteAnnouncement>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return announcementDeleteAnnouncement(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof announcementDeleteAnnouncement>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏÑúÎπÑÏä§ Í≥µÏßÄÏÇ¨Ìï≠ ÏàòÏ†ï (Í¥ÄÎ¶¨ÏûêÏö©)
 */
export const announcementUpdateAnnouncement = (
  id: number,
  requestUpdateAnnouncementDto: RequestUpdateAnnouncementDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseAnnouncementDto>(
    {
      url: `/api/announcements/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateAnnouncementDto,
    },
    options,
  )
}

export type AnnouncementUpdateAnnouncementMutationResult = NonNullable<
  Awaited<ReturnType<typeof announcementUpdateAnnouncement>>
>
export type AnnouncementUpdateAnnouncementMutationBody = RequestUpdateAnnouncementDto
export type AnnouncementUpdateAnnouncementMutationError = ErrorType<unknown>

export const useAnnouncementUpdateAnnouncement = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof announcementUpdateAnnouncement>>,
    TError,
    { id: number; data: RequestUpdateAnnouncementDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof announcementUpdateAnnouncement>>,
    { id: number; data: RequestUpdateAnnouncementDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return announcementUpdateAnnouncement(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof announcementUpdateAnnouncement>>,
    TError,
    { id: number; data: RequestUpdateAnnouncementDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÏÑùÎ∂Ä Ï∂úÍ≤∞ Ï°∞Ìöå
 */
export const attendanceFindAttendanceAbsent = (
  params: AttendanceFindAttendanceAbsentParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Attendance[]>({ url: `/api/attendance/absent`, method: 'get', params, signal }, options)
}

export const getAttendanceFindAttendanceAbsentQueryKey = (params: AttendanceFindAttendanceAbsentParams) => [
  `/api/attendance/absent`,
  ...(params ? [params] : []),
]

export type AttendanceFindAttendanceAbsentQueryResult = NonNullable<
  Awaited<ReturnType<typeof attendanceFindAttendanceAbsent>>
>
export type AttendanceFindAttendanceAbsentQueryError = ErrorType<unknown>

export const useAttendanceFindAttendanceAbsent = <
  TData = Awaited<ReturnType<typeof attendanceFindAttendanceAbsent>>,
  TError = ErrorType<unknown>,
>(
  params: AttendanceFindAttendanceAbsentParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof attendanceFindAttendanceAbsent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAttendanceFindAttendanceAbsentQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof attendanceFindAttendanceAbsent>>> = ({ signal }) =>
    attendanceFindAttendanceAbsent(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof attendanceFindAttendanceAbsent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∂úÏÑùÎ∂Ä Ï∂úÍ≤∞ Îì±Î°ù(ÎßàÏßÄÎßâ Îì±Î°ùÎêúÍ≤å Ïú†Ìö®)
 */
export const attendanceCreateAttendanceAbsent = (
  requestCreateAttendanceAbsentDto: RequestCreateAttendanceAbsentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/attendance/absent`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateAttendanceAbsentDto,
    },
    options,
  )
}

export type AttendanceCreateAttendanceAbsentMutationResult = NonNullable<
  Awaited<ReturnType<typeof attendanceCreateAttendanceAbsent>>
>
export type AttendanceCreateAttendanceAbsentMutationBody = RequestCreateAttendanceAbsentDto
export type AttendanceCreateAttendanceAbsentMutationError = ErrorType<unknown>

export const useAttendanceCreateAttendanceAbsent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof attendanceCreateAttendanceAbsent>>,
    TError,
    { data: RequestCreateAttendanceAbsentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof attendanceCreateAttendanceAbsent>>,
    { data: RequestCreateAttendanceAbsentDto }
  > = (props) => {
    const { data } = props ?? {}

    return attendanceCreateAttendanceAbsent(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof attendanceCreateAttendanceAbsent>>,
    TError,
    { data: RequestCreateAttendanceAbsentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÏÑùÎ∂Ä ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú(ÏÑ†ÏÉùÎãòÏö©)
 */
export const attendanceDownloadAbsents = (
  params: AttendanceDownloadAbsentsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/attendance/download`, method: 'get', params, responseType: 'blob', signal },
    options,
  )
}

export const getAttendanceDownloadAbsentsQueryKey = (params: AttendanceDownloadAbsentsParams) => [
  `/api/attendance/download`,
  ...(params ? [params] : []),
]

export type AttendanceDownloadAbsentsQueryResult = NonNullable<Awaited<ReturnType<typeof attendanceDownloadAbsents>>>
export type AttendanceDownloadAbsentsQueryError = ErrorType<unknown>

export const useAttendanceDownloadAbsents = <
  TData = Awaited<ReturnType<typeof attendanceDownloadAbsents>>,
  TError = ErrorType<unknown>,
>(
  params: AttendanceDownloadAbsentsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof attendanceDownloadAbsents>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAttendanceDownloadAbsentsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof attendanceDownloadAbsents>>> = ({ signal }) =>
    attendanceDownloadAbsents(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof attendanceDownloadAbsents>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∂úÏÑùÏ≤¥ÌÅ¨ ÏôÑÎ£å
 */
export const attendanceAttendanceCheck = (
  requestUpsertAttendanceCheckDto: RequestUpsertAttendanceCheckDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<LectureTeacherAttendance>(
    {
      url: `/api/attendance/attendance-check`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpsertAttendanceCheckDto,
    },
    options,
  )
}

export type AttendanceAttendanceCheckMutationResult = NonNullable<Awaited<ReturnType<typeof attendanceAttendanceCheck>>>
export type AttendanceAttendanceCheckMutationBody = RequestUpsertAttendanceCheckDto
export type AttendanceAttendanceCheckMutationError = ErrorType<void>

export const useAttendanceAttendanceCheck = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof attendanceAttendanceCheck>>,
    TError,
    { data: RequestUpsertAttendanceCheckDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof attendanceAttendanceCheck>>,
    { data: RequestUpsertAttendanceCheckDto }
  > = (props) => {
    const { data } = props ?? {}

    return attendanceAttendanceCheck(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof attendanceAttendanceCheck>>,
    TError,
    { data: RequestUpsertAttendanceCheckDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∂úÏÑùÏ≤¥ÌÅ¨ ÌôïÏù∏
 */
export const attendanceGetAttendanceCheck = (
  params: AttendanceGetAttendanceCheckParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<LectureTeacherAttendance>(
    { url: `/api/attendance/attendance-check`, method: 'get', params, signal },
    options,
  )
}

export const getAttendanceGetAttendanceCheckQueryKey = (params: AttendanceGetAttendanceCheckParams) => [
  `/api/attendance/attendance-check`,
  ...(params ? [params] : []),
]

export type AttendanceGetAttendanceCheckQueryResult = NonNullable<
  Awaited<ReturnType<typeof attendanceGetAttendanceCheck>>
>
export type AttendanceGetAttendanceCheckQueryError = ErrorType<void>

export const useAttendanceGetAttendanceCheck = <
  TData = Awaited<ReturnType<typeof attendanceGetAttendanceCheck>>,
  TError = ErrorType<void>,
>(
  params: AttendanceGetAttendanceCheckParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof attendanceGetAttendanceCheck>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getAttendanceGetAttendanceCheckQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof attendanceGetAttendanceCheck>>> = ({ signal }) =>
    attendanceGetAttendanceCheck(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof attendanceGetAttendanceCheck>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î∏îÎ°ùÏ≤¥Ïù∏ ÏßÄÍ∞ëÏÉùÏÑ±
 */
export const blockChainCreateWallet = (options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/block-chain/create-wallet`, method: 'post' }, options)
}

export type BlockChainCreateWalletMutationResult = NonNullable<Awaited<ReturnType<typeof blockChainCreateWallet>>>

export type BlockChainCreateWalletMutationError = ErrorType<unknown>

export const useBlockChainCreateWallet = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof blockChainCreateWallet>>, TError, TVariables, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof blockChainCreateWallet>>, TVariables> = () => {
    return blockChainCreateWallet(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof blockChainCreateWallet>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Î∏îÎ°ùÏ≤¥Ïù∏ ÏßÄÍ∞ëÏ°∞Ìöå
 */
export const blockChainGetWallet = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseBlockChainStatusDto>({ url: `/api/block-chain/wallet`, method: 'get', signal }, options)
}

export const getBlockChainGetWalletQueryKey = () => [`/api/block-chain/wallet`]

export type BlockChainGetWalletQueryResult = NonNullable<Awaited<ReturnType<typeof blockChainGetWallet>>>
export type BlockChainGetWalletQueryError = ErrorType<unknown>

export const useBlockChainGetWallet = <
  TData = Awaited<ReturnType<typeof blockChainGetWallet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof blockChainGetWallet>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getBlockChainGetWalletQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof blockChainGetWallet>>> = ({ signal }) =>
    blockChainGetWallet(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof blockChainGetWallet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î∏îÎ°ùÏ≤¥Ïù∏ Î¨∏ÏÑúÌï® ÏÉùÏÑ±
 */
export const blockChainCreateContract = (options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/block-chain/create-contract`, method: 'post' }, options)
}

export type BlockChainCreateContractMutationResult = NonNullable<Awaited<ReturnType<typeof blockChainCreateContract>>>

export type BlockChainCreateContractMutationError = ErrorType<unknown>

export const useBlockChainCreateContract = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof blockChainCreateContract>>, TError, TVariables, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof blockChainCreateContract>>, TVariables> = () => {
    return blockChainCreateContract(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof blockChainCreateContract>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Î∏îÎ°ùÏ≤¥Ïù∏ Î¨∏ÏÑúÌï®(Ïª®Ìä∏Î†âÌä∏) Ï°∞Ìöå
 */
export const blockChainGetContract = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseBlockChainStatusDto>({ url: `/api/block-chain/contract`, method: 'get', signal }, options)
}

export const getBlockChainGetContractQueryKey = () => [`/api/block-chain/contract`]

export type BlockChainGetContractQueryResult = NonNullable<Awaited<ReturnType<typeof blockChainGetContract>>>
export type BlockChainGetContractQueryError = ErrorType<unknown>

export const useBlockChainGetContract = <
  TData = Awaited<ReturnType<typeof blockChainGetContract>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof blockChainGetContract>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getBlockChainGetContractQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof blockChainGetContract>>> = ({ signal }) =>
    blockChainGetContract(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof blockChainGetContract>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î∏îÎ°ùÏ≤¥Ïù∏ Request Ï°∞Ìöå Î∞è result ÏóÖÎç∞Ïù¥Ìä∏
 */
export const blockChainRequestCheck = (
  params: BlockChainRequestCheckParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseBlockChainStatusDto>(
    { url: `/api/block-chain/request`, method: 'get', params, signal },
    options,
  )
}

export const getBlockChainRequestCheckQueryKey = (params: BlockChainRequestCheckParams) => [
  `/api/block-chain/request`,
  ...(params ? [params] : []),
]

export type BlockChainRequestCheckQueryResult = NonNullable<Awaited<ReturnType<typeof blockChainRequestCheck>>>
export type BlockChainRequestCheckQueryError = ErrorType<unknown>

export const useBlockChainRequestCheck = <
  TData = Awaited<ReturnType<typeof blockChainRequestCheck>>,
  TError = ErrorType<unknown>,
>(
  params: BlockChainRequestCheckParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof blockChainRequestCheck>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getBlockChainRequestCheckQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof blockChainRequestCheck>>> = ({ signal }) =>
    blockChainRequestCheck(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof blockChainRequestCheck>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î¨∏ÏÑúÎì±Î°ùÏÉÅÌÉú Ï°∞Ìöå
 */
export const blockChainGetDocumentStatus = (
  params: BlockChainGetDocumentStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseBlockChainStatusDto>(
    { url: `/api/block-chain/document-status`, method: 'get', params, signal },
    options,
  )
}

export const getBlockChainGetDocumentStatusQueryKey = (params: BlockChainGetDocumentStatusParams) => [
  `/api/block-chain/document-status`,
  ...(params ? [params] : []),
]

export type BlockChainGetDocumentStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof blockChainGetDocumentStatus>>
>
export type BlockChainGetDocumentStatusQueryError = ErrorType<unknown>

export const useBlockChainGetDocumentStatus = <
  TData = Awaited<ReturnType<typeof blockChainGetDocumentStatus>>,
  TError = ErrorType<unknown>,
>(
  params: BlockChainGetDocumentStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof blockChainGetDocumentStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getBlockChainGetDocumentStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof blockChainGetDocumentStatus>>> = ({ signal }) =>
    blockChainGetDocumentStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof blockChainGetDocumentStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const blockChainCallBack = (options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/block-chain/call-back`, method: 'post' }, options)
}

export type BlockChainCallBackMutationResult = NonNullable<Awaited<ReturnType<typeof blockChainCallBack>>>

export type BlockChainCallBackMutationError = ErrorType<unknown>

export const useBlockChainCallBack = <TError = ErrorType<unknown>, TVariables = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof blockChainCallBack>>, TError, TVariables, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof blockChainCallBack>>, TVariables> = () => {
    return blockChainCallBack(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof blockChainCallBack>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌïôÍ∏â Í≤åÏãúÌåê Î™©Î°ù Ï°∞Ìöå
 */
export const boardFindAll = (
  params: BoardFindAllParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedBoardDto>({ url: `/api/boards`, method: 'get', params, signal }, options)
}

export const getBoardFindAllQueryKey = (params: BoardFindAllParams) => [`/api/boards`, ...(params ? [params] : [])]

export type BoardFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof boardFindAll>>>
export type BoardFindAllQueryError = ErrorType<unknown>

export const useBoardFindAll = <TData = Awaited<ReturnType<typeof boardFindAll>>, TError = ErrorType<unknown>>(
  params: BoardFindAllParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof boardFindAll>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getBoardFindAllQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof boardFindAll>>> = ({ signal }) =>
    boardFindAll(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof boardFindAll>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍ∏â Í≤åÏãúÌåê Í∏Ä ÏÉùÏÑ±
 */
export const boardCreate = (
  requestCreateBoardDto: RequestCreateBoardDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Board>(
    {
      url: `/api/boards`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateBoardDto,
    },
    options,
  )
}

export type BoardCreateMutationResult = NonNullable<Awaited<ReturnType<typeof boardCreate>>>
export type BoardCreateMutationBody = RequestCreateBoardDto
export type BoardCreateMutationError = ErrorType<unknown>

export const useBoardCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof boardCreate>>,
    TError,
    { data: RequestCreateBoardDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof boardCreate>>, { data: RequestCreateBoardDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return boardCreate(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof boardCreate>>, TError, { data: RequestCreateBoardDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌïôÍ∏â Í≤åÏãúÌåê Ï†úÎ™© Ï°∞Ìöå (Î©îÏãúÏßÄÏö©)
 */
export const boardFindTitleByIds = (
  params?: BoardFindTitleByIdsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Board[]>({ url: `/api/boards/title`, method: 'get', params, signal }, options)
}

export const getBoardFindTitleByIdsQueryKey = (params?: BoardFindTitleByIdsParams) => [
  `/api/boards/title`,
  ...(params ? [params] : []),
]

export type BoardFindTitleByIdsQueryResult = NonNullable<Awaited<ReturnType<typeof boardFindTitleByIds>>>
export type BoardFindTitleByIdsQueryError = ErrorType<void>

export const useBoardFindTitleByIds = <
  TData = Awaited<ReturnType<typeof boardFindTitleByIds>>,
  TError = ErrorType<void>,
>(
  params?: BoardFindTitleByIdsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof boardFindTitleByIds>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getBoardFindTitleByIdsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof boardFindTitleByIds>>> = ({ signal }) =>
    boardFindTitleByIds(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof boardFindTitleByIds>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍ∏â Í≤åÏãúÌåê Îã®Í±¥ Ï°∞Ìöå
 */
export const boardFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Board>({ url: `/api/boards/${id}`, method: 'get', signal }, options)
}

export const getBoardFindOneQueryKey = (id: number) => [`/api/boards/${id}`]

export type BoardFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof boardFindOne>>>
export type BoardFindOneQueryError = ErrorType<unknown>

export const useBoardFindOne = <TData = Awaited<ReturnType<typeof boardFindOne>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof boardFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getBoardFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof boardFindOne>>> = ({ signal }) =>
    boardFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof boardFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍ∏â Í≤åÏãúÌåê Í∏Ä ÏàòÏ†ï
 */
export const boardUpdate = (
  id: number,
  requestUpdateBoardDto: RequestUpdateBoardDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/boards/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateBoardDto,
    },
    options,
  )
}

export type BoardUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof boardUpdate>>>
export type BoardUpdateMutationBody = RequestUpdateBoardDto
export type BoardUpdateMutationError = ErrorType<void>

export const useBoardUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof boardUpdate>>,
    TError,
    { id: number; data: RequestUpdateBoardDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof boardUpdate>>,
    { id: number; data: RequestUpdateBoardDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return boardUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof boardUpdate>>,
    TError,
    { id: number; data: RequestUpdateBoardDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÍ∏â Í≤åÏãúÌåê Í∏Ä ÏÇ≠Ï†ú
 */
export const boardDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/boards/${id}`, method: 'delete' }, options)
}

export type BoardDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof boardDelete>>>

export type BoardDeleteMutationError = ErrorType<unknown>

export const useBoardDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof boardDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof boardDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return boardDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof boardDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Í∏âÏãùÌëú Î™©Î°ù
 */
export const canteenFindByYearMonth = (
  params: CanteenFindByYearMonthParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Canteen[]>({ url: `/api/canteens`, method: 'get', params, signal }, options)
}

export const getCanteenFindByYearMonthQueryKey = (params: CanteenFindByYearMonthParams) => [
  `/api/canteens`,
  ...(params ? [params] : []),
]

export type CanteenFindByYearMonthQueryResult = NonNullable<Awaited<ReturnType<typeof canteenFindByYearMonth>>>
export type CanteenFindByYearMonthQueryError = ErrorType<unknown>

export const useCanteenFindByYearMonth = <
  TData = Awaited<ReturnType<typeof canteenFindByYearMonth>>,
  TError = ErrorType<unknown>,
>(
  params: CanteenFindByYearMonthParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof canteenFindByYearMonth>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCanteenFindByYearMonthQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof canteenFindByYearMonth>>> = ({ signal }) =>
    canteenFindByYearMonth(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof canteenFindByYearMonth>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∏âÏãùÌëú Ï∂îÍ∞Ä/ÏàòÏ†ï
 */
export const canteenCreateOrUpdate = (
  requestUpsertCanteenDto: RequestUpsertCanteenDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Canteen>(
    {
      url: `/api/canteens`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpsertCanteenDto,
    },
    options,
  )
}

export type CanteenCreateOrUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof canteenCreateOrUpdate>>>
export type CanteenCreateOrUpdateMutationBody = RequestUpsertCanteenDto
export type CanteenCreateOrUpdateMutationError = ErrorType<void>

export const useCanteenCreateOrUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof canteenCreateOrUpdate>>,
    TError,
    { data: RequestUpsertCanteenDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof canteenCreateOrUpdate>>,
    { data: RequestUpsertCanteenDto }
  > = (props) => {
    const { data } = props ?? {}

    return canteenCreateOrUpdate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof canteenCreateOrUpdate>>,
    TError,
    { data: RequestUpsertCanteenDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Î©îÏãúÏßÄ Ï†ÑÏÜ°
 */
export const chatCreateMessage = (
  id: number,
  requestCreateChatMessageDto: RequestCreateChatMessageDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<number>(
    {
      url: `/api/chat/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateChatMessageDto,
    },
    options,
  )
}

export type ChatCreateMessageMutationResult = NonNullable<Awaited<ReturnType<typeof chatCreateMessage>>>
export type ChatCreateMessageMutationBody = RequestCreateChatMessageDto
export type ChatCreateMessageMutationError = ErrorType<unknown>

export const useChatCreateMessage = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatCreateMessage>>,
    TError,
    { id: number; data: RequestCreateChatMessageDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatCreateMessage>>,
    { id: number; data: RequestCreateChatMessageDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return chatCreateMessage(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof chatCreateMessage>>,
    TError,
    { id: number; data: RequestCreateChatMessageDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï∑®ÏÜå
 */
export const chatDeleteMessage = (id: number, chatid: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<number>({ url: `/api/chat/${id}/chat/${chatid}`, method: 'delete' }, options)
}

export type ChatDeleteMessageMutationResult = NonNullable<Awaited<ReturnType<typeof chatDeleteMessage>>>

export type ChatDeleteMessageMutationError = ErrorType<unknown>

export const useChatDeleteMessage = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatDeleteMessage>>,
    TError,
    { id: number; chatid: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof chatDeleteMessage>>, { id: number; chatid: number }> = (
    props,
  ) => {
    const { id, chatid } = props ?? {}

    return chatDeleteMessage(id, chatid, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof chatDeleteMessage>>, TError, { id: number; chatid: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary AI ÌôúÎèôÍ∏∞Î°ù Ï¥àÏïà ÎåÄÌôîÎ°ù Í∞ÄÏ†∏Ïò§Í∏∞
 */
export const chatHistoryFindByConversationId = (
  params: ChatHistoryFindByConversationIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ChatHistory[]>({ url: `/api/chat-history`, method: 'get', params, signal }, options)
}

export const getChatHistoryFindByConversationIdQueryKey = (params: ChatHistoryFindByConversationIdParams) => [
  `/api/chat-history`,
  ...(params ? [params] : []),
]

export type ChatHistoryFindByConversationIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof chatHistoryFindByConversationId>>
>
export type ChatHistoryFindByConversationIdQueryError = ErrorType<unknown>

export const useChatHistoryFindByConversationId = <
  TData = Awaited<ReturnType<typeof chatHistoryFindByConversationId>>,
  TError = ErrorType<unknown>,
>(
  params: ChatHistoryFindByConversationIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof chatHistoryFindByConversationId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getChatHistoryFindByConversationIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chatHistoryFindByConversationId>>> = ({ signal }) =>
    chatHistoryFindByConversationId(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof chatHistoryFindByConversationId>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇ¥Í∞Ä ÏÜçÌïú Ï±ÑÌåÖÎ∞© Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const chatroomGetChatroomInfo = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseChatroomInfoDto[]>({ url: `/api/chatroom`, method: 'get', signal }, options)
}

export const getChatroomGetChatroomInfoQueryKey = () => [`/api/chatroom`]

export type ChatroomGetChatroomInfoQueryResult = NonNullable<Awaited<ReturnType<typeof chatroomGetChatroomInfo>>>
export type ChatroomGetChatroomInfoQueryError = ErrorType<unknown>

export const useChatroomGetChatroomInfo = <
  TData = Awaited<ReturnType<typeof chatroomGetChatroomInfo>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof chatroomGetChatroomInfo>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getChatroomGetChatroomInfoQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chatroomGetChatroomInfo>>> = ({ signal }) =>
    chatroomGetChatroomInfo(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof chatroomGetChatroomInfo>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï±ÑÌåÖÎ∞© ÏÉùÏÑ±
 */
export const chatroomCreateChatRoom = (
  requestCreateChatroomDto: RequestCreateChatroomDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<number>(
    {
      url: `/api/chatroom`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateChatroomDto,
    },
    options,
  )
}

export type ChatroomCreateChatRoomMutationResult = NonNullable<Awaited<ReturnType<typeof chatroomCreateChatRoom>>>
export type ChatroomCreateChatRoomMutationBody = RequestCreateChatroomDto
export type ChatroomCreateChatRoomMutationError = ErrorType<unknown>

export const useChatroomCreateChatRoom = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatroomCreateChatRoom>>,
    TError,
    { data: RequestCreateChatroomDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatroomCreateChatRoom>>,
    { data: RequestCreateChatroomDto }
  > = (props) => {
    const { data } = props ?? {}

    return chatroomCreateChatRoom(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof chatroomCreateChatRoom>>,
    TError,
    { data: RequestCreateChatroomDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï±ÑÌåÖÎ∞© Ïù∏Ïõê Ï¥àÎåÄ
 */
export const chatroomAddUser = (
  id: number,
  requestAddUsersChatroomDto: RequestAddUsersChatroomDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<number[]>(
    {
      url: `/api/chatroom/${id}/user`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestAddUsersChatroomDto,
    },
    options,
  )
}

export type ChatroomAddUserMutationResult = NonNullable<Awaited<ReturnType<typeof chatroomAddUser>>>
export type ChatroomAddUserMutationBody = RequestAddUsersChatroomDto
export type ChatroomAddUserMutationError = ErrorType<unknown>

export const useChatroomAddUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatroomAddUser>>,
    TError,
    { id: number; data: RequestAddUsersChatroomDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatroomAddUser>>,
    { id: number; data: RequestAddUsersChatroomDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return chatroomAddUser(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof chatroomAddUser>>,
    TError,
    { id: number; data: RequestAddUsersChatroomDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï±ÑÌåÖÎ∞© ÎÇ¥Î≥¥ÎÇ¥Í∏∞
 */
export const chatroomRemoveUser = (id: number, userid: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/chatroom/${id}/user/${userid}`, method: 'delete' }, options)
}

export type ChatroomRemoveUserMutationResult = NonNullable<Awaited<ReturnType<typeof chatroomRemoveUser>>>

export type ChatroomRemoveUserMutationError = ErrorType<unknown>

export const useChatroomRemoveUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatroomRemoveUser>>,
    TError,
    { id: number; userid: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof chatroomRemoveUser>>, { id: number; userid: number }> = (
    props,
  ) => {
    const { id, userid } = props ?? {}

    return chatroomRemoveUser(id, userid, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof chatroomRemoveUser>>, TError, { id: number; userid: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï±ÑÌåÖÎ∞© ÎÇòÍ∞ÄÍ∏∞
 */
export const chatroomExpiredChatRoom = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/chatroom/${id}`, method: 'delete' }, options)
}

export type ChatroomExpiredChatRoomMutationResult = NonNullable<Awaited<ReturnType<typeof chatroomExpiredChatRoom>>>

export type ChatroomExpiredChatRoomMutationError = ErrorType<unknown>

export const useChatroomExpiredChatRoom = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof chatroomExpiredChatRoom>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof chatroomExpiredChatRoom>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return chatroomExpiredChatRoom(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof chatroomExpiredChatRoom>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï±ÑÌåÖÎ∞© ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const chatroomGetChatroomDetailInfo = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseChatroomInfoDetailDto[]>({ url: `/api/chatroom/${id}`, method: 'get', signal }, options)
}

export const getChatroomGetChatroomDetailInfoQueryKey = (id: number) => [`/api/chatroom/${id}`]

export type ChatroomGetChatroomDetailInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof chatroomGetChatroomDetailInfo>>
>
export type ChatroomGetChatroomDetailInfoQueryError = ErrorType<unknown>

export const useChatroomGetChatroomDetailInfo = <
  TData = Awaited<ReturnType<typeof chatroomGetChatroomDetailInfo>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof chatroomGetChatroomDetailInfo>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getChatroomGetChatroomDetailInfoQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chatroomGetChatroomDetailInfo>>> = ({ signal }) =>
    chatroomGetChatroomDetailInfo(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof chatroomGetChatroomDetailInfo>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎåÄÌôîÎ™©Î°ù Î∂àÎü¨Ïò§Í∏∞
 */
export const chatroomGetMessageList = (
  id: number,
  params: ChatroomGetMessageListParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedChatMessageDto[]>(
    { url: `/api/chatroom/${id}/message`, method: 'get', params, signal },
    options,
  )
}

export const getChatroomGetMessageListQueryKey = (id: number, params: ChatroomGetMessageListParams) => [
  `/api/chatroom/${id}/message`,
  ...(params ? [params] : []),
]

export type ChatroomGetMessageListQueryResult = NonNullable<Awaited<ReturnType<typeof chatroomGetMessageList>>>
export type ChatroomGetMessageListQueryError = ErrorType<unknown>

export const useChatroomGetMessageList = <
  TData = Awaited<ReturnType<typeof chatroomGetMessageList>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  params: ChatroomGetMessageListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof chatroomGetMessageList>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getChatroomGetMessageListQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chatroomGetMessageList>>> = ({ signal }) =>
    chatroomGetMessageList(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof chatroomGetMessageList>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï±ÑÌåÖÎ∞© Ï∞∏Í∞ÄÏûêÏùò ÏùΩÏùÄ Ï†ïÎ≥¥ ÏöîÏ≤≠
 */
export const chatroomGetReadInfo = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ChatroomReadInfo[]>({ url: `/api/chatroom/${id}/read-info`, method: 'get', signal }, options)
}

export const getChatroomGetReadInfoQueryKey = (id: number) => [`/api/chatroom/${id}/read-info`]

export type ChatroomGetReadInfoQueryResult = NonNullable<Awaited<ReturnType<typeof chatroomGetReadInfo>>>
export type ChatroomGetReadInfoQueryError = ErrorType<unknown>

export const useChatroomGetReadInfo = <
  TData = Awaited<ReturnType<typeof chatroomGetReadInfo>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof chatroomGetReadInfo>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getChatroomGetReadInfoQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chatroomGetReadInfo>>> = ({ signal }) =>
    chatroomGetReadInfo(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof chatroomGetReadInfo>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï±ÑÌåÖÎ∞© ÏÉÅÌÉú Î≥ÄÍ≤Ω
 */
export const chatroomChangeChatroomStatus = (
  id: number,
  requestModifyChatroomStatusDto: RequestModifyChatroomStatusDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/chatroom/${id}/status`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestModifyChatroomStatusDto,
    },
    options,
  )
}

export type ChatroomChangeChatroomStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatroomChangeChatroomStatus>>
>
export type ChatroomChangeChatroomStatusMutationBody = RequestModifyChatroomStatusDto
export type ChatroomChangeChatroomStatusMutationError = ErrorType<unknown>

export const useChatroomChangeChatroomStatus = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatroomChangeChatroomStatus>>,
    TError,
    { id: number; data: RequestModifyChatroomStatusDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatroomChangeChatroomStatus>>,
    { id: number; data: RequestModifyChatroomStatusDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return chatroomChangeChatroomStatus(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof chatroomChangeChatroomStatus>>,
    TError,
    { id: number; data: RequestModifyChatroomStatusDto },
    TContext
  >(mutationFn, mutationOptions)
}

export const chatroomTestJoin = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<void>({ url: `/api/chatroom/${id}/test/join`, method: 'get', signal }, options)
}

export const getChatroomTestJoinQueryKey = (id: number) => [`/api/chatroom/${id}/test/join`]

export type ChatroomTestJoinQueryResult = NonNullable<Awaited<ReturnType<typeof chatroomTestJoin>>>
export type ChatroomTestJoinQueryError = ErrorType<unknown>

export const useChatroomTestJoin = <TData = Awaited<ReturnType<typeof chatroomTestJoin>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof chatroomTestJoin>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getChatroomTestJoinQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chatroomTestJoin>>> = ({ signal }) =>
    chatroomTestJoin(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof chatroomTestJoin>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const chatroomTestOut = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<void>({ url: `/api/chatroom/${id}/test/out`, method: 'get', signal }, options)
}

export const getChatroomTestOutQueryKey = (id: number) => [`/api/chatroom/${id}/test/out`]

export type ChatroomTestOutQueryResult = NonNullable<Awaited<ReturnType<typeof chatroomTestOut>>>
export type ChatroomTestOutQueryError = ErrorType<unknown>

export const useChatroomTestOut = <TData = Awaited<ReturnType<typeof chatroomTestOut>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof chatroomTestOut>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getChatroomTestOutQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chatroomTestOut>>> = ({ signal }) =>
    chatroomTestOut(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof chatroomTestOut>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï±ÑÌåÖÎ∞© ÏÑ§Ï†ï ÏàòÏ†ï
 */
export const chatroomUpdateChatroomInfo = (
  id: number,
  requestUpdateChatroomInfoDto: RequestUpdateChatroomInfoDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/chatroom/${id}/info`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateChatroomInfoDto,
    },
    options,
  )
}

export type ChatroomUpdateChatroomInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof chatroomUpdateChatroomInfo>>
>
export type ChatroomUpdateChatroomInfoMutationBody = RequestUpdateChatroomInfoDto
export type ChatroomUpdateChatroomInfoMutationError = ErrorType<unknown>

export const useChatroomUpdateChatroomInfo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chatroomUpdateChatroomInfo>>,
    TError,
    { id: number; data: RequestUpdateChatroomInfoDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chatroomUpdateChatroomInfo>>,
    { id: number; data: RequestUpdateChatroomInfoDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return chatroomUpdateChatroomInfo(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof chatroomUpdateChatroomInfo>>,
    TError,
    { id: number; data: RequestUpdateChatroomInfoDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï±ÑÌåÖÎ∞© Ïù∏Ïõê Í≤ÄÏÉâ
 */
export const chatroomSearchUsers = (
  id: number,
  params: ChatroomSearchUsersParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseChatAttendeeDto[]>(
    { url: `/api/chatroom/${id}/search-user`, method: 'get', params, signal },
    options,
  )
}

export const getChatroomSearchUsersQueryKey = (id: number, params: ChatroomSearchUsersParams) => [
  `/api/chatroom/${id}/search-user`,
  ...(params ? [params] : []),
]

export type ChatroomSearchUsersQueryResult = NonNullable<Awaited<ReturnType<typeof chatroomSearchUsers>>>
export type ChatroomSearchUsersQueryError = ErrorType<unknown>

export const useChatroomSearchUsers = <
  TData = Awaited<ReturnType<typeof chatroomSearchUsers>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  params: ChatroomSearchUsersParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof chatroomSearchUsers>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getChatroomSearchUsersQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof chatroomSearchUsers>>> = ({ signal }) =>
    chatroomSearchUsers(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof chatroomSearchUsers>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary partnerSchool Î™©Î°ù Ï°∞Ìöå
 */
export const codeGetPartnerSchoolBySchool = (
  schoolId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Code[]>({ url: `/api/code/get-partner-school-by-school/${schoolId}`, method: 'get', signal }, options)
}

export const getCodeGetPartnerSchoolBySchoolQueryKey = (schoolId: number) => [
  `/api/code/get-partner-school-by-school/${schoolId}`,
]

export type CodeGetPartnerSchoolBySchoolQueryResult = NonNullable<
  Awaited<ReturnType<typeof codeGetPartnerSchoolBySchool>>
>
export type CodeGetPartnerSchoolBySchoolQueryError = ErrorType<unknown>

export const useCodeGetPartnerSchoolBySchool = <
  TData = Awaited<ReturnType<typeof codeGetPartnerSchoolBySchool>>,
  TError = ErrorType<unknown>,
>(
  schoolId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof codeGetPartnerSchoolBySchool>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCodeGetPartnerSchoolBySchoolQueryKey(schoolId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof codeGetPartnerSchoolBySchool>>> = ({ signal }) =>
    codeGetPartnerSchoolBySchool(schoolId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof codeGetPartnerSchoolBySchool>>, TError, TData>(queryKey, queryFn, {
    enabled: !!schoolId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏΩîÎìú Î™©Î°ù Ï°∞Ìöå
 */
export const codeGetCodesByCategory = (
  category: Category,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Code[]>({ url: `/api/code/codes-by-category/${category}`, method: 'get', signal }, options)
}

export const getCodeGetCodesByCategoryQueryKey = (category: Category) => [`/api/code/codes-by-category/${category}`]

export type CodeGetCodesByCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof codeGetCodesByCategory>>>
export type CodeGetCodesByCategoryQueryError = ErrorType<unknown>

export const useCodeGetCodesByCategory = <
  TData = Awaited<ReturnType<typeof codeGetCodesByCategory>>,
  TError = ErrorType<unknown>,
>(
  category: Category,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof codeGetCodesByCategory>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCodeGetCodesByCategoryQueryKey(category)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof codeGetCodesByCategory>>> = ({ signal }) =>
    codeGetCodesByCategory(category, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof codeGetCodesByCategory>>, TError, TData>(queryKey, queryFn, {
    enabled: !!category,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÇ¨Ïö©Ïûê Í≤ÄÏÉâ
 */
export const commonUserSearch = (
  params?: CommonUserSearchParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseSearchUserDto[]>({ url: `/api/common/user/search`, method: 'get', params, signal }, options)
}

export const getCommonUserSearchQueryKey = (params?: CommonUserSearchParams) => [
  `/api/common/user/search`,
  ...(params ? [params] : []),
]

export type CommonUserSearchQueryResult = NonNullable<Awaited<ReturnType<typeof commonUserSearch>>>
export type CommonUserSearchQueryError = ErrorType<unknown>

export const useCommonUserSearch = <TData = Awaited<ReturnType<typeof commonUserSearch>>, TError = ErrorType<unknown>>(
  params?: CommonUserSearchParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof commonUserSearch>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCommonUserSearchQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof commonUserSearch>>> = ({ signal }) =>
    commonUserSearch(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof commonUserSearch>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïù¥Î¶ÑÏúºÎ°ú ÏÇ¨Ïö©Ïûê Í≤ÄÏÉâ
 */
export const commonUserSearchByName = (
  params: CommonUserSearchByNameParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseUserWithKlassDto[]>(
    { url: `/api/common/user/search-by-name`, method: 'get', params, signal },
    options,
  )
}

export const getCommonUserSearchByNameQueryKey = (params: CommonUserSearchByNameParams) => [
  `/api/common/user/search-by-name`,
  ...(params ? [params] : []),
]

export type CommonUserSearchByNameQueryResult = NonNullable<Awaited<ReturnType<typeof commonUserSearchByName>>>
export type CommonUserSearchByNameQueryError = ErrorType<unknown>

export const useCommonUserSearchByName = <
  TData = Awaited<ReturnType<typeof commonUserSearchByName>>,
  TError = ErrorType<unknown>,
>(
  params: CommonUserSearchByNameParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof commonUserSearchByName>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCommonUserSearchByNameQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof commonUserSearchByName>>> = ({ signal }) =>
    commonUserSearchByName(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof commonUserSearchByName>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÌïôÎÖÑÎ∞ò Ï°∞Ìöå
 */
export const commonUserSearchtest = (
  params?: CommonUserSearchtestParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseSearchUserByGradeAndKlassItemsDto>(
    { url: `/api/common/user/search/grade-klass`, method: 'get', params, signal },
    options,
  )
}

export const getCommonUserSearchtestQueryKey = (params?: CommonUserSearchtestParams) => [
  `/api/common/user/search/grade-klass`,
  ...(params ? [params] : []),
]

export type CommonUserSearchtestQueryResult = NonNullable<Awaited<ReturnType<typeof commonUserSearchtest>>>
export type CommonUserSearchtestQueryError = ErrorType<unknown>

export const useCommonUserSearchtest = <
  TData = Awaited<ReturnType<typeof commonUserSearchtest>>,
  TError = ErrorType<unknown>,
>(
  params?: CommonUserSearchtestParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof commonUserSearchtest>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCommonUserSearchtestQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof commonUserSearchtest>>> = ({ signal }) =>
    commonUserSearchtest(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof commonUserSearchtest>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÏïÑÏù¥ÎîîÎ°ú ÌïôÏÉùÏÉÅÎã¥Í∏Ä Ï°∞Ìöå (ÌïôÏÉùÏπ¥Îìú)
 */
export const counselingFindByStudentId = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseCounselingDetailDto[]>(
    { url: `/api/counseling/counseling-by-student-id/${studentId}`, method: 'get', signal },
    options,
  )
}

export const getCounselingFindByStudentIdQueryKey = (studentId: number) => [
  `/api/counseling/counseling-by-student-id/${studentId}`,
]

export type CounselingFindByStudentIdQueryResult = NonNullable<Awaited<ReturnType<typeof counselingFindByStudentId>>>
export type CounselingFindByStudentIdQueryError = ErrorType<unknown>

export const useCounselingFindByStudentId = <
  TData = Awaited<ReturnType<typeof counselingFindByStudentId>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof counselingFindByStudentId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCounselingFindByStudentIdQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof counselingFindByStudentId>>> = ({ signal }) =>
    counselingFindByStudentId(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof counselingFindByStudentId>>, TError, TData>(queryKey, queryFn, {
    enabled: !!studentId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÏÉÅÎã¥Í∏Ä ÏÉùÏÑ± (ÌïôÏÉùÏπ¥Îìú)
 */
export const counselingCreate = (
  requestCreateCounselingDto: RequestCreateCounselingDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Counseling>(
    {
      url: `/api/counseling`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateCounselingDto,
    },
    options,
  )
}

export type CounselingCreateMutationResult = NonNullable<Awaited<ReturnType<typeof counselingCreate>>>
export type CounselingCreateMutationBody = RequestCreateCounselingDto
export type CounselingCreateMutationError = ErrorType<unknown>

export const useCounselingCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof counselingCreate>>,
    TError,
    { data: RequestCreateCounselingDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof counselingCreate>>,
    { data: RequestCreateCounselingDto }
  > = (props) => {
    const { data } = props ?? {}

    return counselingCreate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof counselingCreate>>,
    TError,
    { data: RequestCreateCounselingDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉùÏÉÅÎã¥Í∏Ä ÏàòÏ†ï (ÌïôÏÉùÏπ¥Îìú)
 */
export const counselingUpdate = (
  id: number,
  requestCreateCounselingDto: RequestCreateCounselingDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/counseling/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateCounselingDto,
    },
    options,
  )
}

export type CounselingUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof counselingUpdate>>>
export type CounselingUpdateMutationBody = RequestCreateCounselingDto
export type CounselingUpdateMutationError = ErrorType<void>

export const useCounselingUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof counselingUpdate>>,
    TError,
    { id: number; data: RequestCreateCounselingDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof counselingUpdate>>,
    { id: number; data: RequestCreateCounselingDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return counselingUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof counselingUpdate>>,
    TError,
    { id: number; data: RequestCreateCounselingDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉùÏÉÅÎã¥ Í∏Ä ÏÇ≠Ï†ú
 */
export const counselingDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/counseling/${id}`, method: 'delete' }, options)
}

export type CounselingDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof counselingDelete>>>

export type CounselingDeleteMutationError = ErrorType<unknown>

export const useCounselingDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof counselingDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof counselingDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return counselingDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof counselingDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏÉÅÎã¥ ÌïôÏÉùÏùò ÏÉÅÏÑ∏Ï†ïÎ≥¥ Ï°∞Ìöå (ÌïôÏÉù, Î≥¥Ìò∏Ïûê, ÏÜåÏÜçÍ∑∏Î£π)
 */
export const counselingFindCounselingDetailStudentByStudentId = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseCounselingDetailStudentDto>(
    { url: `/api/counseling/detail/student/${studentId}`, method: 'get', signal },
    options,
  )
}

export const getCounselingFindCounselingDetailStudentByStudentIdQueryKey = (studentId: number) => [
  `/api/counseling/detail/student/${studentId}`,
]

export type CounselingFindCounselingDetailStudentByStudentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof counselingFindCounselingDetailStudentByStudentId>>
>
export type CounselingFindCounselingDetailStudentByStudentIdQueryError = ErrorType<unknown>

export const useCounselingFindCounselingDetailStudentByStudentId = <
  TData = Awaited<ReturnType<typeof counselingFindCounselingDetailStudentByStudentId>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof counselingFindCounselingDetailStudentByStudentId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCounselingFindCounselingDetailStudentByStudentIdQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof counselingFindCounselingDetailStudentByStudentId>>> = ({
    signal,
  }) => counselingFindCounselingDetailStudentByStudentId(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof counselingFindCounselingDetailStudentByStudentId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÏ†ïÎ≥¥ ÏàòÏ†ï
 */
export const counselingUpdateStudent = (
  id: number,
  updateStudentDto: UpdateStudentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/counseling/update/student/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: updateStudentDto,
    },
    options,
  )
}

export type CounselingUpdateStudentMutationResult = NonNullable<Awaited<ReturnType<typeof counselingUpdateStudent>>>
export type CounselingUpdateStudentMutationBody = UpdateStudentDto
export type CounselingUpdateStudentMutationError = ErrorType<unknown>

export const useCounselingUpdateStudent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof counselingUpdateStudent>>,
    TError,
    { id: number; data: UpdateStudentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof counselingUpdateStudent>>,
    { id: number; data: UpdateStudentDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return counselingUpdateStudent(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof counselingUpdateStudent>>,
    TError,
    { id: number; data: UpdateStudentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑ†ÏÉùÎãòÏù¥ ÌïôÏÉùÏùÑ ÏßÄÏ†ïÌïòÏó¨ Î∂ÄÎ™® ÌöåÏõêÍ∞ÄÏûÖ ÏöîÏ≤≠(ÏïåÎ¶ºÌÜ° Î∞úÏÜ°)
 */
export const counselingSendParentSignUp = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<boolean>({ url: `/api/counseling/send-parent-sign-up/${studentId}`, method: 'get', signal }, options)
}

export const getCounselingSendParentSignUpQueryKey = (studentId: number) => [
  `/api/counseling/send-parent-sign-up/${studentId}`,
]

export type CounselingSendParentSignUpQueryResult = NonNullable<Awaited<ReturnType<typeof counselingSendParentSignUp>>>
export type CounselingSendParentSignUpQueryError = ErrorType<unknown>

export const useCounselingSendParentSignUp = <
  TData = Awaited<ReturnType<typeof counselingSendParentSignUp>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof counselingSendParentSignUp>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getCounselingSendParentSignUpQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof counselingSendParentSignUp>>> = ({ signal }) =>
    counselingSendParentSignUp(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof counselingSendParentSignUp>>, TError, TData>(queryKey, queryFn, {
    enabled: !!studentId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãòÏù¥ ÌïôÏÉùÏùÑ ÏßÄÏ†ïÌïòÏó¨ Î∂ÄÎ™® ÌöåÏõêÍ∞ÄÏûÖ ÏöîÏ≤≠v2(ÏïåÎ¶ºÌÜ° Î∞úÏÜ°)
 */
export const counselingSendParentSignUpV2 = (
  studentId: number,
  requestSendParentSignUpDto: RequestSendParentSignUpDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/counseling/send-parent-sign-up-v2/${studentId}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestSendParentSignUpDto,
    },
    options,
  )
}

export type CounselingSendParentSignUpV2MutationResult = NonNullable<
  Awaited<ReturnType<typeof counselingSendParentSignUpV2>>
>
export type CounselingSendParentSignUpV2MutationBody = RequestSendParentSignUpDto
export type CounselingSendParentSignUpV2MutationError = ErrorType<unknown>

export const useCounselingSendParentSignUpV2 = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof counselingSendParentSignUpV2>>,
    TError,
    { studentId: number; data: RequestSendParentSignUpDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof counselingSendParentSignUpV2>>,
    { studentId: number; data: RequestSendParentSignUpDto }
  > = (props) => {
    const { studentId, data } = props ?? {}

    return counselingSendParentSignUpV2(studentId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof counselingSendParentSignUpV2>>,
    TError,
    { studentId: number; data: RequestSendParentSignUpDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
 */
export const dashboardGetDashBoardData = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseDashboardDto>({ url: `/api/dashboard`, method: 'get', signal }, options)
}

export const getDashboardGetDashBoardDataQueryKey = () => [`/api/dashboard`]

export type DashboardGetDashBoardDataQueryResult = NonNullable<Awaited<ReturnType<typeof dashboardGetDashBoardData>>>
export type DashboardGetDashBoardDataQueryError = ErrorType<unknown>

export const useDashboardGetDashBoardData = <
  TData = Awaited<ReturnType<typeof dashboardGetDashBoardData>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof dashboardGetDashBoardData>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getDashboardGetDashBoardDataQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardGetDashBoardData>>> = ({ signal }) =>
    dashboardGetDashBoardData(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof dashboardGetDashBoardData>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
 */
export const dashboardGetStudentNotificationData = (
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseStudentNotificationDashboardDto>(
    { url: `/api/dashboard/student-notification`, method: 'get', signal },
    options,
  )
}

export const getDashboardGetStudentNotificationDataQueryKey = () => [`/api/dashboard/student-notification`]

export type DashboardGetStudentNotificationDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof dashboardGetStudentNotificationData>>
>
export type DashboardGetStudentNotificationDataQueryError = ErrorType<unknown>

export const useDashboardGetStudentNotificationData = <
  TData = Awaited<ReturnType<typeof dashboardGetStudentNotificationData>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof dashboardGetStudentNotificationData>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getDashboardGetStudentNotificationDataQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardGetStudentNotificationData>>> = ({ signal }) =>
    dashboardGetStudentNotificationData(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof dashboardGetStudentNotificationData>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãò ÎåÄÏãúÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
 */
export const dashboardGetTeacherNotificationData = (
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseTeacherNotificationDashboardDto>(
    { url: `/api/dashboard/teacher-notification`, method: 'get', signal },
    options,
  )
}

export const getDashboardGetTeacherNotificationDataQueryKey = () => [`/api/dashboard/teacher-notification`]

export type DashboardGetTeacherNotificationDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof dashboardGetTeacherNotificationData>>
>
export type DashboardGetTeacherNotificationDataQueryError = ErrorType<unknown>

export const useDashboardGetTeacherNotificationData = <
  TData = Awaited<ReturnType<typeof dashboardGetTeacherNotificationData>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof dashboardGetTeacherNotificationData>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getDashboardGetTeacherNotificationDataQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof dashboardGetTeacherNotificationData>>> = ({ signal }) =>
    dashboardGetTeacherNotificationData(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof dashboardGetTeacherNotificationData>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïù∏Ï¶ù ÌÜ†ÌÅ∞ ÏÉùÏÑ± Î∞è Ï†ÑÏÜ°
 */
export const externalCreateToken = (options?: SecondParameter<typeof mutator>) => {
  return mutator<string>({ url: `/api/external/token`, method: 'post' }, options)
}

export type ExternalCreateTokenMutationResult = NonNullable<Awaited<ReturnType<typeof externalCreateToken>>>

export type ExternalCreateTokenMutationError = ErrorType<unknown>

export const useExternalCreateToken = <TError = ErrorType<unknown>, TVariables = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof externalCreateToken>>, TError, TVariables, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof externalCreateToken>>, TVariables> = () => {
    return externalCreateToken(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof externalCreateToken>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï†ÑÏÜ°
 */
export const externalGetUserByToken = (
  params: ExternalGetUserByTokenParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<string>({ url: `/api/external/sso`, method: 'get', params, signal }, options)
}

export const getExternalGetUserByTokenQueryKey = (params: ExternalGetUserByTokenParams) => [
  `/api/external/sso`,
  ...(params ? [params] : []),
]

export type ExternalGetUserByTokenQueryResult = NonNullable<Awaited<ReturnType<typeof externalGetUserByToken>>>
export type ExternalGetUserByTokenQueryError = ErrorType<unknown>

export const useExternalGetUserByToken = <
  TData = Awaited<ReturnType<typeof externalGetUserByToken>>,
  TError = ErrorType<unknown>,
>(
  params: ExternalGetUserByTokenParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof externalGetUserByToken>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getExternalGetUserByTokenQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof externalGetUserByToken>>> = ({ signal }) =>
    externalGetUserByToken(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof externalGetUserByToken>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ìë∏Ïãú ÏïåÎ¶º Ï†ÑÏÜ° ÏöîÏ≤≠
 */
export const externalPushAlarm = (
  requestExternalAlarmDto: RequestExternalAlarmDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/external/alarm`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestExternalAlarmDto,
    },
    options,
  )
}

export type ExternalPushAlarmMutationResult = NonNullable<Awaited<ReturnType<typeof externalPushAlarm>>>
export type ExternalPushAlarmMutationBody = RequestExternalAlarmDto
export type ExternalPushAlarmMutationError = ErrorType<unknown>

export const useExternalPushAlarm = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof externalPushAlarm>>,
    TError,
    { data: RequestExternalAlarmDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof externalPushAlarm>>,
    { data: RequestExternalAlarmDto }
  > = (props) => {
    const { data } = props ?? {}

    return externalPushAlarm(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof externalPushAlarm>>,
    TError,
    { data: RequestExternalAlarmDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏãúÏä§ÌÖúÏùò Ìë∏Ïãú ÏïåÎ¶º Ï†ÑÏÜ° ÏöîÏ≤≠
 */
export const externalPushAlarmSystem = (
  requestExternalAlarmDto: RequestExternalAlarmDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/external/systemalarm`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestExternalAlarmDto,
    },
    options,
  )
}

export type ExternalPushAlarmSystemMutationResult = NonNullable<Awaited<ReturnType<typeof externalPushAlarmSystem>>>
export type ExternalPushAlarmSystemMutationBody = RequestExternalAlarmDto
export type ExternalPushAlarmSystemMutationError = ErrorType<unknown>

export const useExternalPushAlarmSystem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof externalPushAlarmSystem>>,
    TError,
    { data: RequestExternalAlarmDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof externalPushAlarmSystem>>,
    { data: RequestExternalAlarmDto }
  > = (props) => {
    const { data } = props ?? {}

    return externalPushAlarmSystem(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof externalPushAlarmSystem>>,
    TError,
    { data: RequestExternalAlarmDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÎåÄÍ∏∞Ïó¥ ÌôïÏù∏/ÏóÖÎç∞Ïù¥Ìä∏
 */
export const externalUpdateQueue = (options?: SecondParameter<typeof mutator>) => {
  return mutator<string>({ url: `/api/external/processqueue`, method: 'post' }, options)
}

export type ExternalUpdateQueueMutationResult = NonNullable<Awaited<ReturnType<typeof externalUpdateQueue>>>

export type ExternalUpdateQueueMutationError = ErrorType<unknown>

export const useExternalUpdateQueue = <TError = ErrorType<unknown>, TVariables = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof externalUpdateQueue>>, TError, TVariables, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof externalUpdateQueue>>, TVariables> = () => {
    return externalUpdateQueue(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof externalUpdateQueue>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏóÖÎç∞Ïù¥Ìä∏
 */
export const externalUpdateQueueStatus = (options?: SecondParameter<typeof mutator>) => {
  return mutator<string>({ url: `/api/external/updatequeue`, method: 'post' }, options)
}

export type ExternalUpdateQueueStatusMutationResult = NonNullable<Awaited<ReturnType<typeof externalUpdateQueueStatus>>>

export type ExternalUpdateQueueStatusMutationError = ErrorType<unknown>

export const useExternalUpdateQueueStatus = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof externalUpdateQueueStatus>>, TError, TVariables, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof externalUpdateQueueStatus>>, TVariables> = () => {
    return externalUpdateQueueStatus(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof externalUpdateQueueStatus>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Í≤∞Í≥ºÎ≥¥Í≥†ÏÑú Ï†úÏ∂ú
 */
export const fieldtripResultUpdateResult = (
  id: number,
  requestUpdateFieldtripResultDto: RequestUpdateFieldtripResultDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Fieldtrip>(
    {
      url: `/api/fieldtrips/result/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateFieldtripResultDto,
    },
    options,
  )
}

export type FieldtripResultUpdateResultMutationResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripResultUpdateResult>>
>
export type FieldtripResultUpdateResultMutationBody = RequestUpdateFieldtripResultDto
export type FieldtripResultUpdateResultMutationError = ErrorType<void>

export const useFieldtripResultUpdateResult = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripResultUpdateResult>>,
    TError,
    { id: number; data: RequestUpdateFieldtripResultDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripResultUpdateResult>>,
    { id: number; data: RequestUpdateFieldtripResultDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripResultUpdateResult(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripResultUpdateResult>>,
    TError,
    { id: number; data: RequestUpdateFieldtripResultDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Í≤∞Í≥ºÎ≥¥Í≥†ÏÑú Ï†úÏ∂ú ÏàòÏ†ï(ÏÑ†ÏÉùÎãòÏö©)
 */
export const fieldtripResultUpdateResultByTeacher = (
  id: number,
  requestUpdateFieldtripResultByTeacherDto: RequestUpdateFieldtripResultByTeacherDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Fieldtrip>(
    {
      url: `/api/fieldtrips/result/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateFieldtripResultByTeacherDto,
    },
    options,
  )
}

export type FieldtripResultUpdateResultByTeacherMutationResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripResultUpdateResultByTeacher>>
>
export type FieldtripResultUpdateResultByTeacherMutationBody = RequestUpdateFieldtripResultByTeacherDto
export type FieldtripResultUpdateResultByTeacherMutationError = ErrorType<void>

export const useFieldtripResultUpdateResultByTeacher = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripResultUpdateResultByTeacher>>,
    TError,
    { id: number; data: RequestUpdateFieldtripResultByTeacherDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripResultUpdateResultByTeacher>>,
    { id: number; data: RequestUpdateFieldtripResultByTeacherDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripResultUpdateResultByTeacher(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripResultUpdateResultByTeacher>>,
    TError,
    { id: number; data: RequestUpdateFieldtripResultByTeacherDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Í≤∞Í≥ºÎ≥¥Í≥†ÏÑú Î∞òÎ†§
 */
export const fieldtripResultDenyResult = (
  id: number,
  fieldtripResultDenyResultBody: FieldtripResultDenyResultBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/fieldtrips/result/deny/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fieldtripResultDenyResultBody,
    },
    options,
  )
}

export type FieldtripResultDenyResultMutationResult = NonNullable<Awaited<ReturnType<typeof fieldtripResultDenyResult>>>
export type FieldtripResultDenyResultMutationBody = FieldtripResultDenyResultBody
export type FieldtripResultDenyResultMutationError = ErrorType<unknown>

export const useFieldtripResultDenyResult = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripResultDenyResult>>,
    TError,
    { id: number; data: FieldtripResultDenyResultBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripResultDenyResult>>,
    { id: number; data: FieldtripResultDenyResultBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripResultDenyResult(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripResultDenyResult>>,
    TError,
    { id: number; data: FieldtripResultDenyResultBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Í≤∞Í≥ºÎ≥¥Í≥†ÏÑú ÏäπÏù∏(Î∂ÄÎ™®Îãò)
 */
export const fieldtripResultApproveResultByParent = (
  uuid: string,
  fieldtripResultApproveResultByParentBody: FieldtripResultApproveResultByParentBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/fieldtrips/result/approve-by-parent/${uuid}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fieldtripResultApproveResultByParentBody,
    },
    options,
  )
}

export type FieldtripResultApproveResultByParentMutationResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripResultApproveResultByParent>>
>
export type FieldtripResultApproveResultByParentMutationBody = FieldtripResultApproveResultByParentBody
export type FieldtripResultApproveResultByParentMutationError = ErrorType<unknown>

export const useFieldtripResultApproveResultByParent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripResultApproveResultByParent>>,
    TError,
    { uuid: string; data: FieldtripResultApproveResultByParentBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripResultApproveResultByParent>>,
    { uuid: string; data: FieldtripResultApproveResultByParentBody }
  > = (props) => {
    const { uuid, data } = props ?? {}

    return fieldtripResultApproveResultByParent(uuid, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripResultApproveResultByParent>>,
    TError,
    { uuid: string; data: FieldtripResultApproveResultByParentBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Í≤∞Í≥ºÎ≥¥Í≥†ÏÑú ÏäπÏù∏(Î∂ÄÎ™®Îãò)
 */
export const fieldtripResultApproveResultByParentApp = (
  id: number,
  fieldtripResultApproveResultByParentAppBody: FieldtripResultApproveResultByParentAppBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/fieldtrips/result/approve-by-parentapp/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fieldtripResultApproveResultByParentAppBody,
    },
    options,
  )
}

export type FieldtripResultApproveResultByParentAppMutationResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripResultApproveResultByParentApp>>
>
export type FieldtripResultApproveResultByParentAppMutationBody = FieldtripResultApproveResultByParentAppBody
export type FieldtripResultApproveResultByParentAppMutationError = ErrorType<unknown>

export const useFieldtripResultApproveResultByParentApp = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripResultApproveResultByParentApp>>,
    TError,
    { id: number; data: FieldtripResultApproveResultByParentAppBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripResultApproveResultByParentApp>>,
    { id: number; data: FieldtripResultApproveResultByParentAppBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripResultApproveResultByParentApp(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripResultApproveResultByParentApp>>,
    TError,
    { id: number; data: FieldtripResultApproveResultByParentAppBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Í≤∞Í≥ºÎ≥¥Í≥†ÏÑú ÏäπÏù∏
 */
export const fieldtripResultApproveResult = (
  id: number,
  fieldtripResultApproveResultBody: FieldtripResultApproveResultBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/fieldtrips/result/approve/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fieldtripResultApproveResultBody,
    },
    options,
  )
}

export type FieldtripResultApproveResultMutationResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripResultApproveResult>>
>
export type FieldtripResultApproveResultMutationBody = FieldtripResultApproveResultBody
export type FieldtripResultApproveResultMutationError = ErrorType<unknown>

export const useFieldtripResultApproveResult = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripResultApproveResult>>,
    TError,
    { id: number; data: FieldtripResultApproveResultBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripResultApproveResult>>,
    { id: number; data: FieldtripResultApproveResultBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripResultApproveResult(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripResultApproveResult>>,
    TError,
    { id: number; data: FieldtripResultApproveResultBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Í≤∞Í≥ºÎ≥¥Í≥†ÏÑú Î∂ÄÎ™®Îãò ÏÇ¨Ïù∏ Ïû¨ÏöîÏ≤≠
 */
export const fieldtripResultResend = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/fieldtrips/result/resend/${id}`, method: 'post' }, options)
}

export type FieldtripResultResendMutationResult = NonNullable<Awaited<ReturnType<typeof fieldtripResultResend>>>

export type FieldtripResultResendMutationError = ErrorType<unknown>

export const useFieldtripResultResend = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof fieldtripResultResend>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof fieldtripResultResend>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return fieldtripResultResend(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof fieldtripResultResend>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú Î™©Î°ù(ÌïôÏÉùÏö©)
 */
export const fieldtripsFindAllByStudent = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Fieldtrip[]>({ url: `/api/fieldtrips/list-by-student`, method: 'get', signal }, options)
}

export const getFieldtripsFindAllByStudentQueryKey = () => [`/api/fieldtrips/list-by-student`]

export type FieldtripsFindAllByStudentQueryResult = NonNullable<Awaited<ReturnType<typeof fieldtripsFindAllByStudent>>>
export type FieldtripsFindAllByStudentQueryError = ErrorType<unknown>

export const useFieldtripsFindAllByStudent = <
  TData = Awaited<ReturnType<typeof fieldtripsFindAllByStudent>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsFindAllByStudent>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsFindAllByStudentQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsFindAllByStudent>>> = ({ signal }) =>
    fieldtripsFindAllByStudent(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsFindAllByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ ÎÇ†Ïßú Îã§Ïãú Í≥ÑÏÇ∞
 */
export const fieldtripsReCalculateFieldtripDays = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<number>({ url: `/api/fieldtrips/recalculate-days`, method: 'get', signal }, options)
}

export const getFieldtripsReCalculateFieldtripDaysQueryKey = () => [`/api/fieldtrips/recalculate-days`]

export type FieldtripsReCalculateFieldtripDaysQueryResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDays>>
>
export type FieldtripsReCalculateFieldtripDaysQueryError = ErrorType<unknown>

export const useFieldtripsReCalculateFieldtripDays = <
  TData = Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDays>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDays>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsReCalculateFieldtripDaysQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDays>>> = ({ signal }) =>
    fieldtripsReCalculateFieldtripDays(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDays>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ ÎÇ†Ïßú Îã§Ïãú Í≥ÑÏÇ∞
 */
export const fieldtripsReCalculateFieldtripDaysWithUser = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<number>({ url: `/api/fieldtrips/recalculate-days/${id}`, method: 'get', signal }, options)
}

export const getFieldtripsReCalculateFieldtripDaysWithUserQueryKey = (id: number) => [
  `/api/fieldtrips/recalculate-days/${id}`,
]

export type FieldtripsReCalculateFieldtripDaysWithUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDaysWithUser>>
>
export type FieldtripsReCalculateFieldtripDaysWithUserQueryError = ErrorType<unknown>

export const useFieldtripsReCalculateFieldtripDaysWithUser = <
  TData = Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDaysWithUser>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDaysWithUser>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsReCalculateFieldtripDaysWithUserQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDaysWithUser>>> = ({ signal }) =>
    fieldtripsReCalculateFieldtripDaysWithUser(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDaysWithUser>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ ÎÇ†Ïßú Îã§Ïãú Í≥ÑÏÇ∞
 */
export const fieldtripsReCalculateFieldtripDaysWithUserId = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<number>({ url: `/api/fieldtrips/recalculate-days/user/${id}`, method: 'get', signal }, options)
}

export const getFieldtripsReCalculateFieldtripDaysWithUserIdQueryKey = (id: number) => [
  `/api/fieldtrips/recalculate-days/user/${id}`,
]

export type FieldtripsReCalculateFieldtripDaysWithUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDaysWithUserId>>
>
export type FieldtripsReCalculateFieldtripDaysWithUserIdQueryError = ErrorType<unknown>

export const useFieldtripsReCalculateFieldtripDaysWithUserId = <
  TData = Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDaysWithUserId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDaysWithUserId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsReCalculateFieldtripDaysWithUserIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDaysWithUserId>>> = ({
    signal,
  }) => fieldtripsReCalculateFieldtripDaysWithUserId(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsReCalculateFieldtripDaysWithUserId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµÌòÑÌô© ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú(ÏÑ†ÏÉùÎãòÏö©)
 */
export const fieldtripsDownloadFieldtrips = (
  params: FieldtripsDownloadFieldtripsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/fieldtrips/download`, method: 'get', params, responseType: 'blob', signal },
    options,
  )
}

export const getFieldtripsDownloadFieldtripsQueryKey = (params: FieldtripsDownloadFieldtripsParams) => [
  `/api/fieldtrips/download`,
  ...(params ? [params] : []),
]

export type FieldtripsDownloadFieldtripsQueryResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripsDownloadFieldtrips>>
>
export type FieldtripsDownloadFieldtripsQueryError = ErrorType<unknown>

export const useFieldtripsDownloadFieldtrips = <
  TData = Awaited<ReturnType<typeof fieldtripsDownloadFieldtrips>>,
  TError = ErrorType<unknown>,
>(
  params: FieldtripsDownloadFieldtripsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsDownloadFieldtrips>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsDownloadFieldtripsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsDownloadFieldtrips>>> = ({ signal }) =>
    fieldtripsDownloadFieldtrips(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsDownloadFieldtrips>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú Î™©Î°ù(ÏÑ†ÏÉùÎãòÏö©), Î†àÍ±∞Ïãú Í±∞Ïùò Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
 */
export const fieldtripsGetFieldtripsByTeacher = (
  params: FieldtripsGetFieldtripsByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedFieldtripDto>({ url: `/api/fieldtrips`, method: 'get', params, signal }, options)
}

export const getFieldtripsGetFieldtripsByTeacherQueryKey = (params: FieldtripsGetFieldtripsByTeacherParams) => [
  `/api/fieldtrips`,
  ...(params ? [params] : []),
]

export type FieldtripsGetFieldtripsByTeacherQueryResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripsGetFieldtripsByTeacher>>
>
export type FieldtripsGetFieldtripsByTeacherQueryError = ErrorType<unknown>

export const useFieldtripsGetFieldtripsByTeacher = <
  TData = Awaited<ReturnType<typeof fieldtripsGetFieldtripsByTeacher>>,
  TError = ErrorType<unknown>,
>(
  params: FieldtripsGetFieldtripsByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsGetFieldtripsByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsGetFieldtripsByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsGetFieldtripsByTeacher>>> = ({ signal }) =>
    fieldtripsGetFieldtripsByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsGetFieldtripsByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú Ï∂îÍ∞Ä
 */
export const fieldtripsCreate = (
  requestCreateFieldtripDto: RequestCreateFieldtripDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Fieldtrip>(
    {
      url: `/api/fieldtrips`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateFieldtripDto,
    },
    options,
  )
}

export type FieldtripsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof fieldtripsCreate>>>
export type FieldtripsCreateMutationBody = RequestCreateFieldtripDto
export type FieldtripsCreateMutationError = ErrorType<void>

export const useFieldtripsCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripsCreate>>,
    TError,
    { data: RequestCreateFieldtripDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripsCreate>>,
    { data: RequestCreateFieldtripDto }
  > = (props) => {
    const { data } = props ?? {}

    return fieldtripsCreate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripsCreate>>,
    TError,
    { data: RequestCreateFieldtripDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú Î™©Î°ù(ÏÑ†ÏÉùÎãòÏö©), Î†àÍ±∞Ïãú Í±∞Ïùò Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
 */
export const fieldtripsGetFieldtripsHistory = (
  params: FieldtripsGetFieldtripsHistoryParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedFieldtripDto>(
    { url: `/api/fieldtrips/history`, method: 'get', params, signal },
    options,
  )
}

export const getFieldtripsGetFieldtripsHistoryQueryKey = (params: FieldtripsGetFieldtripsHistoryParams) => [
  `/api/fieldtrips/history`,
  ...(params ? [params] : []),
]

export type FieldtripsGetFieldtripsHistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripsGetFieldtripsHistory>>
>
export type FieldtripsGetFieldtripsHistoryQueryError = ErrorType<unknown>

export const useFieldtripsGetFieldtripsHistory = <
  TData = Awaited<ReturnType<typeof fieldtripsGetFieldtripsHistory>>,
  TError = ErrorType<unknown>,
>(
  params: FieldtripsGetFieldtripsHistoryParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsGetFieldtripsHistory>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsGetFieldtripsHistoryQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsGetFieldtripsHistory>>> = ({ signal }) =>
    fieldtripsGetFieldtripsHistory(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsGetFieldtripsHistory>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Í≤∞Í≥ºÎ≥¥Í≥†ÏÑú Î™©Î°ù(ÏÑ†ÏÉùÎãòÏö©), Î†àÍ±∞Ïãú Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
 */
export const fieldtripsGetResultsByTeacher = (
  params: FieldtripsGetResultsByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedFieldtripDto>(
    { url: `/api/fieldtrips/result`, method: 'get', params, signal },
    options,
  )
}

export const getFieldtripsGetResultsByTeacherQueryKey = (params: FieldtripsGetResultsByTeacherParams) => [
  `/api/fieldtrips/result`,
  ...(params ? [params] : []),
]

export type FieldtripsGetResultsByTeacherQueryResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripsGetResultsByTeacher>>
>
export type FieldtripsGetResultsByTeacherQueryError = ErrorType<unknown>

export const useFieldtripsGetResultsByTeacher = <
  TData = Awaited<ReturnType<typeof fieldtripsGetResultsByTeacher>>,
  TError = ErrorType<unknown>,
>(
  params: FieldtripsGetResultsByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsGetResultsByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsGetResultsByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsGetResultsByTeacher>>> = ({ signal }) =>
    fieldtripsGetResultsByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsGetResultsByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * TODO /result/:id endpoint Ï†úÍ±∞ ÌïÑÏöî
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú Îã®Í±¥ Ï°∞Ìöå
 */
export const fieldtripsFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Fieldtrip>({ url: `/api/fieldtrips/${id}`, method: 'get', signal }, options)
}

export const getFieldtripsFindOneQueryKey = (id: number) => [`/api/fieldtrips/${id}`]

export type FieldtripsFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof fieldtripsFindOne>>>
export type FieldtripsFindOneQueryError = ErrorType<void>

export const useFieldtripsFindOne = <TData = Awaited<ReturnType<typeof fieldtripsFindOne>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsFindOne>>> = ({ signal }) =>
    fieldtripsFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú ÏàòÏ†ï
 */
export const fieldtripsUpdate = (
  id: number,
  requestCreateFieldtripDto: RequestCreateFieldtripDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Fieldtrip>(
    {
      url: `/api/fieldtrips/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateFieldtripDto,
    },
    options,
  )
}

export type FieldtripsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof fieldtripsUpdate>>>
export type FieldtripsUpdateMutationBody = RequestCreateFieldtripDto
export type FieldtripsUpdateMutationError = ErrorType<void>

export const useFieldtripsUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripsUpdate>>,
    TError,
    { id: number; data: RequestCreateFieldtripDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripsUpdate>>,
    { id: number; data: RequestCreateFieldtripDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripsUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripsUpdate>>,
    TError,
    { id: number; data: RequestCreateFieldtripDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú ÏÇ≠Ï†ú
 */
export const fieldtripsDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/fieldtrips/${id}`, method: 'delete' }, options)
}

export type FieldtripsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof fieldtripsDelete>>>

export type FieldtripsDeleteMutationError = ErrorType<unknown>

export const useFieldtripsDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof fieldtripsDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof fieldtripsDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return fieldtripsDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof fieldtripsDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú Îã®Í±¥ Ï°∞Ìöå(by UUID)
 */
export const fieldtripsFindOneByUUID = (
  uuid: string,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Fieldtrip>({ url: `/api/fieldtrips/by-uuid/${uuid}`, method: 'get', signal }, options)
}

export const getFieldtripsFindOneByUUIDQueryKey = (uuid: string) => [`/api/fieldtrips/by-uuid/${uuid}`]

export type FieldtripsFindOneByUUIDQueryResult = NonNullable<Awaited<ReturnType<typeof fieldtripsFindOneByUUID>>>
export type FieldtripsFindOneByUUIDQueryError = ErrorType<unknown>

export const useFieldtripsFindOneByUUID = <
  TData = Awaited<ReturnType<typeof fieldtripsFindOneByUUID>>,
  TError = ErrorType<unknown>,
>(
  uuid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsFindOneByUUID>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsFindOneByUUIDQueryKey(uuid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsFindOneByUUID>>> = ({ signal }) =>
    fieldtripsFindOneByUUID(uuid, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsFindOneByUUID>>, TError, TData>(queryKey, queryFn, {
    enabled: !!uuid,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú ÏàòÏ†ï(ÏÑ†ÏÉùÎãòÏö©)
 */
export const fieldtripsUpdateByTeacher = (
  id: number,
  requestUpdateFieldtripDto: RequestUpdateFieldtripDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Fieldtrip>(
    {
      url: `/api/fieldtrips/update-by-teacher/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateFieldtripDto,
    },
    options,
  )
}

export type FieldtripsUpdateByTeacherMutationResult = NonNullable<Awaited<ReturnType<typeof fieldtripsUpdateByTeacher>>>
export type FieldtripsUpdateByTeacherMutationBody = RequestUpdateFieldtripDto
export type FieldtripsUpdateByTeacherMutationError = ErrorType<void>

export const useFieldtripsUpdateByTeacher = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripsUpdateByTeacher>>,
    TError,
    { id: number; data: RequestUpdateFieldtripDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripsUpdateByTeacher>>,
    { id: number; data: RequestUpdateFieldtripDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripsUpdateByTeacher(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripsUpdateByTeacher>>,
    TError,
    { id: number; data: RequestUpdateFieldtripDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú ÏÇ≠Ï†úÏöîÏ≤≠
 */
export const fieldtripsRequestDelete = (
  id: number,
  fieldtripsRequestDeleteBody: unknown,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Fieldtrip>(
    {
      url: `/api/fieldtrips/request-delete/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fieldtripsRequestDeleteBody,
    },
    options,
  )
}

export type FieldtripsRequestDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof fieldtripsRequestDelete>>>
export type FieldtripsRequestDeleteMutationBody = unknown
export type FieldtripsRequestDeleteMutationError = ErrorType<void>

export const useFieldtripsRequestDelete = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripsRequestDelete>>,
    TError,
    { id: number; data: unknown },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripsRequestDelete>>,
    { id: number; data: unknown }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripsRequestDelete(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripsRequestDelete>>,
    TError,
    { id: number; data: unknown },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú Î∞òÎ†§
 */
export const fieldtripsDeny = (
  id: number,
  fieldtripsDenyBody: FieldtripsDenyBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/fieldtrips/deny/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fieldtripsDenyBody,
    },
    options,
  )
}

export type FieldtripsDenyMutationResult = NonNullable<Awaited<ReturnType<typeof fieldtripsDeny>>>
export type FieldtripsDenyMutationBody = FieldtripsDenyBody
export type FieldtripsDenyMutationError = ErrorType<unknown>

export const useFieldtripsDeny = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripsDeny>>,
    TError,
    { id: number; data: FieldtripsDenyBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripsDeny>>,
    { id: number; data: FieldtripsDenyBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripsDeny(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripsDeny>>,
    TError,
    { id: number; data: FieldtripsDenyBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú ÏäπÏù∏(Î∂ÄÎ™®Îãò)
 */
export const fieldtripsApproveByParent = (
  uuid: string,
  fieldtripsApproveByParentBody: FieldtripsApproveByParentBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/fieldtrips/approve-by-parent/${uuid}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fieldtripsApproveByParentBody,
    },
    options,
  )
}

export type FieldtripsApproveByParentMutationResult = NonNullable<Awaited<ReturnType<typeof fieldtripsApproveByParent>>>
export type FieldtripsApproveByParentMutationBody = FieldtripsApproveByParentBody
export type FieldtripsApproveByParentMutationError = ErrorType<unknown>

export const useFieldtripsApproveByParent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripsApproveByParent>>,
    TError,
    { uuid: string; data: FieldtripsApproveByParentBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripsApproveByParent>>,
    { uuid: string; data: FieldtripsApproveByParentBody }
  > = (props) => {
    const { uuid, data } = props ?? {}

    return fieldtripsApproveByParent(uuid, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripsApproveByParent>>,
    TError,
    { uuid: string; data: FieldtripsApproveByParentBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú ÏäπÏù∏(Î∂ÄÎ™®Îãò) from ÏäàÌçºÏä§Ïø®Ïï±
 */
export const fieldtripsApproveByParentApp = (
  id: number,
  fieldtripsApproveByParentAppBody: FieldtripsApproveByParentAppBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/fieldtrips/approve-by-parentapp/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fieldtripsApproveByParentAppBody,
    },
    options,
  )
}

export type FieldtripsApproveByParentAppMutationResult = NonNullable<
  Awaited<ReturnType<typeof fieldtripsApproveByParentApp>>
>
export type FieldtripsApproveByParentAppMutationBody = FieldtripsApproveByParentAppBody
export type FieldtripsApproveByParentAppMutationError = ErrorType<unknown>

export const useFieldtripsApproveByParentApp = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripsApproveByParentApp>>,
    TError,
    { id: number; data: FieldtripsApproveByParentAppBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripsApproveByParentApp>>,
    { id: number; data: FieldtripsApproveByParentAppBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripsApproveByParentApp(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripsApproveByParentApp>>,
    TError,
    { id: number; data: FieldtripsApproveByParentAppBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú ÏäπÏù∏
 */
export const fieldtripsApprove = (
  id: number,
  fieldtripsApproveBody: FieldtripsApproveBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/fieldtrips/approve/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: fieldtripsApproveBody,
    },
    options,
  )
}

export type FieldtripsApproveMutationResult = NonNullable<Awaited<ReturnType<typeof fieldtripsApprove>>>
export type FieldtripsApproveMutationBody = FieldtripsApproveBody
export type FieldtripsApproveMutationError = ErrorType<unknown>

export const useFieldtripsApprove = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fieldtripsApprove>>,
    TError,
    { id: number; data: FieldtripsApproveBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof fieldtripsApprove>>,
    { id: number; data: FieldtripsApproveBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return fieldtripsApprove(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof fieldtripsApprove>>,
    TError,
    { id: number; data: FieldtripsApproveBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠ÏÑú Î∂ÄÎ™®Îãò ÏÇ¨Ïù∏ Ïû¨ÏöîÏ≤≠
 */
export const fieldtripsResend = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<void>({ url: `/api/fieldtrips/resend/${id}`, method: 'get', signal }, options)
}

export const getFieldtripsResendQueryKey = (id: number) => [`/api/fieldtrips/resend/${id}`]

export type FieldtripsResendQueryResult = NonNullable<Awaited<ReturnType<typeof fieldtripsResend>>>
export type FieldtripsResendQueryError = ErrorType<unknown>

export const useFieldtripsResend = <TData = Awaited<ReturnType<typeof fieldtripsResend>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fieldtripsResend>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFieldtripsResendQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fieldtripsResend>>> = ({ signal }) =>
    fieldtripsResend(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fieldtripsResend>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∞ΩÏ≤¥ ÌôúÎèô Í∑∏Î£π Ïó∞Í¥ÄÏ†ïÎ≥¥ Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const groupActivityV3FindByTeacher = (
  params: GroupActivityV3FindByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<GroupActivityV3[]>({ url: `/api/group-activityv3/teacher`, method: 'get', params, signal }, options)
}

export const getGroupActivityV3FindByTeacherQueryKey = (params: GroupActivityV3FindByTeacherParams) => [
  `/api/group-activityv3/teacher`,
  ...(params ? [params] : []),
]

export type GroupActivityV3FindByTeacherQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupActivityV3FindByTeacher>>
>
export type GroupActivityV3FindByTeacherQueryError = ErrorType<void>

export const useGroupActivityV3FindByTeacher = <
  TData = Awaited<ReturnType<typeof groupActivityV3FindByTeacher>>,
  TError = ErrorType<void>,
>(
  params: GroupActivityV3FindByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupActivityV3FindByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupActivityV3FindByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupActivityV3FindByTeacher>>> = ({ signal }) =>
    groupActivityV3FindByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupActivityV3FindByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * ÏÑ†ÏÉùÎãòÏù∏ Í≤ΩÏö∞ ÏÑ†ÏÉùÎãò Í∑∏Î£π, ÌïôÏÉùÏù∏ Í≤ΩÏö∞ ÌïôÏÉù Í∑∏Î£π, Î∂ÄÎ™®ÎãòÏù∏ Í≤ΩÏö∞ ÌïôÏÉùÎì§Ïùò Í∑∏Î£π
 * @summary Í∑∏Î£π Ï°∞Ìöå(ÏÑ†ÏÉùÎãò, Î∂ÄÎ™®, ÌïôÏÉù Í≥µÌÜµ)
 */
export const groupsFindAll = (
  params: GroupsFindAllParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Group[]>({ url: `/api/groups`, method: 'get', params, signal }, options)
}

export const getGroupsFindAllQueryKey = (params: GroupsFindAllParams) => [`/api/groups`, ...(params ? [params] : [])]

export type GroupsFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof groupsFindAll>>>
export type GroupsFindAllQueryError = ErrorType<unknown>

export const useGroupsFindAll = <TData = Awaited<ReturnType<typeof groupsFindAll>>, TError = ErrorType<unknown>>(
  params: GroupsFindAllParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindAll>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindAllQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindAll>>> = ({ signal }) =>
    groupsFindAll(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindAll>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∑∏Î£π Ï∂îÍ∞Ä
 */
export const groupsCreate = (
  requestCreateGroupDto: RequestCreateGroupDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Group>(
    {
      url: `/api/groups`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateGroupDto,
    },
    options,
  )
}

export type GroupsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof groupsCreate>>>
export type GroupsCreateMutationBody = RequestCreateGroupDto
export type GroupsCreateMutationError = ErrorType<ResponseErrorDto>

export const useGroupsCreate = <TError = ErrorType<ResponseErrorDto>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsCreate>>,
    TError,
    { data: RequestCreateGroupDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof groupsCreate>>, { data: RequestCreateGroupDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return groupsCreate(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof groupsCreate>>, TError, { data: RequestCreateGroupDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * ÎÇòÏù¥Ïä§ ÎπÑÍµêÏö© Ï∂úÍ≤∞ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (ÏÑ†ÏÉùÎãòÏö©)
 * @summary Í∑∏Î£π Ï°∞Ìöå(ÎÇòÏù¥Ïä§ ÎπÑÍµêÏö©)
 */
export const groupsFindComparison = (
  params: GroupsFindComparisonParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Group[]>({ url: `/api/groups/comparison`, method: 'get', params, signal }, options)
}

export const getGroupsFindComparisonQueryKey = (params: GroupsFindComparisonParams) => [
  `/api/groups/comparison`,
  ...(params ? [params] : []),
]

export type GroupsFindComparisonQueryResult = NonNullable<Awaited<ReturnType<typeof groupsFindComparison>>>
export type GroupsFindComparisonQueryError = ErrorType<unknown>

export const useGroupsFindComparison = <
  TData = Awaited<ReturnType<typeof groupsFindComparison>>,
  TError = ErrorType<unknown>,
>(
  params: GroupsFindComparisonParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindComparison>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindComparisonQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindComparison>>> = ({ signal }) =>
    groupsFindComparison(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindComparison>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇ¥ ÌïôÍµêÏùò Î™®Îì† KLASS Í∑∏Î£π Ï°∞Ìöå
 */
export const groupsFindAllKlass = (
  params?: GroupsFindAllKlassParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Group[]>({ url: `/api/groups/klass-groups`, method: 'get', params, signal }, options)
}

export const getGroupsFindAllKlassQueryKey = (params?: GroupsFindAllKlassParams) => [
  `/api/groups/klass-groups`,
  ...(params ? [params] : []),
]

export type GroupsFindAllKlassQueryResult = NonNullable<Awaited<ReturnType<typeof groupsFindAllKlass>>>
export type GroupsFindAllKlassQueryError = ErrorType<unknown>

export const useGroupsFindAllKlass = <
  TData = Awaited<ReturnType<typeof groupsFindAllKlass>>,
  TError = ErrorType<unknown>,
>(
  params?: GroupsFindAllKlassParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindAllKlass>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindAllKlassQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindAllKlass>>> = ({ signal }) =>
    groupsFindAllKlass(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindAllKlass>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∑∏Î£π Ï°∞Ìöå(id array)
 */
export const groupsFindAllByIds = (
  params: GroupsFindAllByIdsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseGroupByIdsDto>({ url: `/api/groups/groups-by-ids`, method: 'get', params, signal }, options)
}

export const getGroupsFindAllByIdsQueryKey = (params: GroupsFindAllByIdsParams) => [
  `/api/groups/groups-by-ids`,
  ...(params ? [params] : []),
]

export type GroupsFindAllByIdsQueryResult = NonNullable<Awaited<ReturnType<typeof groupsFindAllByIds>>>
export type GroupsFindAllByIdsQueryError = ErrorType<unknown>

export const useGroupsFindAllByIds = <
  TData = Awaited<ReturnType<typeof groupsFindAllByIds>>,
  TError = ErrorType<unknown>,
>(
  params: GroupsFindAllByIdsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindAllByIds>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindAllByIdsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindAllByIds>>> = ({ signal }) =>
    groupsFindAllByIds(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindAllByIds>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍµêÏùò klass Í∑∏Î£π Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const groupsFindAllKlassBySchool = (
  params?: GroupsFindAllKlassBySchoolParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseGroupDto[]>({ url: `/api/groups/get-klass-by-school`, method: 'get', params, signal }, options)
}

export const getGroupsFindAllKlassBySchoolQueryKey = (params?: GroupsFindAllKlassBySchoolParams) => [
  `/api/groups/get-klass-by-school`,
  ...(params ? [params] : []),
]

export type GroupsFindAllKlassBySchoolQueryResult = NonNullable<Awaited<ReturnType<typeof groupsFindAllKlassBySchool>>>
export type GroupsFindAllKlassBySchoolQueryError = ErrorType<unknown>

export const useGroupsFindAllKlassBySchool = <
  TData = Awaited<ReturnType<typeof groupsFindAllKlassBySchool>>,
  TError = ErrorType<unknown>,
>(
  params?: GroupsFindAllKlassBySchoolParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindAllKlassBySchool>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindAllKlassBySchoolQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindAllKlassBySchool>>> = ({ signal }) =>
    groupsFindAllKlassBySchool(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindAllKlassBySchool>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãòÏùò klass Í∑∏Î£π Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const groupsFindKlassByUser = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseGroupDto[]>({ url: `/api/groups/get-klass-by-user`, method: 'get', signal }, options)
}

export const getGroupsFindKlassByUserQueryKey = () => [`/api/groups/get-klass-by-user`]

export type GroupsFindKlassByUserQueryResult = NonNullable<Awaited<ReturnType<typeof groupsFindKlassByUser>>>
export type GroupsFindKlassByUserQueryError = ErrorType<unknown>

export const useGroupsFindKlassByUser = <
  TData = Awaited<ReturnType<typeof groupsFindKlassByUser>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindKlassByUser>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindKlassByUserQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindKlassByUser>>> = ({ signal }) =>
    groupsFindKlassByUser(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindKlassByUser>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãòÏùò klub Í∑∏Î£π Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const groupsFindKlubBySchoolIdAndUserId = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseGroupDto[]>({ url: `/api/groups/get-klub-by-user`, method: 'get', signal }, options)
}

export const getGroupsFindKlubBySchoolIdAndUserIdQueryKey = () => [`/api/groups/get-klub-by-user`]

export type GroupsFindKlubBySchoolIdAndUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupsFindKlubBySchoolIdAndUserId>>
>
export type GroupsFindKlubBySchoolIdAndUserIdQueryError = ErrorType<unknown>

export const useGroupsFindKlubBySchoolIdAndUserId = <
  TData = Awaited<ReturnType<typeof groupsFindKlubBySchoolIdAndUserId>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindKlubBySchoolIdAndUserId>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindKlubBySchoolIdAndUserIdQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindKlubBySchoolIdAndUserId>>> = ({ signal }) =>
    groupsFindKlubBySchoolIdAndUserId(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindKlubBySchoolIdAndUserId>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ìï¥ÎãπÎÖÑÎèÑ Ï†ÑÏ≤¥ klub Í∑∏Î£π Ï°∞Ìöå
 */
export const groupsFindKlubBySchoolId = (
  params?: GroupsFindKlubBySchoolIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Group[]>({ url: `/api/groups/get-klub-all`, method: 'get', params, signal }, options)
}

export const getGroupsFindKlubBySchoolIdQueryKey = (params?: GroupsFindKlubBySchoolIdParams) => [
  `/api/groups/get-klub-all`,
  ...(params ? [params] : []),
]

export type GroupsFindKlubBySchoolIdQueryResult = NonNullable<Awaited<ReturnType<typeof groupsFindKlubBySchoolId>>>
export type GroupsFindKlubBySchoolIdQueryError = ErrorType<unknown>

export const useGroupsFindKlubBySchoolId = <
  TData = Awaited<ReturnType<typeof groupsFindKlubBySchoolId>>,
  TError = ErrorType<unknown>,
>(
  params?: GroupsFindKlubBySchoolIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindKlubBySchoolId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindKlubBySchoolIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindKlubBySchoolId>>> = ({ signal }) =>
    groupsFindKlubBySchoolId(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindKlubBySchoolId>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãò Í∞úÏù∏Î≥Ñ Î™®Îì† Í≥ºÎ™© Ï°∞Ìöå
 */
export const groupsFindSubjectByUser = (
  params?: GroupsFindSubjectByUserParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseSubjectGroupDto[]>(
    { url: `/api/groups/get-subject-by-user`, method: 'get', params, signal },
    options,
  )
}

export const getGroupsFindSubjectByUserQueryKey = (params?: GroupsFindSubjectByUserParams) => [
  `/api/groups/get-subject-by-user`,
  ...(params ? [params] : []),
]

export type GroupsFindSubjectByUserQueryResult = NonNullable<Awaited<ReturnType<typeof groupsFindSubjectByUser>>>
export type GroupsFindSubjectByUserQueryError = ErrorType<unknown>

export const useGroupsFindSubjectByUser = <
  TData = Awaited<ReturnType<typeof groupsFindSubjectByUser>>,
  TError = ErrorType<unknown>,
>(
  params?: GroupsFindSubjectByUserParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindSubjectByUser>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindSubjectByUserQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindSubjectByUser>>> = ({ signal }) =>
    groupsFindSubjectByUser(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindSubjectByUser>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãòÏùò ÏãúÍ∞ÑÌëú Í∑∏Î£π Ï°∞Ìöå
 */
export const groupsFindLectureGroupsByTeacher = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Group[]>({ url: `/api/groups/lecture`, method: 'get', signal }, options)
}

export const getGroupsFindLectureGroupsByTeacherQueryKey = () => [`/api/groups/lecture`]

export type GroupsFindLectureGroupsByTeacherQueryResult = NonNullable<
  Awaited<ReturnType<typeof groupsFindLectureGroupsByTeacher>>
>
export type GroupsFindLectureGroupsByTeacherQueryError = ErrorType<unknown>

export const useGroupsFindLectureGroupsByTeacher = <
  TData = Awaited<ReturnType<typeof groupsFindLectureGroupsByTeacher>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindLectureGroupsByTeacher>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindLectureGroupsByTeacherQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindLectureGroupsByTeacher>>> = ({ signal }) =>
    groupsFindLectureGroupsByTeacher(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindLectureGroupsByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∑∏Î£π Îã®Í±¥ Ï°∞Ìöå
 */
export const groupsFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Group>({ url: `/api/groups/${id}`, method: 'get', signal }, options)
}

export const getGroupsFindOneQueryKey = (id: number) => [`/api/groups/${id}`]

export type GroupsFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof groupsFindOne>>>
export type GroupsFindOneQueryError = ErrorType<unknown>

export const useGroupsFindOne = <TData = Awaited<ReturnType<typeof groupsFindOne>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof groupsFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGroupsFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof groupsFindOne>>> = ({ signal }) =>
    groupsFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof groupsFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∑∏Î£π ÏàòÏ†ï
 */
export const groupsUpdate = (
  id: number,
  requestCreateGroupDto: RequestCreateGroupDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Group>(
    {
      url: `/api/groups/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateGroupDto,
    },
    options,
  )
}

export type GroupsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof groupsUpdate>>>
export type GroupsUpdateMutationBody = RequestCreateGroupDto
export type GroupsUpdateMutationError = ErrorType<void>

export const useGroupsUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsUpdate>>,
    TError,
    { id: number; data: RequestCreateGroupDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsUpdate>>,
    { id: number; data: RequestCreateGroupDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return groupsUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof groupsUpdate>>,
    TError,
    { id: number; data: RequestCreateGroupDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∑∏Î£π ÏÇ≠Ï†ú
 */
export const groupsDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/groups/${id}`, method: 'delete' }, options)
}

export type GroupsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof groupsDelete>>>

export type GroupsDeleteMutationError = ErrorType<unknown>

export const useGroupsDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof groupsDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof groupsDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return groupsDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof groupsDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏãúÍ∞ÑÌëú v3 ÏûêÎ¶¨Î∞∞ÏπòÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
 */
export const groupsUpdateSeatPosition = (
  id: number,
  groupsUpdateSeatPositionBody: GroupsUpdateSeatPositionBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Group>(
    {
      url: `/api/groups/update-seat-position/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: groupsUpdateSeatPositionBody,
    },
    options,
  )
}

export type GroupsUpdateSeatPositionMutationResult = NonNullable<Awaited<ReturnType<typeof groupsUpdateSeatPosition>>>
export type GroupsUpdateSeatPositionMutationBody = GroupsUpdateSeatPositionBody
export type GroupsUpdateSeatPositionMutationError = ErrorType<unknown>

export const useGroupsUpdateSeatPosition = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof groupsUpdateSeatPosition>>,
    TError,
    { id: number; data: GroupsUpdateSeatPositionBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof groupsUpdateSeatPosition>>,
    { id: number; data: GroupsUpdateSeatPositionBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return groupsUpdateSeatPosition(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof groupsUpdateSeatPosition>>,
    TError,
    { id: number; data: GroupsUpdateSeatPositionBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌååÏùº ÏóÖÎ°úÎìú
 */
export const imagesUploadImage = (
  imagesUploadImageBody: ImagesUploadImageBody,
  params: ImagesUploadImageParams,
  options?: SecondParameter<typeof mutator>,
) => {
  const formData = new FormData()
  if (imagesUploadImageBody.file !== undefined) {
    formData.append('file', imagesUploadImageBody.file)
  }

  return mutator<string>(
    { url: `/api/images`, method: 'post', headers: { 'Content-Type': 'multipart/form-data' }, data: formData, params },
    options,
  )
}

export type ImagesUploadImageMutationResult = NonNullable<Awaited<ReturnType<typeof imagesUploadImage>>>
export type ImagesUploadImageMutationBody = ImagesUploadImageBody
export type ImagesUploadImageMutationError = ErrorType<unknown>

export const useImagesUploadImage = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof imagesUploadImage>>,
    TError,
    { data: ImagesUploadImageBody; params: ImagesUploadImageParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof imagesUploadImage>>,
    { data: ImagesUploadImageBody; params: ImagesUploadImageParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return imagesUploadImage(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof imagesUploadImage>>,
    TError,
    { data: ImagesUploadImageBody; params: ImagesUploadImageParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @deprecated
 * @summary http://localhost:8000/api/docs#/%ED%95%99%EC%83%9D%ED%99%9C%EB%8F%99/StudentActivityController_findByUserId
 */
export const lifeRecordGetLifeActivityByStudent = (
  studentId: number,
  params: LifeRecordGetLifeActivityByStudentParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>({ url: `/api/life_record/student/${studentId}`, method: 'get', params, signal }, options)
}

export const getLifeRecordGetLifeActivityByStudentQueryKey = (
  studentId: number,
  params: LifeRecordGetLifeActivityByStudentParams,
) => [`/api/life_record/student/${studentId}`, ...(params ? [params] : [])]

export type LifeRecordGetLifeActivityByStudentQueryResult = NonNullable<
  Awaited<ReturnType<typeof lifeRecordGetLifeActivityByStudent>>
>
export type LifeRecordGetLifeActivityByStudentQueryError = ErrorType<unknown>

export const useLifeRecordGetLifeActivityByStudent = <
  TData = Awaited<ReturnType<typeof lifeRecordGetLifeActivityByStudent>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  params: LifeRecordGetLifeActivityByStudentParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof lifeRecordGetLifeActivityByStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLifeRecordGetLifeActivityByStudentQueryKey(studentId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof lifeRecordGetLifeActivityByStudent>>> = ({ signal }) =>
    lifeRecordGetLifeActivityByStudent(studentId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof lifeRecordGetLifeActivityByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä Ï¥ùÏ†ïÎ¶¨ Îã§Ïö¥Î°úÎìú
 */
export const lifeRecordDownloadRecordSummary = (
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/life_record/download/summary/${groupId}`, method: 'get', responseType: 'blob', signal },
    options,
  )
}

export const getLifeRecordDownloadRecordSummaryQueryKey = (groupId: number) => [
  `/api/life_record/download/summary/${groupId}`,
]

export type LifeRecordDownloadRecordSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof lifeRecordDownloadRecordSummary>>
>
export type LifeRecordDownloadRecordSummaryQueryError = ErrorType<unknown>

export const useLifeRecordDownloadRecordSummary = <
  TData = Awaited<ReturnType<typeof lifeRecordDownloadRecordSummary>>,
  TError = ErrorType<unknown>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof lifeRecordDownloadRecordSummary>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLifeRecordDownloadRecordSummaryQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof lifeRecordDownloadRecordSummary>>> = ({ signal }) =>
    lifeRecordDownloadRecordSummary(groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof lifeRecordDownloadRecordSummary>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!groupId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä ÌôúÎèôÎÇ¥Ïó≠ Îã§Ïö¥Î°úÎìú
 */
export const lifeRecordDownloadRecordActivity = (
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/life_record/download/activity/${groupId}`, method: 'get', responseType: 'blob', signal },
    options,
  )
}

export const getLifeRecordDownloadRecordActivityQueryKey = (groupId: number) => [
  `/api/life_record/download/activity/${groupId}`,
]

export type LifeRecordDownloadRecordActivityQueryResult = NonNullable<
  Awaited<ReturnType<typeof lifeRecordDownloadRecordActivity>>
>
export type LifeRecordDownloadRecordActivityQueryError = ErrorType<unknown>

export const useLifeRecordDownloadRecordActivity = <
  TData = Awaited<ReturnType<typeof lifeRecordDownloadRecordActivity>>,
  TError = ErrorType<unknown>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof lifeRecordDownloadRecordActivity>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLifeRecordDownloadRecordActivityQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof lifeRecordDownloadRecordActivity>>> = ({ signal }) =>
    lifeRecordDownloadRecordActivity(groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof lifeRecordDownloadRecordActivity>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!groupId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @deprecated
 * @summary http://localhost:8000/api/docs#/%ED%95%99%EC%83%9D%20%EA%B7%B8%EB%A3%B9/StudentGroupsController_findByGroupId
 */
export const lifeRecordGetLifeActivity = (
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>({ url: `/api/life_record/${groupId}`, method: 'get', signal }, options)
}

export const getLifeRecordGetLifeActivityQueryKey = (groupId: number) => [`/api/life_record/${groupId}`]

export type LifeRecordGetLifeActivityQueryResult = NonNullable<Awaited<ReturnType<typeof lifeRecordGetLifeActivity>>>
export type LifeRecordGetLifeActivityQueryError = ErrorType<unknown>

export const useLifeRecordGetLifeActivity = <
  TData = Awaited<ReturnType<typeof lifeRecordGetLifeActivity>>,
  TError = ErrorType<unknown>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof lifeRecordGetLifeActivity>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getLifeRecordGetLifeActivityQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof lifeRecordGetLifeActivity>>> = ({ signal }) =>
    lifeRecordGetLifeActivity(groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof lifeRecordGetLifeActivity>>, TError, TData>(queryKey, queryFn, {
    enabled: !!groupId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ Î™©Î°ù Ï°∞Ìöå
 */
export const newsLettersFindAll = (
  params?: NewsLettersFindAllParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedNewsletterDto>({ url: `/api/newsletters`, method: 'get', params, signal }, options)
}

export const getNewsLettersFindAllQueryKey = (params?: NewsLettersFindAllParams) => [
  `/api/newsletters`,
  ...(params ? [params] : []),
]

export type NewsLettersFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof newsLettersFindAll>>>
export type NewsLettersFindAllQueryError = ErrorType<unknown>

export const useNewsLettersFindAll = <
  TData = Awaited<ReturnType<typeof newsLettersFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: NewsLettersFindAllParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof newsLettersFindAll>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNewsLettersFindAllQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof newsLettersFindAll>>> = ({ signal }) =>
    newsLettersFindAll(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof newsLettersFindAll>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ Ï∂îÍ∞Ä
 */
export const newsLettersCreate = (
  requestCreateNewsletterDto: RequestCreateNewsletterDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Newsletter>(
    {
      url: `/api/newsletters`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateNewsletterDto,
    },
    options,
  )
}

export type NewsLettersCreateMutationResult = NonNullable<Awaited<ReturnType<typeof newsLettersCreate>>>
export type NewsLettersCreateMutationBody = RequestCreateNewsletterDto
export type NewsLettersCreateMutationError = ErrorType<void>

export const useNewsLettersCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newsLettersCreate>>,
    TError,
    { data: RequestCreateNewsletterDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof newsLettersCreate>>,
    { data: RequestCreateNewsletterDto }
  > = (props) => {
    const { data } = props ?? {}

    return newsLettersCreate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof newsLettersCreate>>,
    TError,
    { data: RequestCreateNewsletterDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ ÏïåÎ¶º Ï†ÑÏÜ°, ÎØ∏ÌôïÏù∏ Ï∂îÍ∞Ä
 */
export const newsLettersPostCreateJob = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<boolean>({ url: `/api/newsletters/post-create-job/${id}`, method: 'get', signal }, options)
}

export const getNewsLettersPostCreateJobQueryKey = (id: number) => [`/api/newsletters/post-create-job/${id}`]

export type NewsLettersPostCreateJobQueryResult = NonNullable<Awaited<ReturnType<typeof newsLettersPostCreateJob>>>
export type NewsLettersPostCreateJobQueryError = ErrorType<void>

export const useNewsLettersPostCreateJob = <
  TData = Awaited<ReturnType<typeof newsLettersPostCreateJob>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof newsLettersPostCreateJob>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNewsLettersPostCreateJobQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof newsLettersPostCreateJob>>> = ({ signal }) =>
    newsLettersPostCreateJob(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof newsLettersPostCreateJob>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï†úÎ™© Ï°∞Ìöå (Î©îÏãúÏßÄÏö©)
 */
export const newsLettersFindTitleByIds = (
  params?: NewsLettersFindTitleByIdsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Newsletter[]>({ url: `/api/newsletters/title`, method: 'get', params, signal }, options)
}

export const getNewsLettersFindTitleByIdsQueryKey = (params?: NewsLettersFindTitleByIdsParams) => [
  `/api/newsletters/title`,
  ...(params ? [params] : []),
]

export type NewsLettersFindTitleByIdsQueryResult = NonNullable<Awaited<ReturnType<typeof newsLettersFindTitleByIds>>>
export type NewsLettersFindTitleByIdsQueryError = ErrorType<void>

export const useNewsLettersFindTitleByIds = <
  TData = Awaited<ReturnType<typeof newsLettersFindTitleByIds>>,
  TError = ErrorType<void>,
>(
  params?: NewsLettersFindTitleByIdsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof newsLettersFindTitleByIds>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNewsLettersFindTitleByIdsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof newsLettersFindTitleByIds>>> = ({ signal }) =>
    newsLettersFindTitleByIds(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof newsLettersFindTitleByIds>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ Îã®Í±¥ Ï°∞Ìöå
 */
export const newsLettersFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseNewsletterDetailDto>({ url: `/api/newsletters/${id}`, method: 'get', signal }, options)
}

export const getNewsLettersFindOneQueryKey = (id: number) => [`/api/newsletters/${id}`]

export type NewsLettersFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof newsLettersFindOne>>>
export type NewsLettersFindOneQueryError = ErrorType<unknown>

export const useNewsLettersFindOne = <
  TData = Awaited<ReturnType<typeof newsLettersFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof newsLettersFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNewsLettersFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof newsLettersFindOne>>> = ({ signal }) =>
    newsLettersFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof newsLettersFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * Î∞úÌñâÏïàÎêú ÏÑ§Î¨∏ÏùºÎïåÎßå ÏàòÏ†ïÍ∞ÄÎä•
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ ÏàòÏ†ï
 */
export const newsLettersUpdate = (
  id: number,
  requestUpdateNewsletterDto: RequestUpdateNewsletterDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Newsletter>(
    {
      url: `/api/newsletters/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateNewsletterDto,
    },
    options,
  )
}

export type NewsLettersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof newsLettersUpdate>>>
export type NewsLettersUpdateMutationBody = RequestUpdateNewsletterDto
export type NewsLettersUpdateMutationError = ErrorType<void>

export const useNewsLettersUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newsLettersUpdate>>,
    TError,
    { id: number; data: RequestUpdateNewsletterDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof newsLettersUpdate>>,
    { id: number; data: RequestUpdateNewsletterDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return newsLettersUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof newsLettersUpdate>>,
    TError,
    { id: number; data: RequestUpdateNewsletterDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ ÏÇ≠Ï†ú
 */
export const newsLettersDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/newsletters/${id}`, method: 'delete' }, options)
}

export type NewsLettersDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof newsLettersDelete>>>

export type NewsLettersDeleteMutationError = ErrorType<unknown>

export const useNewsLettersDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof newsLettersDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof newsLettersDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return newsLettersDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof newsLettersDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ ÎßàÍ∞êÍ∏∞Ìïú ÏàòÏ†ï
 */
export const newsLettersUpdateEndAt = (
  id: number,
  newsLettersUpdateEndAtBody: NewsLettersUpdateEndAtBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Newsletter>(
    {
      url: `/api/newsletters/${id}/end_at`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: newsLettersUpdateEndAtBody,
    },
    options,
  )
}

export type NewsLettersUpdateEndAtMutationResult = NonNullable<Awaited<ReturnType<typeof newsLettersUpdateEndAt>>>
export type NewsLettersUpdateEndAtMutationBody = NewsLettersUpdateEndAtBody
export type NewsLettersUpdateEndAtMutationError = ErrorType<void>

export const useNewsLettersUpdateEndAt = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof newsLettersUpdateEndAt>>,
    TError,
    { id: number; data: NewsLettersUpdateEndAtBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof newsLettersUpdateEndAt>>,
    { id: number; data: NewsLettersUpdateEndAtBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return newsLettersUpdateEndAt(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof newsLettersUpdateEndAt>>,
    TError,
    { id: number; data: NewsLettersUpdateEndAtBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ Î∞úÌñâ
 */
export const newsLettersPublish = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<void>({ url: `/api/newsletters/publish/${id}`, method: 'get', signal }, options)
}

export const getNewsLettersPublishQueryKey = (id: number) => [`/api/newsletters/publish/${id}`]

export type NewsLettersPublishQueryResult = NonNullable<Awaited<ReturnType<typeof newsLettersPublish>>>
export type NewsLettersPublishQueryError = ErrorType<unknown>

export const useNewsLettersPublish = <
  TData = Awaited<ReturnType<typeof newsLettersPublish>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof newsLettersPublish>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNewsLettersPublishQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof newsLettersPublish>>> = ({ signal }) =>
    newsLettersPublish(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof newsLettersPublish>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ Ìë∏Ïãú Ïû¨ÏàòÌñâ
 */
export const newsLettersRepublish = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/newsletters/publish/${id}`, method: 'post' }, options)
}

export type NewsLettersRepublishMutationResult = NonNullable<Awaited<ReturnType<typeof newsLettersRepublish>>>

export type NewsLettersRepublishMutationError = ErrorType<unknown>

export const useNewsLettersRepublish = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof newsLettersRepublish>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof newsLettersRepublish>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return newsLettersRepublish(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof newsLettersRepublish>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ ÎØ∏ÌôïÏù∏Ïûê Î™ÖÎã® Îã§Ïö¥Î°úÎìú
 */
export const newsLettersDownloadUnreadStudentList = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/newsletters/unread-student-download/${id}`, method: 'get', responseType: 'blob', signal },
    options,
  )
}

export const getNewsLettersDownloadUnreadStudentListQueryKey = (id: number) => [
  `/api/newsletters/unread-student-download/${id}`,
]

export type NewsLettersDownloadUnreadStudentListQueryResult = NonNullable<
  Awaited<ReturnType<typeof newsLettersDownloadUnreadStudentList>>
>
export type NewsLettersDownloadUnreadStudentListQueryError = ErrorType<unknown>

export const useNewsLettersDownloadUnreadStudentList = <
  TData = Awaited<ReturnType<typeof newsLettersDownloadUnreadStudentList>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof newsLettersDownloadUnreadStudentList>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNewsLettersDownloadUnreadStudentListQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof newsLettersDownloadUnreadStudentList>>> = ({ signal }) =>
    newsLettersDownloadUnreadStudentList(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof newsLettersDownloadUnreadStudentList>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏ Îã§Ïö¥Î°úÎìú
 */
export const newsLettersDownloadSubmitters = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>({ url: `/api/newsletters/download/${id}`, method: 'get', responseType: 'blob', signal }, options)
}

export const getNewsLettersDownloadSubmittersQueryKey = (id: number) => [`/api/newsletters/download/${id}`]

export type NewsLettersDownloadSubmittersQueryResult = NonNullable<
  Awaited<ReturnType<typeof newsLettersDownloadSubmitters>>
>
export type NewsLettersDownloadSubmittersQueryError = ErrorType<unknown>

export const useNewsLettersDownloadSubmitters = <
  TData = Awaited<ReturnType<typeof newsLettersDownloadSubmitters>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof newsLettersDownloadSubmitters>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNewsLettersDownloadSubmittersQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof newsLettersDownloadSubmitters>>> = ({ signal }) =>
    newsLettersDownloadSubmitters(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof newsLettersDownloadSubmitters>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇòÏù¥Ïä§ ÎπÑÍµê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
 */
export const niceComparisonsFindOne = (
  params: NiceComparisonsFindOneParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<NiceComparison>({ url: `/api/nice-comparison/one`, method: 'get', params, signal }, options)
}

export const getNiceComparisonsFindOneQueryKey = (params: NiceComparisonsFindOneParams) => [
  `/api/nice-comparison/one`,
  ...(params ? [params] : []),
]

export type NiceComparisonsFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof niceComparisonsFindOne>>>
export type NiceComparisonsFindOneQueryError = ErrorType<void>

export const useNiceComparisonsFindOne = <
  TData = Awaited<ReturnType<typeof niceComparisonsFindOne>>,
  TError = ErrorType<void>,
>(
  params: NiceComparisonsFindOneParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof niceComparisonsFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNiceComparisonsFindOneQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof niceComparisonsFindOne>>> = ({ signal }) =>
    niceComparisonsFindOne(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof niceComparisonsFindOne>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇòÏù¥Ïä§ ÎπÑÍµê Ï†ïÎ≥¥ Î¶¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞
 */
export const niceComparisonsFindAll = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<NiceComparison[]>({ url: `/api/nice-comparison`, method: 'get', signal }, options)
}

export const getNiceComparisonsFindAllQueryKey = () => [`/api/nice-comparison`]

export type NiceComparisonsFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof niceComparisonsFindAll>>>
export type NiceComparisonsFindAllQueryError = ErrorType<void>

export const useNiceComparisonsFindAll = <
  TData = Awaited<ReturnType<typeof niceComparisonsFindAll>>,
  TError = ErrorType<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof niceComparisonsFindAll>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNiceComparisonsFindAllQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof niceComparisonsFindAll>>> = ({ signal }) =>
    niceComparisonsFindAll(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof niceComparisonsFindAll>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇòÏù¥Ïä§ ÎπÑÍµê Ï∂îÍ∞Ä
 */
export const niceComparisonsCreate = (
  requestCreateNiceComparisonDto: RequestCreateNiceComparisonDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<NiceComparison>(
    {
      url: `/api/nice-comparison`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateNiceComparisonDto,
    },
    options,
  )
}

export type NiceComparisonsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof niceComparisonsCreate>>>
export type NiceComparisonsCreateMutationBody = RequestCreateNiceComparisonDto
export type NiceComparisonsCreateMutationError = ErrorType<void>

export const useNiceComparisonsCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof niceComparisonsCreate>>,
    TError,
    { data: RequestCreateNiceComparisonDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof niceComparisonsCreate>>,
    { data: RequestCreateNiceComparisonDto }
  > = (props) => {
    const { data } = props ?? {}

    return niceComparisonsCreate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof niceComparisonsCreate>>,
    TError,
    { data: RequestCreateNiceComparisonDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÎÇòÏù¥Ïä§ ÎπÑÍµê Ï∂îÍ∞Ä
 */
export const niceComparisonsUpdate = (
  id: number,
  requestUpdateNiceComparisonDto: RequestUpdateNiceComparisonDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<NiceComparison>(
    {
      url: `/api/nice-comparison/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateNiceComparisonDto,
    },
    options,
  )
}

export type NiceComparisonsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof niceComparisonsUpdate>>>
export type NiceComparisonsUpdateMutationBody = RequestUpdateNiceComparisonDto
export type NiceComparisonsUpdateMutationError = ErrorType<void>

export const useNiceComparisonsUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof niceComparisonsUpdate>>,
    TError,
    { id: number; data: RequestUpdateNiceComparisonDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof niceComparisonsUpdate>>,
    { id: number; data: RequestUpdateNiceComparisonDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return niceComparisonsUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof niceComparisonsUpdate>>,
    TError,
    { id: number; data: RequestUpdateNiceComparisonDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÎÇòÏù¥Ïä§ ÎπÑÍµê ÏÇ≠Ï†ú
 */
export const niceComparisonsDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/nice-comparison/${id}`, method: 'delete' }, options)
}

export type NiceComparisonsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof niceComparisonsDelete>>>

export type NiceComparisonsDeleteMutationError = ErrorType<unknown>

export const useNiceComparisonsDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof niceComparisonsDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof niceComparisonsDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return niceComparisonsDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof niceComparisonsDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Î™©Î°ù Ï°∞Ìöå
 */
export const noticesFindAll = (
  params?: NoticesFindAllParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedNoticeDto>({ url: `/api/notices`, method: 'get', params, signal }, options)
}

export const getNoticesFindAllQueryKey = (params?: NoticesFindAllParams) => [
  `/api/notices`,
  ...(params ? [params] : []),
]

export type NoticesFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof noticesFindAll>>>
export type NoticesFindAllQueryError = ErrorType<unknown>

export const useNoticesFindAll = <TData = Awaited<ReturnType<typeof noticesFindAll>>, TError = ErrorType<unknown>>(
  params?: NoticesFindAllParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof noticesFindAll>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNoticesFindAllQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof noticesFindAll>>> = ({ signal }) =>
    noticesFindAll(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof noticesFindAll>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï∂îÍ∞Ä
 */
export const noticesCreate = (
  requestCreateNoticeDto: RequestCreateNoticeDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Notice>(
    {
      url: `/api/notices`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateNoticeDto,
    },
    options,
  )
}

export type NoticesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof noticesCreate>>>
export type NoticesCreateMutationBody = RequestCreateNoticeDto
export type NoticesCreateMutationError = ErrorType<void>

export const useNoticesCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof noticesCreate>>,
    TError,
    { data: RequestCreateNoticeDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof noticesCreate>>, { data: RequestCreateNoticeDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return noticesCreate(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof noticesCreate>>, TError, { data: RequestCreateNoticeDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏïåÎ¶º Ï†ÑÏÜ°, ÎØ∏ÌôïÏù∏ Ï∂îÍ∞Ä
 */
export const noticesPostCreateJob = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<boolean>({ url: `/api/notices/post-create-job/${id}`, method: 'get', signal }, options)
}

export const getNoticesPostCreateJobQueryKey = (id: number) => [`/api/notices/post-create-job/${id}`]

export type NoticesPostCreateJobQueryResult = NonNullable<Awaited<ReturnType<typeof noticesPostCreateJob>>>
export type NoticesPostCreateJobQueryError = ErrorType<void>

export const useNoticesPostCreateJob = <
  TData = Awaited<ReturnType<typeof noticesPostCreateJob>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof noticesPostCreateJob>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNoticesPostCreateJobQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof noticesPostCreateJob>>> = ({ signal }) =>
    noticesPostCreateJob(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof noticesPostCreateJob>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï†úÎ™© Ï°∞Ìöå (Î©îÏãúÏßÄÏö©)
 */
export const noticesFindTitleByIds = (
  params?: NoticesFindTitleByIdsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Notice[]>({ url: `/api/notices/title`, method: 'get', params, signal }, options)
}

export const getNoticesFindTitleByIdsQueryKey = (params?: NoticesFindTitleByIdsParams) => [
  `/api/notices/title`,
  ...(params ? [params] : []),
]

export type NoticesFindTitleByIdsQueryResult = NonNullable<Awaited<ReturnType<typeof noticesFindTitleByIds>>>
export type NoticesFindTitleByIdsQueryError = ErrorType<void>

export const useNoticesFindTitleByIds = <
  TData = Awaited<ReturnType<typeof noticesFindTitleByIds>>,
  TError = ErrorType<void>,
>(
  params?: NoticesFindTitleByIdsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof noticesFindTitleByIds>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNoticesFindTitleByIdsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof noticesFindTitleByIds>>> = ({ signal }) =>
    noticesFindTitleByIds(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof noticesFindTitleByIds>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Îã®Í±¥ Ï°∞Ìöå
 */
export const noticesFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Notice>({ url: `/api/notices/${id}`, method: 'get', signal }, options)
}

export const getNoticesFindOneQueryKey = (id: number) => [`/api/notices/${id}`]

export type NoticesFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof noticesFindOne>>>
export type NoticesFindOneQueryError = ErrorType<unknown>

export const useNoticesFindOne = <TData = Awaited<ReturnType<typeof noticesFindOne>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof noticesFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNoticesFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof noticesFindOne>>> = ({ signal }) =>
    noticesFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof noticesFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏàòÏ†ï
 */
export const noticesUpdate = (
  id: number,
  requestCreateNoticeDto: RequestCreateNoticeDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Notice>(
    {
      url: `/api/notices/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateNoticeDto,
    },
    options,
  )
}

export type NoticesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof noticesUpdate>>>
export type NoticesUpdateMutationBody = RequestCreateNoticeDto
export type NoticesUpdateMutationError = ErrorType<void>

export const useNoticesUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof noticesUpdate>>,
    TError,
    { id: number; data: RequestCreateNoticeDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof noticesUpdate>>,
    { id: number; data: RequestCreateNoticeDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return noticesUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof noticesUpdate>>,
    TError,
    { id: number; data: RequestCreateNoticeDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏÇ≠Ï†ú
 */
export const noticesDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/notices/${id}`, method: 'delete' }, options)
}

export type NoticesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof noticesDelete>>>

export type NoticesDeleteMutationError = ErrorType<unknown>

export const useNoticesDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof noticesDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof noticesDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return noticesDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof noticesDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏïåÎ¶º ÏùΩÏùå Ï≤òÎ¶¨
 */
export const notificationLogRead = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<NotificationLog>({ url: `/api/notification-logs/${id}`, method: 'patch' }, options)
}

export type NotificationLogReadMutationResult = NonNullable<Awaited<ReturnType<typeof notificationLogRead>>>

export type NotificationLogReadMutationError = ErrorType<unknown>

export const useNotificationLogRead = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof notificationLogRead>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof notificationLogRead>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return notificationLogRead(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof notificationLogRead>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏµúÍ∑º ÏùΩÏßÄ ÏïäÏùÄ ÏïåÎ¶º
 */
export const notificationLogFindRecent = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<NotificationLog>({ url: `/api/notification-logs/recent`, method: 'get', signal }, options)
}

export const getNotificationLogFindRecentQueryKey = () => [`/api/notification-logs/recent`]

export type NotificationLogFindRecentQueryResult = NonNullable<Awaited<ReturnType<typeof notificationLogFindRecent>>>
export type NotificationLogFindRecentQueryError = ErrorType<unknown>

export const useNotificationLogFindRecent = <
  TData = Awaited<ReturnType<typeof notificationLogFindRecent>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof notificationLogFindRecent>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNotificationLogFindRecentQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof notificationLogFindRecent>>> = ({ signal }) =>
    notificationLogFindRecent(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof notificationLogFindRecent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏïåÎ¶º Î°úÍ∑∏ Î™©Î°ù
 */
export const notificationLogFindAll = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<NotificationLog[]>({ url: `/api/notification-logs`, method: 'get', signal }, options)
}

export const getNotificationLogFindAllQueryKey = () => [`/api/notification-logs`]

export type NotificationLogFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof notificationLogFindAll>>>
export type NotificationLogFindAllQueryError = ErrorType<unknown>

export const useNotificationLogFindAll = <
  TData = Awaited<ReturnType<typeof notificationLogFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof notificationLogFindAll>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNotificationLogFindAllQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof notificationLogFindAll>>> = ({ signal }) =>
    notificationLogFindAll(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof notificationLogFindAll>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇ¥ ÏïåÎ¶º ÏÑ§Ï†ï Ï°∞Ìöå
 */
export const notificationSettingsGetMine = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<NotificationSetting>({ url: `/api/notification-settings/mine`, method: 'get', signal }, options)
}

export const getNotificationSettingsGetMineQueryKey = () => [`/api/notification-settings/mine`]

export type NotificationSettingsGetMineQueryResult = NonNullable<
  Awaited<ReturnType<typeof notificationSettingsGetMine>>
>
export type NotificationSettingsGetMineQueryError = ErrorType<unknown>

export const useNotificationSettingsGetMine = <
  TData = Awaited<ReturnType<typeof notificationSettingsGetMine>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof notificationSettingsGetMine>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getNotificationSettingsGetMineQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof notificationSettingsGetMine>>> = ({ signal }) =>
    notificationSettingsGetMine(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof notificationSettingsGetMine>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏïåÎ¶º Ïó¨Î∂Ä Ï°∞Ìöå
 */
export const notificationSettingsNotificationCheck = (
  requestNotificationCheckDto: RequestNotificationCheckDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseNotificationCheckDto>(
    {
      url: `/api/notification-settings/notification-check`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestNotificationCheckDto,
    },
    options,
  )
}

export type NotificationSettingsNotificationCheckMutationResult = NonNullable<
  Awaited<ReturnType<typeof notificationSettingsNotificationCheck>>
>
export type NotificationSettingsNotificationCheckMutationBody = RequestNotificationCheckDto
export type NotificationSettingsNotificationCheckMutationError = ErrorType<void>

export const useNotificationSettingsNotificationCheck = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notificationSettingsNotificationCheck>>,
    TError,
    { data: RequestNotificationCheckDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notificationSettingsNotificationCheck>>,
    { data: RequestNotificationCheckDto }
  > = (props) => {
    const { data } = props ?? {}

    return notificationSettingsNotificationCheck(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof notificationSettingsNotificationCheck>>,
    TError,
    { data: RequestNotificationCheckDto },
    TContext
  >(mutationFn, mutationOptions)
}

export const notificationSettingsUpdate = (
  id: number,
  requestUpdateNotificationSettingDto: RequestUpdateNotificationSettingDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/notification-settings/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateNotificationSettingDto,
    },
    options,
  )
}

export type NotificationSettingsUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof notificationSettingsUpdate>>
>
export type NotificationSettingsUpdateMutationBody = RequestUpdateNotificationSettingDto
export type NotificationSettingsUpdateMutationError = ErrorType<unknown>

export const useNotificationSettingsUpdate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof notificationSettingsUpdate>>,
    TError,
    { id: number; data: RequestUpdateNotificationSettingDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof notificationSettingsUpdate>>,
    { id: number; data: RequestUpdateNotificationSettingDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return notificationSettingsUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof notificationSettingsUpdate>>,
    TError,
    { id: number; data: RequestUpdateNotificationSettingDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏùºÎ∞ò OTP Î∞úÏÜ°
 */
export const otpSendPost = (otpSendPostBody: OtpSendPostBody, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean | void>(
    { url: `/api/otp/send`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: otpSendPostBody },
    options,
  )
}

export type OtpSendPostMutationResult = NonNullable<Awaited<ReturnType<typeof otpSendPost>>>
export type OtpSendPostMutationBody = OtpSendPostBody
export type OtpSendPostMutationError = ErrorType<unknown>

export const useOtpSendPost = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof otpSendPost>>, TError, { data: OtpSendPostBody }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof otpSendPost>>, { data: OtpSendPostBody }> = (props) => {
    const { data } = props ?? {}

    return otpSendPost(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof otpSendPost>>, TError, { data: OtpSendPostBody }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ïú†Ï†Ä 2Ï∞®Ïù∏Ï¶ù OTP Î∞úÏÜ°
 */
export const otpSendPostAuth = (
  otpSendPostAuthBody: OtpSendPostAuthBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean | void>(
    {
      url: `/api/otp/send/auth`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: otpSendPostAuthBody,
    },
    options,
  )
}

export type OtpSendPostAuthMutationResult = NonNullable<Awaited<ReturnType<typeof otpSendPostAuth>>>
export type OtpSendPostAuthMutationBody = OtpSendPostAuthBody
export type OtpSendPostAuthMutationError = ErrorType<unknown>

export const useOtpSendPostAuth = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otpSendPostAuth>>,
    TError,
    { data: OtpSendPostAuthBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof otpSendPostAuth>>, { data: OtpSendPostAuthBody }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return otpSendPostAuth(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof otpSendPostAuth>>, TError, { data: OtpSendPostAuthBody }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary OTP ÌôïÏù∏
 */
export const otpUserSearchPost = (
  otpUserSearchPostBody: OtpUserSearchPostBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean | void>(
    {
      url: `/api/otp/check`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: otpUserSearchPostBody,
    },
    options,
  )
}

export type OtpUserSearchPostMutationResult = NonNullable<Awaited<ReturnType<typeof otpUserSearchPost>>>
export type OtpUserSearchPostMutationBody = OtpUserSearchPostBody
export type OtpUserSearchPostMutationError = ErrorType<unknown>

export const useOtpUserSearchPost = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otpUserSearchPost>>,
    TError,
    { data: OtpUserSearchPostBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof otpUserSearchPost>>, { data: OtpUserSearchPostBody }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return otpUserSearchPost(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof otpUserSearchPost>>, TError, { data: OtpUserSearchPostBody }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ïú†Ï†Ä 2Ï∞®Ïù∏Ï¶ù OTP ÌôïÏù∏
 */
export const otpUserSearchPostAuth = (
  otpUserSearchPostAuthBody: OtpUserSearchPostAuthBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean | void>(
    {
      url: `/api/otp/check/auth`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: otpUserSearchPostAuthBody,
    },
    options,
  )
}

export type OtpUserSearchPostAuthMutationResult = NonNullable<Awaited<ReturnType<typeof otpUserSearchPostAuth>>>
export type OtpUserSearchPostAuthMutationBody = OtpUserSearchPostAuthBody
export type OtpUserSearchPostAuthMutationError = ErrorType<unknown>

export const useOtpUserSearchPostAuth = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof otpUserSearchPostAuth>>,
    TError,
    { data: OtpUserSearchPostAuthBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof otpUserSearchPostAuth>>,
    { data: OtpUserSearchPostAuthBody }
  > = (props) => {
    const { data } = props ?? {}

    return otpUserSearchPostAuth(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof otpUserSearchPostAuth>>,
    TError,
    { data: OtpUserSearchPostAuthBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôïÏù∏Ï¶ù Î™©Î°ù(ÏÑ†ÏÉùÎãòÏö©), Î†àÍ±∞Ïãú Í±∞Ïùò Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
 */
export const outingsFindAllByTeacher = (
  params: OutingsFindAllByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedOutingDto>({ url: `/api/outings/teacher`, method: 'get', params, signal }, options)
}

export const getOutingsFindAllByTeacherQueryKey = (params: OutingsFindAllByTeacherParams) => [
  `/api/outings/teacher`,
  ...(params ? [params] : []),
]

export type OutingsFindAllByTeacherQueryResult = NonNullable<Awaited<ReturnType<typeof outingsFindAllByTeacher>>>
export type OutingsFindAllByTeacherQueryError = ErrorType<unknown>

export const useOutingsFindAllByTeacher = <
  TData = Awaited<ReturnType<typeof outingsFindAllByTeacher>>,
  TError = ErrorType<unknown>,
>(
  params: OutingsFindAllByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof outingsFindAllByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOutingsFindAllByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof outingsFindAllByTeacher>>> = ({ signal }) =>
    outingsFindAllByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof outingsFindAllByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∂úÍ≤∞ÏÑúÎ•òÍ¥ÄÎ¶¨ ÌôïÏù∏Ï¶ù Î™©Î°ù(ÏÑ†ÏÉùÎãòÏö©)
 */
export const outingsFindHistory = (
  params: OutingsFindHistoryParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedOutingDto>({ url: `/api/outings/history`, method: 'get', params, signal }, options)
}

export const getOutingsFindHistoryQueryKey = (params: OutingsFindHistoryParams) => [
  `/api/outings/history`,
  ...(params ? [params] : []),
]

export type OutingsFindHistoryQueryResult = NonNullable<Awaited<ReturnType<typeof outingsFindHistory>>>
export type OutingsFindHistoryQueryError = ErrorType<unknown>

export const useOutingsFindHistory = <
  TData = Awaited<ReturnType<typeof outingsFindHistory>>,
  TError = ErrorType<unknown>,
>(
  params: OutingsFindHistoryParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof outingsFindHistory>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOutingsFindHistoryQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof outingsFindHistory>>> = ({ signal }) =>
    outingsFindHistory(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof outingsFindHistory>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôïÏù∏Ï¶ùÌòÑÌô© ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú(ÏÑ†ÏÉùÎãòÏö©)
 */
export const outingsDownloadOutings = (
  params: OutingsDownloadOutingsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>({ url: `/api/outings/download`, method: 'get', params, responseType: 'blob', signal }, options)
}

export const getOutingsDownloadOutingsQueryKey = (params: OutingsDownloadOutingsParams) => [
  `/api/outings/download`,
  ...(params ? [params] : []),
]

export type OutingsDownloadOutingsQueryResult = NonNullable<Awaited<ReturnType<typeof outingsDownloadOutings>>>
export type OutingsDownloadOutingsQueryError = ErrorType<unknown>

export const useOutingsDownloadOutings = <
  TData = Awaited<ReturnType<typeof outingsDownloadOutings>>,
  TError = ErrorType<unknown>,
>(
  params: OutingsDownloadOutingsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof outingsDownloadOutings>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOutingsDownloadOutingsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof outingsDownloadOutings>>> = ({ signal }) =>
    outingsDownloadOutings(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof outingsDownloadOutings>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôïÏù∏Ï¶ù Î™©Î°ù(ÌïôÏÉùÏö©)
 */
export const outingsFindAllByStudent = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Outing[]>({ url: `/api/outings/list-by-student`, method: 'get', signal }, options)
}

export const getOutingsFindAllByStudentQueryKey = () => [`/api/outings/list-by-student`]

export type OutingsFindAllByStudentQueryResult = NonNullable<Awaited<ReturnType<typeof outingsFindAllByStudent>>>
export type OutingsFindAllByStudentQueryError = ErrorType<unknown>

export const useOutingsFindAllByStudent = <
  TData = Awaited<ReturnType<typeof outingsFindAllByStudent>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof outingsFindAllByStudent>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOutingsFindAllByStudentQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof outingsFindAllByStudent>>> = ({ signal }) =>
    outingsFindAllByStudent(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof outingsFindAllByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôïÏù∏Ï¶ù Îã®Í±¥ Ï°∞Ìöå
 */
export const outingsFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseCreateOutingDto>({ url: `/api/outings/${id}`, method: 'get', signal }, options)
}

export const getOutingsFindOneQueryKey = (id: number) => [`/api/outings/${id}`]

export type OutingsFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof outingsFindOne>>>
export type OutingsFindOneQueryError = ErrorType<void>

export const useOutingsFindOne = <TData = Awaited<ReturnType<typeof outingsFindOne>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof outingsFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOutingsFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof outingsFindOne>>> = ({ signal }) =>
    outingsFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof outingsFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôïÏù∏Ï¶ù ÏàòÏ†ï
 */
export const outingsUpdate = (
  id: number,
  requestCreateOutingDto: RequestCreateOutingDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Outing>(
    {
      url: `/api/outings/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateOutingDto,
    },
    options,
  )
}

export type OutingsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof outingsUpdate>>>
export type OutingsUpdateMutationBody = RequestCreateOutingDto
export type OutingsUpdateMutationError = ErrorType<void>

export const useOutingsUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof outingsUpdate>>,
    TError,
    { id: number; data: RequestCreateOutingDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof outingsUpdate>>,
    { id: number; data: RequestCreateOutingDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return outingsUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof outingsUpdate>>,
    TError,
    { id: number; data: RequestCreateOutingDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôïÏù∏Ï¶ù ÏÇ≠Ï†ú
 */
export const outingsDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/outings/${id}`, method: 'delete' }, options)
}

export type OutingsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof outingsDelete>>>

export type OutingsDeleteMutationError = ErrorType<unknown>

export const useOutingsDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof outingsDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof outingsDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return outingsDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof outingsDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌôïÏù∏Ï¶ù Ï∂îÍ∞Ä
 */
export const outingsCreate = (
  requestCreateOutingDto: RequestCreateOutingDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseCreateOutingDto>(
    {
      url: `/api/outings`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateOutingDto,
    },
    options,
  )
}

export type OutingsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof outingsCreate>>>
export type OutingsCreateMutationBody = RequestCreateOutingDto
export type OutingsCreateMutationError = ErrorType<void>

export const useOutingsCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof outingsCreate>>,
    TError,
    { data: RequestCreateOutingDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof outingsCreate>>, { data: RequestCreateOutingDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return outingsCreate(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof outingsCreate>>, TError, { data: RequestCreateOutingDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌôïÏù∏Ï¶ù ÏàòÏ†ï(ÏÑ†ÏÉùÎãòÏö©)
 */
export const outingsUpdateByTeacher = (
  id: number,
  requestUpdateOutingDto: RequestUpdateOutingDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Outing>(
    {
      url: `/api/outings/update-by-teacher/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateOutingDto,
    },
    options,
  )
}

export type OutingsUpdateByTeacherMutationResult = NonNullable<Awaited<ReturnType<typeof outingsUpdateByTeacher>>>
export type OutingsUpdateByTeacherMutationBody = RequestUpdateOutingDto
export type OutingsUpdateByTeacherMutationError = ErrorType<void>

export const useOutingsUpdateByTeacher = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof outingsUpdateByTeacher>>,
    TError,
    { id: number; data: RequestUpdateOutingDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof outingsUpdateByTeacher>>,
    { id: number; data: RequestUpdateOutingDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return outingsUpdateByTeacher(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof outingsUpdateByTeacher>>,
    TError,
    { id: number; data: RequestUpdateOutingDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôïÏù∏Ï¶ù ÏÇ≠Ï†úÏöîÏ≤≠
 */
export const outingsRequestDelete = (
  id: number,
  outingsRequestDeleteBody: OutingsRequestDeleteBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Outing>(
    {
      url: `/api/outings/request-delete/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: outingsRequestDeleteBody,
    },
    options,
  )
}

export type OutingsRequestDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof outingsRequestDelete>>>
export type OutingsRequestDeleteMutationBody = OutingsRequestDeleteBody
export type OutingsRequestDeleteMutationError = ErrorType<void>

export const useOutingsRequestDelete = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof outingsRequestDelete>>,
    TError,
    { id: number; data: OutingsRequestDeleteBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof outingsRequestDelete>>,
    { id: number; data: OutingsRequestDeleteBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return outingsRequestDelete(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof outingsRequestDelete>>,
    TError,
    { id: number; data: OutingsRequestDeleteBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôïÏù∏Ï¶ù Î∞òÎ†§
 */
export const outingsDeny = (
  id: number,
  outingsDenyBody: OutingsDenyBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/outings/deny/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: outingsDenyBody,
    },
    options,
  )
}

export type OutingsDenyMutationResult = NonNullable<Awaited<ReturnType<typeof outingsDeny>>>
export type OutingsDenyMutationBody = OutingsDenyBody
export type OutingsDenyMutationError = ErrorType<unknown>

export const useOutingsDeny = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof outingsDeny>>,
    TError,
    { id: number; data: OutingsDenyBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof outingsDeny>>, { id: number; data: OutingsDenyBody }> = (
    props,
  ) => {
    const { id, data } = props ?? {}

    return outingsDeny(id, data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof outingsDeny>>, TError, { id: number; data: OutingsDenyBody }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌôïÏù∏Ï¶ù ÏäπÏù∏
 */
export const outingsApprove = (
  id: number,
  outingsApproveBody: OutingsApproveBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/outings/approve/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: outingsApproveBody,
    },
    options,
  )
}

export type OutingsApproveMutationResult = NonNullable<Awaited<ReturnType<typeof outingsApprove>>>
export type OutingsApproveMutationBody = OutingsApproveBody
export type OutingsApproveMutationError = ErrorType<unknown>

export const useOutingsApprove = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof outingsApprove>>,
    TError,
    { id: number; data: OutingsApproveBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof outingsApprove>>,
    { id: number; data: OutingsApproveBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return outingsApprove(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof outingsApprove>>,
    TError,
    { id: number; data: OutingsApproveBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôïÏù∏Ï¶ù Îã®Í±¥ Ï°∞Ìöå(by UUID)
 */
export const outingsFindOneByUUID = (uuid: string, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<Outing>({ url: `/api/outings/by-uuid/${uuid}`, method: 'get', signal }, options)
}

export const getOutingsFindOneByUUIDQueryKey = (uuid: string) => [`/api/outings/by-uuid/${uuid}`]

export type OutingsFindOneByUUIDQueryResult = NonNullable<Awaited<ReturnType<typeof outingsFindOneByUUID>>>
export type OutingsFindOneByUUIDQueryError = ErrorType<unknown>

export const useOutingsFindOneByUUID = <
  TData = Awaited<ReturnType<typeof outingsFindOneByUUID>>,
  TError = ErrorType<unknown>,
>(
  uuid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof outingsFindOneByUUID>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOutingsFindOneByUUIDQueryKey(uuid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof outingsFindOneByUUID>>> = ({ signal }) =>
    outingsFindOneByUUID(uuid, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof outingsFindOneByUUID>>, TError, TData>(queryKey, queryFn, {
    enabled: !!uuid,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôïÏù∏Ï¶ù ÏäπÏù∏(Î∂ÄÎ™®Îãò) from ÏïåÎ¶ºÌÜ°
 */
export const outingsApproveByParent = (
  uuid: string,
  outingsApproveByParentBody: OutingsApproveByParentBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/outings/approve-by-parent/${uuid}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: outingsApproveByParentBody,
    },
    options,
  )
}

export type OutingsApproveByParentMutationResult = NonNullable<Awaited<ReturnType<typeof outingsApproveByParent>>>
export type OutingsApproveByParentMutationBody = OutingsApproveByParentBody
export type OutingsApproveByParentMutationError = ErrorType<unknown>

export const useOutingsApproveByParent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof outingsApproveByParent>>,
    TError,
    { uuid: string; data: OutingsApproveByParentBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof outingsApproveByParent>>,
    { uuid: string; data: OutingsApproveByParentBody }
  > = (props) => {
    const { uuid, data } = props ?? {}

    return outingsApproveByParent(uuid, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof outingsApproveByParent>>,
    TError,
    { uuid: string; data: OutingsApproveByParentBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôïÏù∏Ï¶ù ÏäπÏù∏(Î∂ÄÎ™®Îãò) from ÏäàÌçºÏä§Ïø®Ïï±
 */
export const outingsApproveByParentApp = (
  id: number,
  outingsApproveByParentAppBody: OutingsApproveByParentAppBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/outings/approve-by-parentapp/${id}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: outingsApproveByParentAppBody,
    },
    options,
  )
}

export type OutingsApproveByParentAppMutationResult = NonNullable<Awaited<ReturnType<typeof outingsApproveByParentApp>>>
export type OutingsApproveByParentAppMutationBody = OutingsApproveByParentAppBody
export type OutingsApproveByParentAppMutationError = ErrorType<unknown>

export const useOutingsApproveByParentApp = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof outingsApproveByParentApp>>,
    TError,
    { id: number; data: OutingsApproveByParentAppBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof outingsApproveByParentApp>>,
    { id: number; data: OutingsApproveByParentAppBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return outingsApproveByParentApp(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof outingsApproveByParentApp>>,
    TError,
    { id: number; data: OutingsApproveByParentAppBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôïÏù∏Ï¶ù Î∂ÄÎ™®Îãò ÏÇ¨Ïù∏ Ïû¨ÏöîÏ≤≠
 */
export const outingsResend = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<void>({ url: `/api/outings/resend/${id}`, method: 'get', signal }, options)
}

export const getOutingsResendQueryKey = (id: number) => [`/api/outings/resend/${id}`]

export type OutingsResendQueryResult = NonNullable<Awaited<ReturnType<typeof outingsResend>>>
export type OutingsResendQueryError = ErrorType<unknown>

export const useOutingsResend = <TData = Awaited<ReturnType<typeof outingsResend>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof outingsResend>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getOutingsResendQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof outingsResend>>> = ({ signal }) =>
    outingsResend(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof outingsResend>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const pointLogGet = (
  params: PointLogGetParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<PaginatedPointLog>({ url: `/api/point-logs`, method: 'get', params, signal }, options)
}

export const getPointLogGetQueryKey = (params: PointLogGetParams) => [`/api/point-logs`, ...(params ? [params] : [])]

export type PointLogGetQueryResult = NonNullable<Awaited<ReturnType<typeof pointLogGet>>>
export type PointLogGetQueryError = ErrorType<unknown>

export const usePointLogGet = <TData = Awaited<ReturnType<typeof pointLogGet>>, TError = ErrorType<unknown>>(
  params: PointLogGetParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof pointLogGet>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPointLogGetQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof pointLogGet>>> = ({ signal }) =>
    pointLogGet(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof pointLogGet>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í¥ÄÏ∞∞Í∏∞Î°ù Ï∂îÍ∞Ä
 */
export const recordCreate = (
  recordCreateBody: RecordCreateBody,
  params: RecordCreateParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Record>(
    {
      url: `/api/record`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: recordCreateBody,
      params,
    },
    options,
  )
}

export type RecordCreateMutationResult = NonNullable<Awaited<ReturnType<typeof recordCreate>>>
export type RecordCreateMutationBody = RecordCreateBody
export type RecordCreateMutationError = ErrorType<void>

export const useRecordCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recordCreate>>,
    TError,
    { data: RecordCreateBody; params: RecordCreateParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recordCreate>>,
    { data: RecordCreateBody; params: RecordCreateParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return recordCreate(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof recordCreate>>,
    TError,
    { data: RecordCreateBody; params: RecordCreateParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í¥ÄÏ∞∞Í∏∞Î°ù ÏàòÏ†ï
 */
export const recordUpdate = (
  id: number,
  recordUpdateBody: RecordUpdateBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<UpdateResult>(
    {
      url: `/api/record/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: recordUpdateBody,
    },
    options,
  )
}

export type RecordUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof recordUpdate>>>
export type RecordUpdateMutationBody = RecordUpdateBody
export type RecordUpdateMutationError = ErrorType<void>

export const useRecordUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof recordUpdate>>,
    TError,
    { id: number; data: RecordUpdateBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof recordUpdate>>,
    { id: number; data: RecordUpdateBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return recordUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof recordUpdate>>,
    TError,
    { id: number; data: RecordUpdateBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í¥ÄÏ∞∞Í∏∞Î°ù ÏÇ≠Ï†ú
 */
export const recordDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<Record>({ url: `/api/record/${id}`, method: 'delete' }, options)
}

export type RecordDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof recordDelete>>>

export type RecordDeleteMutationError = ErrorType<void>

export const useRecordDelete = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof recordDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof recordDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return recordDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof recordDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï∫òÎ¶∞Îçî Î™©Î°ù
 */
export const schedulesFindAll = (
  params: SchedulesFindAllParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseExtendedScheduleDto[]>({ url: `/api/schedules`, method: 'get', params, signal }, options)
}

export const getSchedulesFindAllQueryKey = (params: SchedulesFindAllParams) => [
  `/api/schedules`,
  ...(params ? [params] : []),
]

export type SchedulesFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof schedulesFindAll>>>
export type SchedulesFindAllQueryError = ErrorType<unknown>

export const useSchedulesFindAll = <TData = Awaited<ReturnType<typeof schedulesFindAll>>, TError = ErrorType<unknown>>(
  params: SchedulesFindAllParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof schedulesFindAll>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchedulesFindAllQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesFindAll>>> = ({ signal }) =>
    schedulesFindAll(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schedulesFindAll>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∫òÎ¶∞Îçî Ï∂îÍ∞Ä
 */
export const schedulesCreate = (
  requestCreateExtendedScheduleDto: RequestCreateExtendedScheduleDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseExtendedScheduleDto>(
    {
      url: `/api/schedules`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateExtendedScheduleDto,
    },
    options,
  )
}

export type SchedulesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof schedulesCreate>>>
export type SchedulesCreateMutationBody = RequestCreateExtendedScheduleDto
export type SchedulesCreateMutationError = ErrorType<void>

export const useSchedulesCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schedulesCreate>>,
    TError,
    { data: RequestCreateExtendedScheduleDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schedulesCreate>>,
    { data: RequestCreateExtendedScheduleDto }
  > = (props) => {
    const { data } = props ?? {}

    return schedulesCreate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof schedulesCreate>>,
    TError,
    { data: RequestCreateExtendedScheduleDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌóòÌïôÏäµ Ïã†Ï≤≠Î∂àÍ∞Ä Ï∫òÎ¶∞Îçî Î™©Î°ù
 */
export const schedulesFindRejectSchedule = (
  params: SchedulesFindRejectScheduleParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseBaseScheduleDto[]>({ url: `/api/schedules/reject`, method: 'get', params, signal }, options)
}

export const getSchedulesFindRejectScheduleQueryKey = (params: SchedulesFindRejectScheduleParams) => [
  `/api/schedules/reject`,
  ...(params ? [params] : []),
]

export type SchedulesFindRejectScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof schedulesFindRejectSchedule>>
>
export type SchedulesFindRejectScheduleQueryError = ErrorType<unknown>

export const useSchedulesFindRejectSchedule = <
  TData = Awaited<ReturnType<typeof schedulesFindRejectSchedule>>,
  TError = ErrorType<unknown>,
>(
  params: SchedulesFindRejectScheduleParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof schedulesFindRejectSchedule>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchedulesFindRejectScheduleQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schedulesFindRejectSchedule>>> = ({ signal }) =>
    schedulesFindRejectSchedule(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schedulesFindRejectSchedule>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∫òÎ¶∞Îçî ÏàòÏ†ï
 */
export const schedulesUpdate = (
  id: number,
  requestCreateExtendedScheduleDto: RequestCreateExtendedScheduleDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseExtendedScheduleDto>(
    {
      url: `/api/schedules/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateExtendedScheduleDto,
    },
    options,
  )
}

export type SchedulesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof schedulesUpdate>>>
export type SchedulesUpdateMutationBody = RequestCreateExtendedScheduleDto
export type SchedulesUpdateMutationError = ErrorType<void>

export const useSchedulesUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schedulesUpdate>>,
    TError,
    { id: number; data: RequestCreateExtendedScheduleDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schedulesUpdate>>,
    { id: number; data: RequestCreateExtendedScheduleDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return schedulesUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof schedulesUpdate>>,
    TError,
    { id: number; data: RequestCreateExtendedScheduleDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∫òÎ¶∞Îçî ÏÇ≠Ï†ú
 */
export const schedulesDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/schedules/${id}`, method: 'delete' }, options)
}

export type SchedulesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof schedulesDelete>>>

export type SchedulesDeleteMutationError = ErrorType<unknown>

export const useSchedulesDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof schedulesDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof schedulesDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return schedulesDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof schedulesDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌïôÍµê Î™©Î°ù
 */
export const schoolsFindAll = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<School[]>({ url: `/api/schools`, method: 'get', signal }, options)
}

export const getSchoolsFindAllQueryKey = () => [`/api/schools`]

export type SchoolsFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof schoolsFindAll>>>
export type SchoolsFindAllQueryError = ErrorType<unknown>

export const useSchoolsFindAll = <
  TData = Awaited<ReturnType<typeof schoolsFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof schoolsFindAll>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolsFindAllQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolsFindAll>>> = ({ signal }) =>
    schoolsFindAll(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolsFindAll>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍµê Îã®Í±¥ Ï°∞Ìöå
 */
export const schoolsFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<School>({ url: `/api/schools/${id}`, method: 'get', signal }, options)
}

export const getSchoolsFindOneQueryKey = (id: number) => [`/api/schools/${id}`]

export type SchoolsFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof schoolsFindOne>>>
export type SchoolsFindOneQueryError = ErrorType<unknown>

export const useSchoolsFindOne = <TData = Awaited<ReturnType<typeof schoolsFindOne>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof schoolsFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolsFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolsFindOne>>> = ({ signal }) =>
    schoolsFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolsFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌîºÎìúÎ∞± Ï∂îÍ∞Ä
 */
export const sessionCommentCreate = (
  sessionCommentCreateBody: SessionCommentCreateBody,
  params: SessionCommentCreateParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<SessionComment>(
    {
      url: `/api/session-comment`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: sessionCommentCreateBody,
      params,
    },
    options,
  )
}

export type SessionCommentCreateMutationResult = NonNullable<Awaited<ReturnType<typeof sessionCommentCreate>>>
export type SessionCommentCreateMutationBody = SessionCommentCreateBody
export type SessionCommentCreateMutationError = ErrorType<void>

export const useSessionCommentCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sessionCommentCreate>>,
    TError,
    { data: SessionCommentCreateBody; params: SessionCommentCreateParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sessionCommentCreate>>,
    { data: SessionCommentCreateBody; params: SessionCommentCreateParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return sessionCommentCreate(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof sessionCommentCreate>>,
    TError,
    { data: SessionCommentCreateBody; params: SessionCommentCreateParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌîºÎìúÎ∞± ÏàòÏ†ï
 */
export const sessionCommentUpdate = (
  id: number,
  sessionCommentUpdateBody: SessionCommentUpdateBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<UpdateResult>(
    {
      url: `/api/session-comment/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: sessionCommentUpdateBody,
    },
    options,
  )
}

export type SessionCommentUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof sessionCommentUpdate>>>
export type SessionCommentUpdateMutationBody = SessionCommentUpdateBody
export type SessionCommentUpdateMutationError = ErrorType<void>

export const useSessionCommentUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sessionCommentUpdate>>,
    TError,
    { id: number; data: SessionCommentUpdateBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sessionCommentUpdate>>,
    { id: number; data: SessionCommentUpdateBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return sessionCommentUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof sessionCommentUpdate>>,
    TError,
    { id: number; data: SessionCommentUpdateBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌîºÎìúÎ∞± ÏÇ≠Ï†ú
 */
export const sessionCommentDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<SessionComment>({ url: `/api/session-comment/${id}`, method: 'delete' }, options)
}

export type SessionCommentDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof sessionCommentDelete>>>

export type SessionCommentDeleteMutationError = ErrorType<void>

export const useSessionCommentDelete = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof sessionCommentDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof sessionCommentDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return sessionCommentDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof sessionCommentDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Î©îÏãúÏßÄ Ï†ÑÏÜ°
 */
export const smsSendMessage = (
  requestCreateSmsMessageDto: RequestCreateSmsMessageDto[],
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/sms/send`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateSmsMessageDto,
    },
    options,
  )
}

export type SmsSendMessageMutationResult = NonNullable<Awaited<ReturnType<typeof smsSendMessage>>>
export type SmsSendMessageMutationBody = RequestCreateSmsMessageDto[]
export type SmsSendMessageMutationError = ErrorType<unknown>

export const useSmsSendMessage = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof smsSendMessage>>,
    TError,
    { data: RequestCreateSmsMessageDto[] },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof smsSendMessage>>,
    { data: RequestCreateSmsMessageDto[] }
  > = (props) => {
    const { data } = props ?? {}

    return smsSendMessage(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof smsSendMessage>>,
    TError,
    { data: RequestCreateSmsMessageDto[] },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Î©îÏãúÏßÄ Ï°∞Ìöå
 */
export const smsGetFieldtripsByTeacher = (
  params: SmsGetFieldtripsByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedSmsHistoryDto>({ url: `/api/sms`, method: 'get', params, signal }, options)
}

export const getSmsGetFieldtripsByTeacherQueryKey = (params: SmsGetFieldtripsByTeacherParams) => [
  `/api/sms`,
  ...(params ? [params] : []),
]

export type SmsGetFieldtripsByTeacherQueryResult = NonNullable<Awaited<ReturnType<typeof smsGetFieldtripsByTeacher>>>
export type SmsGetFieldtripsByTeacherQueryError = ErrorType<unknown>

export const useSmsGetFieldtripsByTeacher = <
  TData = Awaited<ReturnType<typeof smsGetFieldtripsByTeacher>>,
  TError = ErrorType<unknown>,
>(
  params: SmsGetFieldtripsByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof smsGetFieldtripsByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSmsGetFieldtripsByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof smsGetFieldtripsByTeacher>>> = ({ signal }) =>
    smsGetFieldtripsByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof smsGetFieldtripsByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î©îÏãúÏßÄ Îã®Í±¥ Ïû¨Ï†ÑÏÜ°
 */
export const smsReSendMessage = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseCreateSmsMessageDto>({ url: `/api/sms/re-send/${id}`, method: 'get', signal }, options)
}

export const getSmsReSendMessageQueryKey = (id: number) => [`/api/sms/re-send/${id}`]

export type SmsReSendMessageQueryResult = NonNullable<Awaited<ReturnType<typeof smsReSendMessage>>>
export type SmsReSendMessageQueryError = ErrorType<void>

export const useSmsReSendMessage = <TData = Awaited<ReturnType<typeof smsReSendMessage>>, TError = ErrorType<void>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof smsReSendMessage>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSmsReSendMessageQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof smsReSendMessage>>> = ({ signal }) =>
    smsReSendMessage(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof smsReSendMessage>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇ®ÏùÄ ÌöüÏàò Ï°∞Ìöå
 */
export const smsRemainSmsCredit = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<SmsCreditRemain>({ url: `/api/sms/remain-sms-credit`, method: 'get', signal }, options)
}

export const getSmsRemainSmsCreditQueryKey = () => [`/api/sms/remain-sms-credit`]

export type SmsRemainSmsCreditQueryResult = NonNullable<Awaited<ReturnType<typeof smsRemainSmsCredit>>>
export type SmsRemainSmsCreditQueryError = ErrorType<unknown>

export const useSmsRemainSmsCredit = <
  TData = Awaited<ReturnType<typeof smsRemainSmsCredit>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof smsRemainSmsCredit>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSmsRemainSmsCreditQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof smsRemainSmsCredit>>> = ({ signal }) =>
    smsRemainSmsCredit(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof smsRemainSmsCredit>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÌôúÎèôÎåìÍ∏Ä Î™©Î°ù Ï°∞Ìöå
 */
export const studentActivityCommentFindAll = (
  studentActivityId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Comment[]>(
    { url: `/api/student-activity-comment/${studentActivityId}`, method: 'get', signal },
    options,
  )
}

export const getStudentActivityCommentFindAllQueryKey = (studentActivityId: number) => [
  `/api/student-activity-comment/${studentActivityId}`,
]

export type StudentActivityCommentFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityCommentFindAll>>
>
export type StudentActivityCommentFindAllQueryError = ErrorType<unknown>

export const useStudentActivityCommentFindAll = <
  TData = Awaited<ReturnType<typeof studentActivityCommentFindAll>>,
  TError = ErrorType<unknown>,
>(
  studentActivityId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivityCommentFindAll>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivityCommentFindAllQueryKey(studentActivityId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivityCommentFindAll>>> = ({ signal }) =>
    studentActivityCommentFindAll(studentActivityId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivityCommentFindAll>>, TError, TData>(queryKey, queryFn, {
    enabled: !!studentActivityId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÌôúÎèôÎåìÍ∏Ä Ï∂îÍ∞Ä
 */
export const studentActivityCommentCreate = (
  requestCreateActivityCommentDto: RequestCreateActivityCommentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Comment>(
    {
      url: `/api/student-activity-comment`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateActivityCommentDto,
    },
    options,
  )
}

export type StudentActivityCommentCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityCommentCreate>>
>
export type StudentActivityCommentCreateMutationBody = RequestCreateActivityCommentDto
export type StudentActivityCommentCreateMutationError = ErrorType<void>

export const useStudentActivityCommentCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentActivityCommentCreate>>,
    TError,
    { data: RequestCreateActivityCommentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentActivityCommentCreate>>,
    { data: RequestCreateActivityCommentDto }
  > = (props) => {
    const { data } = props ?? {}

    return studentActivityCommentCreate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentActivityCommentCreate>>,
    TError,
    { data: RequestCreateActivityCommentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉùÌôúÎèôÎåìÍ∏Ä ÏàòÏ†ï
 */
export const studentActivityCommentUpdate = (
  id: number,
  studentActivityCommentUpdateBody: StudentActivityCommentUpdateBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Comment>(
    {
      url: `/api/student-activity-comment/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: studentActivityCommentUpdateBody,
    },
    options,
  )
}

export type StudentActivityCommentUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityCommentUpdate>>
>
export type StudentActivityCommentUpdateMutationBody = StudentActivityCommentUpdateBody
export type StudentActivityCommentUpdateMutationError = ErrorType<void>

export const useStudentActivityCommentUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentActivityCommentUpdate>>,
    TError,
    { id: number; data: StudentActivityCommentUpdateBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentActivityCommentUpdate>>,
    { id: number; data: StudentActivityCommentUpdateBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return studentActivityCommentUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentActivityCommentUpdate>>,
    TError,
    { id: number; data: StudentActivityCommentUpdateBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉùÌôúÎèôÎåìÍ∏Ä ÏÇ≠Ï†ú
 */
export const studentActivityCommentDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/student-activity-comment/${id}`, method: 'delete' }, options)
}

export type StudentActivityCommentDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityCommentDelete>>
>

export type StudentActivityCommentDeleteMutationError = ErrorType<unknown>

export const useStudentActivityCommentDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentActivityCommentDelete>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof studentActivityCommentDelete>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return studentActivityCommentDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof studentActivityCommentDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌïôÏÉùÌôúÎèô Î™©Î°ù Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentActivityFindByUserId = (
  params: StudentActivityFindByUserIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentActivity[]>({ url: `/api/student-activities`, method: 'get', params, signal }, options)
}

export const getStudentActivityFindByUserIdQueryKey = (params: StudentActivityFindByUserIdParams) => [
  `/api/student-activities`,
  ...(params ? [params] : []),
]

export type StudentActivityFindByUserIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityFindByUserId>>
>
export type StudentActivityFindByUserIdQueryError = ErrorType<void>

export const useStudentActivityFindByUserId = <
  TData = Awaited<ReturnType<typeof studentActivityFindByUserId>>,
  TError = ErrorType<void>,
>(
  params: StudentActivityFindByUserIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivityFindByUserId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivityFindByUserIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivityFindByUserId>>> = ({ signal }) =>
    studentActivityFindByUserId(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivityFindByUserId>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÌôúÎèô Îã®Í±¥ Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentActivityFindOne = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<StudentActivity>({ url: `/api/student-activities/${id}`, method: 'get', signal }, options)
}

export const getStudentActivityFindOneQueryKey = (id: number) => [`/api/student-activities/${id}`]

export type StudentActivityFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof studentActivityFindOne>>>
export type StudentActivityFindOneQueryError = ErrorType<void>

export const useStudentActivityFindOne = <
  TData = Awaited<ReturnType<typeof studentActivityFindOne>>,
  TError = ErrorType<void>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivityFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivityFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivityFindOne>>> = ({ signal }) =>
    studentActivityFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivityFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÌôúÎèô ÏàòÏ†ï(ÏóÜÏúºÎ©¥ Ï∂îÍ∞ÄÌï®)
 */
export const studentActivityUpdate = (
  id: number,
  requestUpdateStudentActivityDto: RequestUpdateStudentActivityDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<StudentActivity>(
    {
      url: `/api/student-activities/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateStudentActivityDto,
    },
    options,
  )
}

export type StudentActivityUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof studentActivityUpdate>>>
export type StudentActivityUpdateMutationBody = RequestUpdateStudentActivityDto
export type StudentActivityUpdateMutationError = ErrorType<void>

export const useStudentActivityUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentActivityUpdate>>,
    TError,
    { id: number; data: RequestUpdateStudentActivityDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentActivityUpdate>>,
    { id: number; data: RequestUpdateStudentActivityDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return studentActivityUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentActivityUpdate>>,
    TError,
    { id: number; data: RequestUpdateStudentActivityDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉùÌôúÎèô Îã®Í±¥ Ï°∞Ìöå(ÌïôÏÉùÏö©)
 */
export const studentActivityFindOneByActivityId = (
  activityId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentActivity>(
    { url: `/api/student-activities/by-student/${activityId}`, method: 'get', signal },
    options,
  )
}

export const getStudentActivityFindOneByActivityIdQueryKey = (activityId: number) => [
  `/api/student-activities/by-student/${activityId}`,
]

export type StudentActivityFindOneByActivityIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityFindOneByActivityId>>
>
export type StudentActivityFindOneByActivityIdQueryError = ErrorType<void>

export const useStudentActivityFindOneByActivityId = <
  TData = Awaited<ReturnType<typeof studentActivityFindOneByActivityId>>,
  TError = ErrorType<void>,
>(
  activityId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivityFindOneByActivityId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivityFindOneByActivityIdQueryKey(activityId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivityFindOneByActivityId>>> = ({ signal }) =>
    studentActivityFindOneByActivityId(activityId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivityFindOneByActivityId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!activityId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌîºÎìúÎ∞± ÏóÖÎç∞Ïù¥Ìä∏
 */
export const studentActivityUpdateFeedback = (
  id: number,
  studentActivityUpdateFeedbackBody: StudentActivityUpdateFeedbackBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/student-activities/update-feedback/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: studentActivityUpdateFeedbackBody,
    },
    options,
  )
}

export type StudentActivityUpdateFeedbackMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityUpdateFeedback>>
>
export type StudentActivityUpdateFeedbackMutationBody = StudentActivityUpdateFeedbackBody
export type StudentActivityUpdateFeedbackMutationError = ErrorType<unknown>

export const useStudentActivityUpdateFeedback = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentActivityUpdateFeedback>>,
    TError,
    { id: number; data: StudentActivityUpdateFeedbackBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentActivityUpdateFeedback>>,
    { id: number; data: StudentActivityUpdateFeedbackBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return studentActivityUpdateFeedback(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentActivityUpdateFeedback>>,
    TError,
    { id: number; data: StudentActivityUpdateFeedbackBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉù Ï∞®Ïãú Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentActivitySessionFindByTeacher = (
  params: StudentActivitySessionFindByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentActivitySession[]>(
    { url: `/api/student-activity-session/teacher`, method: 'get', params, signal },
    options,
  )
}

export const getStudentActivitySessionFindByTeacherQueryKey = (params: StudentActivitySessionFindByTeacherParams) => [
  `/api/student-activity-session/teacher`,
  ...(params ? [params] : []),
]

export type StudentActivitySessionFindByTeacherQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentActivitySessionFindByTeacher>>
>
export type StudentActivitySessionFindByTeacherQueryError = ErrorType<void>

export const useStudentActivitySessionFindByTeacher = <
  TData = Awaited<ReturnType<typeof studentActivitySessionFindByTeacher>>,
  TError = ErrorType<void>,
>(
  params: StudentActivitySessionFindByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivitySessionFindByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivitySessionFindByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivitySessionFindByTeacher>>> = ({ signal }) =>
    studentActivitySessionFindByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivitySessionFindByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Ï∞®Ïãú Îã®Í±¥ Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentActivitySessionFindOneByTeacher = (
  params: StudentActivitySessionFindOneByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentActivitySession>(
    { url: `/api/student-activity-session/teacher/one`, method: 'get', params, signal },
    options,
  )
}

export const getStudentActivitySessionFindOneByTeacherQueryKey = (
  params: StudentActivitySessionFindOneByTeacherParams,
) => [`/api/student-activity-session/teacher/one`, ...(params ? [params] : [])]

export type StudentActivitySessionFindOneByTeacherQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentActivitySessionFindOneByTeacher>>
>
export type StudentActivitySessionFindOneByTeacherQueryError = ErrorType<void>

export const useStudentActivitySessionFindOneByTeacher = <
  TData = Awaited<ReturnType<typeof studentActivitySessionFindOneByTeacher>>,
  TError = ErrorType<void>,
>(
  params: StudentActivitySessionFindOneByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivitySessionFindOneByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivitySessionFindOneByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivitySessionFindOneByTeacher>>> = ({ signal }) =>
    studentActivitySessionFindOneByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivitySessionFindOneByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Ï∞®Ïãú Îã®Í±¥ Ï°∞Ìöå(ÌïôÏÉùÏö©)
 */
export const studentActivitySessionFindOneByStudent = (
  params: StudentActivitySessionFindOneByStudentParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentActivitySession>(
    { url: `/api/student-activity-session/one`, method: 'get', params, signal },
    options,
  )
}

export const getStudentActivitySessionFindOneByStudentQueryKey = (
  params: StudentActivitySessionFindOneByStudentParams,
) => [`/api/student-activity-session/one`, ...(params ? [params] : [])]

export type StudentActivitySessionFindOneByStudentQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentActivitySessionFindOneByStudent>>
>
export type StudentActivitySessionFindOneByStudentQueryError = ErrorType<void>

export const useStudentActivitySessionFindOneByStudent = <
  TData = Awaited<ReturnType<typeof studentActivitySessionFindOneByStudent>>,
  TError = ErrorType<void>,
>(
  params: StudentActivitySessionFindOneByStudentParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivitySessionFindOneByStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivitySessionFindOneByStudentQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivitySessionFindOneByStudent>>> = ({ signal }) =>
    studentActivitySessionFindOneByStudent(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivitySessionFindOneByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Ï∞®Ïãú ÏÉùÏÑ±&ÏàòÏ†ï
 */
export const studentActivitySessionSaveOne = (
  requestUpdateStudentActivitySessionDto: RequestUpdateStudentActivitySessionDto,
  params: StudentActivitySessionSaveOneParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<StudentActivitySession>(
    {
      url: `/api/student-activity-session`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateStudentActivitySessionDto,
      params,
    },
    options,
  )
}

export type StudentActivitySessionSaveOneMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentActivitySessionSaveOne>>
>
export type StudentActivitySessionSaveOneMutationBody = RequestUpdateStudentActivitySessionDto
export type StudentActivitySessionSaveOneMutationError = ErrorType<void>

export const useStudentActivitySessionSaveOne = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentActivitySessionSaveOne>>,
    TError,
    { data: RequestUpdateStudentActivitySessionDto; params: StudentActivitySessionSaveOneParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentActivitySessionSaveOne>>,
    { data: RequestUpdateStudentActivitySessionDto; params: StudentActivitySessionSaveOneParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return studentActivitySessionSaveOne(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentActivitySessionSaveOne>>,
    TError,
    { data: RequestUpdateStudentActivitySessionDto; params: StudentActivitySessionSaveOneParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèô ÌïôÏÉùÎ≥Ñ Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentActivityV3FindStudentCard = (
  params: StudentActivityV3FindStudentCardParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentActivityV3[]>(
    { url: `/api/student-activityv3/teacher/student-card`, method: 'get', params, signal },
    options,
  )
}

export const getStudentActivityV3FindStudentCardQueryKey = (params: StudentActivityV3FindStudentCardParams) => [
  `/api/student-activityv3/teacher/student-card`,
  ...(params ? [params] : []),
]

export type StudentActivityV3FindStudentCardQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityV3FindStudentCard>>
>
export type StudentActivityV3FindStudentCardQueryError = ErrorType<void>

export const useStudentActivityV3FindStudentCard = <
  TData = Awaited<ReturnType<typeof studentActivityV3FindStudentCard>>,
  TError = ErrorType<void>,
>(
  params: StudentActivityV3FindStudentCardParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivityV3FindStudentCard>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivityV3FindStudentCardQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivityV3FindStudentCard>>> = ({ signal }) =>
    studentActivityV3FindStudentCard(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivityV3FindStudentCard>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÌôúÎèô ÏÑ∏Î∂ÄÏ†ïÎ≥¥ Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentActivityV3FindByTeacher = (
  params: StudentActivityV3FindByTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentActivityV3>({ url: `/api/student-activityv3/teacher`, method: 'get', params, signal }, options)
}

export const getStudentActivityV3FindByTeacherQueryKey = (params: StudentActivityV3FindByTeacherParams) => [
  `/api/student-activityv3/teacher`,
  ...(params ? [params] : []),
]

export type StudentActivityV3FindByTeacherQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityV3FindByTeacher>>
>
export type StudentActivityV3FindByTeacherQueryError = ErrorType<void>

export const useStudentActivityV3FindByTeacher = <
  TData = Awaited<ReturnType<typeof studentActivityV3FindByTeacher>>,
  TError = ErrorType<void>,
>(
  params: StudentActivityV3FindByTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivityV3FindByTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivityV3FindByTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivityV3FindByTeacher>>> = ({ signal }) =>
    studentActivityV3FindByTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivityV3FindByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í¥ÄÏ∞∞Í∏∞Î°ù/ÌôúÎèôÏöîÏïΩ ÏàòÏ†ï
 */
export const studentActivityV3SaveByTeacher = (
  requestUpdateStudentActivityV3Dto: RequestUpdateStudentActivityV3Dto,
  params: StudentActivityV3SaveByTeacherParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<StudentActivityV3>(
    {
      url: `/api/student-activityv3/teacher`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateStudentActivityV3Dto,
      params,
    },
    options,
  )
}

export type StudentActivityV3SaveByTeacherMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityV3SaveByTeacher>>
>
export type StudentActivityV3SaveByTeacherMutationBody = RequestUpdateStudentActivityV3Dto
export type StudentActivityV3SaveByTeacherMutationError = ErrorType<void>

export const useStudentActivityV3SaveByTeacher = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentActivityV3SaveByTeacher>>,
    TError,
    { data: RequestUpdateStudentActivityV3Dto; params: StudentActivityV3SaveByTeacherParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentActivityV3SaveByTeacher>>,
    { data: RequestUpdateStudentActivityV3Dto; params: StudentActivityV3SaveByTeacherParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return studentActivityV3SaveByTeacher(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentActivityV3SaveByTeacher>>,
    TError,
    { data: RequestUpdateStudentActivityV3Dto; params: StudentActivityV3SaveByTeacherParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉù ÌôúÎèô ÏÑ∏Î∂ÄÏ†ïÎ≥¥ Ï°∞Ìöå(ÌïôÏÉùÏö©)
 */
export const studentActivityV3FindByStudent = (
  params: StudentActivityV3FindByStudentParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentActivityV3>({ url: `/api/student-activityv3/student`, method: 'get', params, signal }, options)
}

export const getStudentActivityV3FindByStudentQueryKey = (params: StudentActivityV3FindByStudentParams) => [
  `/api/student-activityv3/student`,
  ...(params ? [params] : []),
]

export type StudentActivityV3FindByStudentQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityV3FindByStudent>>
>
export type StudentActivityV3FindByStudentQueryError = ErrorType<void>

export const useStudentActivityV3FindByStudent = <
  TData = Awaited<ReturnType<typeof studentActivityV3FindByStudent>>,
  TError = ErrorType<void>,
>(
  params: StudentActivityV3FindByStudentParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivityV3FindByStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivityV3FindByStudentQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivityV3FindByStudent>>> = ({ signal }) =>
    studentActivityV3FindByStudent(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivityV3FindByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÌôúÎèô Î≥¥Í≥†ÏÑú ÏàòÏ†ï
 */
export const studentActivityV3SaveStudentText = (
  requestUpdateStudentTextDto: RequestUpdateStudentTextDto,
  params: StudentActivityV3SaveStudentTextParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<StudentActivityV3>(
    {
      url: `/api/student-activityv3/student-text`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateStudentTextDto,
      params,
    },
    options,
  )
}

export type StudentActivityV3SaveStudentTextMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityV3SaveStudentText>>
>
export type StudentActivityV3SaveStudentTextMutationBody = RequestUpdateStudentTextDto
export type StudentActivityV3SaveStudentTextMutationError = ErrorType<void>

export const useStudentActivityV3SaveStudentText = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentActivityV3SaveStudentText>>,
    TError,
    { data: RequestUpdateStudentTextDto; params: StudentActivityV3SaveStudentTextParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentActivityV3SaveStudentText>>,
    { data: RequestUpdateStudentTextDto; params: StudentActivityV3SaveStudentTextParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return studentActivityV3SaveStudentText(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentActivityV3SaveStudentText>>,
    TError,
    { data: RequestUpdateStudentTextDto; params: StudentActivityV3SaveStudentTextParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèôÏöîÏïΩ ÏùºÍ¥Ñ Îã§Ïö¥Î°úÎìú
 */
export const studentActivityV3DownloadRecordSummary = (
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/student-activityv3/download/summary/${groupId}`, method: 'get', responseType: 'blob', signal },
    options,
  )
}

export const getStudentActivityV3DownloadRecordSummaryQueryKey = (groupId: number) => [
  `/api/student-activityv3/download/summary/${groupId}`,
]

export type StudentActivityV3DownloadRecordSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentActivityV3DownloadRecordSummary>>
>
export type StudentActivityV3DownloadRecordSummaryQueryError = ErrorType<unknown>

export const useStudentActivityV3DownloadRecordSummary = <
  TData = Awaited<ReturnType<typeof studentActivityV3DownloadRecordSummary>>,
  TError = ErrorType<unknown>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentActivityV3DownloadRecordSummary>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentActivityV3DownloadRecordSummaryQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentActivityV3DownloadRecordSummary>>> = ({ signal }) =>
    studentActivityV3DownloadRecordSummary(groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentActivityV3DownloadRecordSummary>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!groupId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÏπ¥Îìú ÌïôÏÉùÏ†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞
 */
export const studentCardFindStudent = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseStudentCardStudentDto>(
    { url: `/api/student-card/student/${id}`, method: 'get', signal },
    options,
  )
}

export const getStudentCardFindStudentQueryKey = (id: number) => [`/api/student-card/student/${id}`]

export type StudentCardFindStudentQueryResult = NonNullable<Awaited<ReturnType<typeof studentCardFindStudent>>>
export type StudentCardFindStudentQueryError = ErrorType<unknown>

export const useStudentCardFindStudent = <
  TData = Awaited<ReturnType<typeof studentCardFindStudent>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentCardFindStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentCardFindStudentQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentCardFindStudent>>> = ({ signal }) =>
    studentCardFindStudent(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentCardFindStudent>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇ¥ ÏÑ±Ï†Å Ï°∞Ìöå
 */
export const studentExamScoreGetMyScores = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<StudentExamScoreGetMyScores200>(
    { url: `/api/analysis/school-exam/users/my-scores`, method: 'get', signal },
    options,
  )
}

export const getStudentExamScoreGetMyScoresQueryKey = () => [`/api/analysis/school-exam/users/my-scores`]

export type StudentExamScoreGetMyScoresQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreGetMyScores>>
>
export type StudentExamScoreGetMyScoresQueryError = ErrorType<unknown>

export const useStudentExamScoreGetMyScores = <
  TData = Awaited<ReturnType<typeof studentExamScoreGetMyScores>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreGetMyScores>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreGetMyScoresQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreGetMyScores>>> = ({ signal }) =>
    studentExamScoreGetMyScores(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreGetMyScores>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇ¥Ïã† ÏÑ±Ï†Å Ï°∞Ìöå (ÌïôÏÉù/ÌïôÎ∂ÄÎ™®)
 */
export const studentExamScoreGetStudentExamScoresByParent = (
  studentId: number,
  params: StudentExamScoreGetStudentExamScoresByParentParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentExamScoreGetStudentExamScoresByParent200>(
    { url: `/api/analysis/school-exam/users/${studentId}/exam-scores`, method: 'get', params, signal },
    options,
  )
}

export const getStudentExamScoreGetStudentExamScoresByParentQueryKey = (
  studentId: number,
  params: StudentExamScoreGetStudentExamScoresByParentParams,
) => [`/api/analysis/school-exam/users/${studentId}/exam-scores`, ...(params ? [params] : [])]

export type StudentExamScoreGetStudentExamScoresByParentQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreGetStudentExamScoresByParent>>
>
export type StudentExamScoreGetStudentExamScoresByParentQueryError = ErrorType<unknown>

export const useStudentExamScoreGetStudentExamScoresByParent = <
  TData = Awaited<ReturnType<typeof studentExamScoreGetStudentExamScoresByParent>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  params: StudentExamScoreGetStudentExamScoresByParentParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreGetStudentExamScoresByParent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreGetStudentExamScoresByParentQueryKey(studentId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreGetStudentExamScoresByParent>>> = ({
    signal,
  }) => studentExamScoreGetStudentExamScoresByParent(studentId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreGetStudentExamScoresByParent>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î™®ÏùòÍ≥†ÏÇ¨ ÏÑ±Ï†Å Ï°∞Ìöå (ÌïôÏÉù/ÌïôÎ∂ÄÎ™®)
 */
export const studentExamScoreGetStudentMockExamScoresByParent = (
  studentId: number,
  params: StudentExamScoreGetStudentMockExamScoresByParentParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentExamScoreGetStudentMockExamScoresByParent200>(
    { url: `/api/analysis/school-exam/users/${studentId}/mock-exam-scores`, method: 'get', params, signal },
    options,
  )
}

export const getStudentExamScoreGetStudentMockExamScoresByParentQueryKey = (
  studentId: number,
  params: StudentExamScoreGetStudentMockExamScoresByParentParams,
) => [`/api/analysis/school-exam/users/${studentId}/mock-exam-scores`, ...(params ? [params] : [])]

export type StudentExamScoreGetStudentMockExamScoresByParentQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreGetStudentMockExamScoresByParent>>
>
export type StudentExamScoreGetStudentMockExamScoresByParentQueryError = ErrorType<unknown>

export const useStudentExamScoreGetStudentMockExamScoresByParent = <
  TData = Awaited<ReturnType<typeof studentExamScoreGetStudentMockExamScoresByParent>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  params: StudentExamScoreGetStudentMockExamScoresByParentParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreGetStudentMockExamScoresByParent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getStudentExamScoreGetStudentMockExamScoresByParentQueryKey(studentId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreGetStudentMockExamScoresByParent>>> = ({
    signal,
  }) => studentExamScoreGetStudentMockExamScoresByParent(studentId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreGetStudentMockExamScoresByParent>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÏãúÌóò ÏÑ±Ï†Å Ï°∞Ìöå
 */
export const studentExamScoreGetStudentExamScores = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentExamScoreGetStudentExamScores200>(
    { url: `/api/analysis/school-exam/users/${studentId}/scores`, method: 'get', signal },
    options,
  )
}

export const getStudentExamScoreGetStudentExamScoresQueryKey = (studentId: number) => [
  `/api/analysis/school-exam/users/${studentId}/scores`,
]

export type StudentExamScoreGetStudentExamScoresQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreGetStudentExamScores>>
>
export type StudentExamScoreGetStudentExamScoresQueryError = ErrorType<unknown>

export const useStudentExamScoreGetStudentExamScores = <
  TData = Awaited<ReturnType<typeof studentExamScoreGetStudentExamScores>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreGetStudentExamScores>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreGetStudentExamScoresQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreGetStudentExamScores>>> = ({ signal }) =>
    studentExamScoreGetStudentExamScores(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreGetStudentExamScores>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÏãúÌóò ÏÑ±Ï†Å Ï∞®Ìä∏ Ï°∞Ìöå
 */
export const studentExamScoreGetStudentExamScoresChart = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentExamScoreGetStudentExamScoresChart200>(
    { url: `/api/analysis/school-exam/users/${studentId}/scores-chart`, method: 'get', signal },
    options,
  )
}

export const getStudentExamScoreGetStudentExamScoresChartQueryKey = (studentId: number) => [
  `/api/analysis/school-exam/users/${studentId}/scores-chart`,
]

export type StudentExamScoreGetStudentExamScoresChartQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreGetStudentExamScoresChart>>
>
export type StudentExamScoreGetStudentExamScoresChartQueryError = ErrorType<unknown>

export const useStudentExamScoreGetStudentExamScoresChart = <
  TData = Awaited<ReturnType<typeof studentExamScoreGetStudentExamScoresChart>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreGetStudentExamScoresChart>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreGetStudentExamScoresChartQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreGetStudentExamScoresChart>>> = ({ signal }) =>
    studentExamScoreGetStudentExamScoresChart(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreGetStudentExamScoresChart>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î™©ÌëúÏÑ±Ï†Å Î∂ÑÏÑù
 */
export const studentExamScorePatchStudentExamScores = (
  params: StudentExamScorePatchStudentExamScoresParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<StudentExamScorePatchStudentExamScores200>(
    { url: `/api/analysis/school-exam/users/target-score-analysis`, method: 'post', params },
    options,
  )
}

export type StudentExamScorePatchStudentExamScoresMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScorePatchStudentExamScores>>
>

export type StudentExamScorePatchStudentExamScoresMutationError = ErrorType<unknown>

export const useStudentExamScorePatchStudentExamScores = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentExamScorePatchStudentExamScores>>,
    TError,
    { params: StudentExamScorePatchStudentExamScoresParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentExamScorePatchStudentExamScores>>,
    { params: StudentExamScorePatchStudentExamScoresParams }
  > = (props) => {
    const { params } = props ?? {}

    return studentExamScorePatchStudentExamScores(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentExamScorePatchStudentExamScores>>,
    TError,
    { params: StudentExamScorePatchStudentExamScoresParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑ±Ï†ÅÌååÏùº ÏóÖÎ°úÎìú
 */
export const studentExamScoreInsetClassScores = (
  studentExamScoreInsetClassScoresBody: StudentExamScoreInsetClassScoresBody,
  params: StudentExamScoreInsetClassScoresParams,
  options?: SecondParameter<typeof mutator>,
) => {
  const formData = new FormData()
  if (studentExamScoreInsetClassScoresBody.file !== undefined) {
    formData.append('file', studentExamScoreInsetClassScoresBody.file)
  }

  return mutator<void>(
    {
      url: `/api/analysis/school-exam/users/insert-class-scores`,
      method: 'post',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      params,
    },
    options,
  )
}

export type StudentExamScoreInsetClassScoresMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreInsetClassScores>>
>
export type StudentExamScoreInsetClassScoresMutationBody = StudentExamScoreInsetClassScoresBody
export type StudentExamScoreInsetClassScoresMutationError = ErrorType<unknown>

export const useStudentExamScoreInsetClassScores = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentExamScoreInsetClassScores>>,
    TError,
    { data: StudentExamScoreInsetClassScoresBody; params: StudentExamScoreInsetClassScoresParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentExamScoreInsetClassScores>>,
    { data: StudentExamScoreInsetClassScoresBody; params: StudentExamScoreInsetClassScoresParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return studentExamScoreInsetClassScores(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentExamScoreInsetClassScores>>,
    TError,
    { data: StudentExamScoreInsetClassScoresBody; params: StudentExamScoreInsetClassScoresParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑ±Ï†ÅÌååÏùº Îã§Ïàò ÏóÖÎ°úÎìú
 */
export const studentExamScoreInsetClassScoresBulk = (
  studentExamScoreInsetClassScoresBulkBody: StudentExamScoreInsetClassScoresBulkBody,
  params: StudentExamScoreInsetClassScoresBulkParams,
  options?: SecondParameter<typeof mutator>,
) => {
  const formData = new FormData()
  if (studentExamScoreInsetClassScoresBulkBody.file !== undefined) {
    formData.append('file', studentExamScoreInsetClassScoresBulkBody.file)
  }

  return mutator<void>(
    {
      url: `/api/analysis/school-exam/users/insert-class-scores-bulk`,
      method: 'post',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      params,
    },
    options,
  )
}

export type StudentExamScoreInsetClassScoresBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreInsetClassScoresBulk>>
>
export type StudentExamScoreInsetClassScoresBulkMutationBody = StudentExamScoreInsetClassScoresBulkBody
export type StudentExamScoreInsetClassScoresBulkMutationError = ErrorType<unknown>

export const useStudentExamScoreInsetClassScoresBulk = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentExamScoreInsetClassScoresBulk>>,
    TError,
    { data: StudentExamScoreInsetClassScoresBulkBody; params: StudentExamScoreInsetClassScoresBulkParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentExamScoreInsetClassScoresBulk>>,
    { data: StudentExamScoreInsetClassScoresBulkBody; params: StudentExamScoreInsetClassScoresBulkParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return studentExamScoreInsetClassScoresBulk(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentExamScoreInsetClassScoresBulk>>,
    TError,
    { data: StudentExamScoreInsetClassScoresBulkBody; params: StudentExamScoreInsetClassScoresBulkParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Fetch the scores files inserted for a given school id and year.
 */
export const studentExamScoreCheckScoreFile = (
  params: StudentExamScoreCheckScoreFileParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>(
    { url: `/api/analysis/school-exam/users/check-score-file`, method: 'get', params, signal },
    options,
  )
}

export const getStudentExamScoreCheckScoreFileQueryKey = (params: StudentExamScoreCheckScoreFileParams) => [
  `/api/analysis/school-exam/users/check-score-file`,
  ...(params ? [params] : []),
]

export type StudentExamScoreCheckScoreFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreCheckScoreFile>>
>
export type StudentExamScoreCheckScoreFileQueryError = ErrorType<unknown>

export const useStudentExamScoreCheckScoreFile = <
  TData = Awaited<ReturnType<typeof studentExamScoreCheckScoreFile>>,
  TError = ErrorType<unknown>,
>(
  params: StudentExamScoreCheckScoreFileParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreCheckScoreFile>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreCheckScoreFileQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreCheckScoreFile>>> = ({ signal }) =>
    studentExamScoreCheckScoreFile(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreCheckScoreFile>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏßÄÌïÑÌèâÍ∞Ä ÏÑ±Ï†Å ÌååÏùº Ï°∞Ìöå
 */
export const studentExamScoreCheckTestScoreFile = (
  params: StudentExamScoreCheckTestScoreFileParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>(
    { url: `/api/analysis/school-exam/users/check-test-score-file`, method: 'get', params, signal },
    options,
  )
}

export const getStudentExamScoreCheckTestScoreFileQueryKey = (params: StudentExamScoreCheckTestScoreFileParams) => [
  `/api/analysis/school-exam/users/check-test-score-file`,
  ...(params ? [params] : []),
]

export type StudentExamScoreCheckTestScoreFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreCheckTestScoreFile>>
>
export type StudentExamScoreCheckTestScoreFileQueryError = ErrorType<unknown>

export const useStudentExamScoreCheckTestScoreFile = <
  TData = Awaited<ReturnType<typeof studentExamScoreCheckTestScoreFile>>,
  TError = ErrorType<unknown>,
>(
  params: StudentExamScoreCheckTestScoreFileParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreCheckTestScoreFile>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreCheckTestScoreFileQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreCheckTestScoreFile>>> = ({ signal }) =>
    studentExamScoreCheckTestScoreFile(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreCheckTestScoreFile>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÏÑ±Ï†Å ÌååÏùº Ï°∞Ìöå
 */
export const studentExamScoreCheckStudentDataFile = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>(
    { url: `/api/analysis/school-exam/users/${studentId}/check-student-data-file`, method: 'get', signal },
    options,
  )
}

export const getStudentExamScoreCheckStudentDataFileQueryKey = (studentId: number) => [
  `/api/analysis/school-exam/users/${studentId}/check-student-data-file`,
]

export type StudentExamScoreCheckStudentDataFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreCheckStudentDataFile>>
>
export type StudentExamScoreCheckStudentDataFileQueryError = ErrorType<unknown>

export const useStudentExamScoreCheckStudentDataFile = <
  TData = Awaited<ReturnType<typeof studentExamScoreCheckStudentDataFile>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreCheckStudentDataFile>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreCheckStudentDataFileQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreCheckStudentDataFile>>> = ({ signal }) =>
    studentExamScoreCheckStudentDataFile(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreCheckStudentDataFile>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î™®ÏùòÍ≥†ÏÇ¨ ÌååÏùº ÏóÖÎ°úÎìú
 */
export const studentExamScoreInsertMockScores = (
  studentExamScoreInsertMockScoresBody: StudentExamScoreInsertMockScoresBody,
  params: StudentExamScoreInsertMockScoresParams,
  options?: SecondParameter<typeof mutator>,
) => {
  const formData = new FormData()
  if (studentExamScoreInsertMockScoresBody.file !== undefined) {
    formData.append('file', studentExamScoreInsertMockScoresBody.file)
  }

  return mutator<void>(
    {
      url: `/api/analysis/school-exam/users/insert-mock-scores`,
      method: 'post',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      params,
    },
    options,
  )
}

export type StudentExamScoreInsertMockScoresMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreInsertMockScores>>
>
export type StudentExamScoreInsertMockScoresMutationBody = StudentExamScoreInsertMockScoresBody
export type StudentExamScoreInsertMockScoresMutationError = ErrorType<unknown>

export const useStudentExamScoreInsertMockScores = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentExamScoreInsertMockScores>>,
    TError,
    { data: StudentExamScoreInsertMockScoresBody; params: StudentExamScoreInsertMockScoresParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentExamScoreInsertMockScores>>,
    { data: StudentExamScoreInsertMockScoresBody; params: StudentExamScoreInsertMockScoresParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return studentExamScoreInsertMockScores(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentExamScoreInsertMockScores>>,
    TError,
    { data: StudentExamScoreInsertMockScoresBody; params: StudentExamScoreInsertMockScoresParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÎÇ¥Ïã† 1Ï∞® ÏßÄÌïÑ, 2Ï∞® ÏßÄÌïÑ ÏóÖÎ°úÎìú
 */
export const studentExamScoreInsertTestScores = (
  studentExamScoreInsertTestScoresBody: StudentExamScoreInsertTestScoresBody,
  params: StudentExamScoreInsertTestScoresParams,
  options?: SecondParameter<typeof mutator>,
) => {
  const formData = new FormData()
  if (studentExamScoreInsertTestScoresBody.file !== undefined) {
    formData.append('file', studentExamScoreInsertTestScoresBody.file)
  }

  return mutator<void>(
    {
      url: `/api/analysis/school-exam/users/insert-test-scores`,
      method: 'post',
      headers: { 'Content-Type': 'multipart/form-data' },
      data: formData,
      params,
    },
    options,
  )
}

export type StudentExamScoreInsertTestScoresMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreInsertTestScores>>
>
export type StudentExamScoreInsertTestScoresMutationBody = StudentExamScoreInsertTestScoresBody
export type StudentExamScoreInsertTestScoresMutationError = ErrorType<unknown>

export const useStudentExamScoreInsertTestScores = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentExamScoreInsertTestScores>>,
    TError,
    { data: StudentExamScoreInsertTestScoresBody; params: StudentExamScoreInsertTestScoresParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentExamScoreInsertTestScores>>,
    { data: StudentExamScoreInsertTestScoresBody; params: StudentExamScoreInsertTestScoresParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return studentExamScoreInsertTestScores(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentExamScoreInsertTestScores>>,
    TError,
    { data: StudentExamScoreInsertTestScoresBody; params: StudentExamScoreInsertTestScoresParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Î™®ÏùòÍ≥†ÏÇ¨ ÏÑ±Ï†Å ÌååÏùº Ï°∞Ìöå
 */
export const studentExamScoreCheckMockScoreFile = (
  params: StudentExamScoreCheckMockScoreFileParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>(
    { url: `/api/analysis/school-exam/users/check-mock-score-file`, method: 'get', params, signal },
    options,
  )
}

export const getStudentExamScoreCheckMockScoreFileQueryKey = (params: StudentExamScoreCheckMockScoreFileParams) => [
  `/api/analysis/school-exam/users/check-mock-score-file`,
  ...(params ? [params] : []),
]

export type StudentExamScoreCheckMockScoreFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreCheckMockScoreFile>>
>
export type StudentExamScoreCheckMockScoreFileQueryError = ErrorType<unknown>

export const useStudentExamScoreCheckMockScoreFile = <
  TData = Awaited<ReturnType<typeof studentExamScoreCheckMockScoreFile>>,
  TError = ErrorType<unknown>,
>(
  params: StudentExamScoreCheckMockScoreFileParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreCheckMockScoreFile>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreCheckMockScoreFileQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreCheckMockScoreFile>>> = ({ signal }) =>
    studentExamScoreCheckMockScoreFile(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreCheckMockScoreFile>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇ¥Ïã† 1Ï∞® ÏßÄÌïÑ, 2Ï∞® ÏßÄÌïÑ ÏÑ±Ï†Å Ï°∞Ìöå
 */
export const studentExamScoreGetStudentTestExamScores = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>(
    { url: `/api/analysis/school-exam/users/${studentId}/test-scores`, method: 'get', signal },
    options,
  )
}

export const getStudentExamScoreGetStudentTestExamScoresQueryKey = (studentId: number) => [
  `/api/analysis/school-exam/users/${studentId}/test-scores`,
]

export type StudentExamScoreGetStudentTestExamScoresQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreGetStudentTestExamScores>>
>
export type StudentExamScoreGetStudentTestExamScoresQueryError = ErrorType<unknown>

export const useStudentExamScoreGetStudentTestExamScores = <
  TData = Awaited<ReturnType<typeof studentExamScoreGetStudentTestExamScores>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreGetStudentTestExamScores>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreGetStudentTestExamScoresQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreGetStudentTestExamScores>>> = ({ signal }) =>
    studentExamScoreGetStudentTestExamScores(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreGetStudentTestExamScores>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î™®ÏùòÍ≥†ÏÇ¨ ÏÑ±Ï†Å Ï°∞Ìöå
 */
export const studentExamScoreGetMockExamScores = (
  params: StudentExamScoreGetMockExamScoresParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>(
    { url: `/api/analysis/school-exam/users/analysis/mock-exam-score/scores`, method: 'get', params, signal },
    options,
  )
}

export const getStudentExamScoreGetMockExamScoresQueryKey = (params: StudentExamScoreGetMockExamScoresParams) => [
  `/api/analysis/school-exam/users/analysis/mock-exam-score/scores`,
  ...(params ? [params] : []),
]

export type StudentExamScoreGetMockExamScoresQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreGetMockExamScores>>
>
export type StudentExamScoreGetMockExamScoresQueryError = ErrorType<unknown>

export const useStudentExamScoreGetMockExamScores = <
  TData = Awaited<ReturnType<typeof studentExamScoreGetMockExamScores>>,
  TError = ErrorType<unknown>,
>(
  params: StudentExamScoreGetMockExamScoresParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreGetMockExamScores>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreGetMockExamScoresQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreGetMockExamScores>>> = ({ signal }) =>
    studentExamScoreGetMockExamScores(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreGetMockExamScores>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇ¥Ïã† Ï†êÏàò ÏÇ≠Ï†ú
 */
export const studentExamScoreDeleteStudentExamScore = (
  params: StudentExamScoreDeleteStudentExamScoreParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    { url: `/api/analysis/school-exam/users/analysis/delete/student-exam-score`, method: 'delete', params },
    options,
  )
}

export type StudentExamScoreDeleteStudentExamScoreMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreDeleteStudentExamScore>>
>

export type StudentExamScoreDeleteStudentExamScoreMutationError = ErrorType<unknown>

export const useStudentExamScoreDeleteStudentExamScore = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentExamScoreDeleteStudentExamScore>>,
    TError,
    { params: StudentExamScoreDeleteStudentExamScoreParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentExamScoreDeleteStudentExamScore>>,
    { params: StudentExamScoreDeleteStudentExamScoreParams }
  > = (props) => {
    const { params } = props ?? {}

    return studentExamScoreDeleteStudentExamScore(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentExamScoreDeleteStudentExamScore>>,
    TError,
    { params: StudentExamScoreDeleteStudentExamScoreParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∞®ÏãúÎ≥Ñ ÎÇ¥Ïã† Ï†êÏàò ÏÇ≠Ï†ú
 */
export const studentExamScoreDeleteTestScore = (
  params: StudentExamScoreDeleteTestScoreParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    { url: `/api/analysis/school-exam/users/analysis/delete/test-score`, method: 'delete', params },
    options,
  )
}

export type StudentExamScoreDeleteTestScoreMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreDeleteTestScore>>
>

export type StudentExamScoreDeleteTestScoreMutationError = ErrorType<unknown>

export const useStudentExamScoreDeleteTestScore = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentExamScoreDeleteTestScore>>,
    TError,
    { params: StudentExamScoreDeleteTestScoreParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentExamScoreDeleteTestScore>>,
    { params: StudentExamScoreDeleteTestScoreParams }
  > = (props) => {
    const { params } = props ?? {}

    return studentExamScoreDeleteTestScore(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentExamScoreDeleteTestScore>>,
    TError,
    { params: StudentExamScoreDeleteTestScoreParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Î™®ÏùòÍ≥†ÏÇ¨ Ï†êÏàò ÏÇ≠Ï†ú
 */
export const studentExamScoreDeleteMockScore = (
  params: StudentExamScoreDeleteMockScoreParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    { url: `/api/analysis/school-exam/users/analysis/delete/mock-scores`, method: 'delete', params },
    options,
  )
}

export type StudentExamScoreDeleteMockScoreMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreDeleteMockScore>>
>

export type StudentExamScoreDeleteMockScoreMutationError = ErrorType<unknown>

export const useStudentExamScoreDeleteMockScore = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentExamScoreDeleteMockScore>>,
    TError,
    { params: StudentExamScoreDeleteMockScoreParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentExamScoreDeleteMockScore>>,
    { params: StudentExamScoreDeleteMockScoreParams }
  > = (props) => {
    const { params } = props ?? {}

    return studentExamScoreDeleteMockScore(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentExamScoreDeleteMockScore>>,
    TError,
    { params: StudentExamScoreDeleteMockScoreParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Analyse the exam scores of a user for all grades and semesters.
 */
export const studentExamScoreGetAnalysedScores = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>(
    { url: `/api/analysis/school-exam/users/${studentId}/school-exam/analysed-scores`, method: 'get', signal },
    options,
  )
}

export const getStudentExamScoreGetAnalysedScoresQueryKey = (studentId: number) => [
  `/api/analysis/school-exam/users/${studentId}/school-exam/analysed-scores`,
]

export type StudentExamScoreGetAnalysedScoresQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreGetAnalysedScores>>
>
export type StudentExamScoreGetAnalysedScoresQueryError = ErrorType<unknown>

export const useStudentExamScoreGetAnalysedScores = <
  TData = Awaited<ReturnType<typeof studentExamScoreGetAnalysedScores>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreGetAnalysedScores>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreGetAnalysedScoresQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreGetAnalysedScores>>> = ({ signal }) =>
    studentExamScoreGetAnalysedScores(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreGetAnalysedScores>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î™©ÌëúÏÑ±Ï†Å Î∂ÑÏÑùÍ≤∞Í≥º Ï°∞Ìöå
 */
export const studentExamScoreGetAnalysedTargetScores = (
  studentId: number,
  params: StudentExamScoreGetAnalysedTargetScoresParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>(
    {
      url: `/api/analysis/school-exam/users/${studentId}/school-exam/analysed-target-score`,
      method: 'get',
      params,
      signal,
    },
    options,
  )
}

export const getStudentExamScoreGetAnalysedTargetScoresQueryKey = (
  studentId: number,
  params: StudentExamScoreGetAnalysedTargetScoresParams,
) => [`/api/analysis/school-exam/users/${studentId}/school-exam/analysed-target-score`, ...(params ? [params] : [])]

export type StudentExamScoreGetAnalysedTargetScoresQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentExamScoreGetAnalysedTargetScores>>
>
export type StudentExamScoreGetAnalysedTargetScoresQueryError = ErrorType<unknown>

export const useStudentExamScoreGetAnalysedTargetScores = <
  TData = Awaited<ReturnType<typeof studentExamScoreGetAnalysedTargetScores>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  params: StudentExamScoreGetAnalysedTargetScoresParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentExamScoreGetAnalysedTargetScores>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentExamScoreGetAnalysedTargetScoresQueryKey(studentId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentExamScoreGetAnalysedTargetScores>>> = ({ signal }) =>
    studentExamScoreGetAnalysedTargetScores(studentId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentExamScoreGetAnalysedTargetScores>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Í∑∏Î£π Î™©Î°ù(+Ïú†Ï†ÄÏ†ïÎ≥¥) Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentGroupsFindByGroupId = (
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentGroup[]>({ url: `/api/student_groups/by-group/${groupId}`, method: 'get', signal }, options)
}

export const getStudentGroupsFindByGroupIdQueryKey = (groupId: number) => [`/api/student_groups/by-group/${groupId}`]

export type StudentGroupsFindByGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof studentGroupsFindByGroupId>>>
export type StudentGroupsFindByGroupIdQueryError = ErrorType<unknown>

export const useStudentGroupsFindByGroupId = <
  TData = Awaited<ReturnType<typeof studentGroupsFindByGroupId>>,
  TError = ErrorType<unknown>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentGroupsFindByGroupId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentGroupsFindByGroupIdQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentGroupsFindByGroupId>>> = ({ signal }) =>
    studentGroupsFindByGroupId(groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentGroupsFindByGroupId>>, TError, TData>(queryKey, queryFn, {
    enabled: !!groupId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎÇ¥ Í∑∏Î£π Î™©Î°ù Ï°∞Ìöå(ÌïôÏÉùÏö©)
 */
export const studentGroupsFindByStudent = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<StudentGroup[]>({ url: `/api/student_groups/student`, method: 'get', signal }, options)
}

export const getStudentGroupsFindByStudentQueryKey = () => [`/api/student_groups/student`]

export type StudentGroupsFindByStudentQueryResult = NonNullable<Awaited<ReturnType<typeof studentGroupsFindByStudent>>>
export type StudentGroupsFindByStudentQueryError = ErrorType<unknown>

export const useStudentGroupsFindByStudent = <
  TData = Awaited<ReturnType<typeof studentGroupsFindByStudent>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof studentGroupsFindByStudent>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentGroupsFindByStudentQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentGroupsFindByStudent>>> = ({ signal }) =>
    studentGroupsFindByStudent(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentGroupsFindByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïó¨Îü¨ Í∑∏Î£πIDÎ°ú ÌïôÏÉù Î™©Î°ù Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentGroupsFindByGroupIds = (
  params: StudentGroupsFindByGroupIdsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentGroup[]>({ url: `/api/student_groups/by-groups`, method: 'get', params, signal }, options)
}

export const getStudentGroupsFindByGroupIdsQueryKey = (params: StudentGroupsFindByGroupIdsParams) => [
  `/api/student_groups/by-groups`,
  ...(params ? [params] : []),
]

export type StudentGroupsFindByGroupIdsQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentGroupsFindByGroupIds>>
>
export type StudentGroupsFindByGroupIdsQueryError = ErrorType<unknown>

export const useStudentGroupsFindByGroupIds = <
  TData = Awaited<ReturnType<typeof studentGroupsFindByGroupIds>>,
  TError = ErrorType<unknown>,
>(
  params: StudentGroupsFindByGroupIdsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentGroupsFindByGroupIds>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentGroupsFindByGroupIdsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentGroupsFindByGroupIds>>> = ({ signal }) =>
    studentGroupsFindByGroupIds(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentGroupsFindByGroupIds>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Í∑∏Î£π Î™©Î°ù(+Ïú†Ï†ÄÏ†ïÎ≥¥,ÌïôÎÖÑÎ∞ò) Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentGroupsFindWithKlassByGroupId = (
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseStudentGroupWithKlassDto[]>(
    { url: `/api/student_groups/by-group-with-klass/${groupId}`, method: 'get', signal },
    options,
  )
}

export const getStudentGroupsFindWithKlassByGroupIdQueryKey = (groupId: number) => [
  `/api/student_groups/by-group-with-klass/${groupId}`,
]

export type StudentGroupsFindWithKlassByGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentGroupsFindWithKlassByGroupId>>
>
export type StudentGroupsFindWithKlassByGroupIdQueryError = ErrorType<unknown>

export const useStudentGroupsFindWithKlassByGroupId = <
  TData = Awaited<ReturnType<typeof studentGroupsFindWithKlassByGroupId>>,
  TError = ErrorType<unknown>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentGroupsFindWithKlassByGroupId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentGroupsFindWithKlassByGroupIdQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentGroupsFindWithKlassByGroupId>>> = ({ signal }) =>
    studentGroupsFindWithKlassByGroupId(groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentGroupsFindWithKlassByGroupId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!groupId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î™ÖÎ†¨Ìëú Îã§Ïö¥Î°úÎìú(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentGroupsDownloadStudentListByGroupId = (
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/student_groups/download/${groupId}`, method: 'get', responseType: 'blob', signal },
    options,
  )
}

export const getStudentGroupsDownloadStudentListByGroupIdQueryKey = (groupId: number) => [
  `/api/student_groups/download/${groupId}`,
]

export type StudentGroupsDownloadStudentListByGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentGroupsDownloadStudentListByGroupId>>
>
export type StudentGroupsDownloadStudentListByGroupIdQueryError = ErrorType<unknown>

export const useStudentGroupsDownloadStudentListByGroupId = <
  TData = Awaited<ReturnType<typeof studentGroupsDownloadStudentListByGroupId>>,
  TError = ErrorType<unknown>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentGroupsDownloadStudentListByGroupId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentGroupsDownloadStudentListByGroupIdQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentGroupsDownloadStudentListByGroupId>>> = ({ signal }) =>
    studentGroupsDownloadStudentListByGroupId(groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentGroupsDownloadStudentListByGroupId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!groupId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù klass history(ÌïôÏÉù ÎßàÏù¥ÌéòÏù¥ÏßÄÏóêÏÑú ÏÇ¨Ïö©)
 */
export const studentGroupsFindKlassHistoryByStudent = (
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentGroup[]>(
    { url: `/api/student_groups/klass-history-by-student`, method: 'get', signal },
    options,
  )
}

export const getStudentGroupsFindKlassHistoryByStudentQueryKey = () => [`/api/student_groups/klass-history-by-student`]

export type StudentGroupsFindKlassHistoryByStudentQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentGroupsFindKlassHistoryByStudent>>
>
export type StudentGroupsFindKlassHistoryByStudentQueryError = ErrorType<unknown>

export const useStudentGroupsFindKlassHistoryByStudent = <
  TData = Awaited<ReturnType<typeof studentGroupsFindKlassHistoryByStudent>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof studentGroupsFindKlassHistoryByStudent>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentGroupsFindKlassHistoryByStudentQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentGroupsFindKlassHistoryByStudent>>> = ({ signal }) =>
    studentGroupsFindKlassHistoryByStudent(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentGroupsFindKlassHistoryByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÌïôÎÖÑ Í∑∏Î£π Î™©Î°ù Ï°∞Ìöå
 */
export const studentGroupsFindAllByKlasses = (
  params: StudentGroupsFindAllByKlassesParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentGroup[]>({ url: `/api/student_groups/by-klasses`, method: 'get', params, signal }, options)
}

export const getStudentGroupsFindAllByKlassesQueryKey = (params: StudentGroupsFindAllByKlassesParams) => [
  `/api/student_groups/by-klasses`,
  ...(params ? [params] : []),
]

export type StudentGroupsFindAllByKlassesQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentGroupsFindAllByKlasses>>
>
export type StudentGroupsFindAllByKlassesQueryError = ErrorType<unknown>

export const useStudentGroupsFindAllByKlasses = <
  TData = Awaited<ReturnType<typeof studentGroupsFindAllByKlasses>>,
  TError = ErrorType<unknown>,
>(
  params: StudentGroupsFindAllByKlassesParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentGroupsFindAllByKlasses>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentGroupsFindAllByKlassesQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentGroupsFindAllByKlasses>>> = ({ signal }) =>
    studentGroupsFindAllByKlasses(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentGroupsFindAllByKlasses>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏(ÌïôÏÉùÏÑ§Î¨∏) Îã®Í±¥ Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÏö©)
 */
export const studentNewsletterFindOne = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentNewsletter>({ url: `/api/student-newsletters/${id}`, method: 'get', signal }, options)
}

export const getStudentNewsletterFindOneQueryKey = (id: number) => [`/api/student-newsletters/${id}`]

export type StudentNewsletterFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof studentNewsletterFindOne>>>
export type StudentNewsletterFindOneQueryError = ErrorType<unknown>

export const useStudentNewsletterFindOne = <
  TData = Awaited<ReturnType<typeof studentNewsletterFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentNewsletterFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentNewsletterFindOneQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentNewsletterFindOne>>> = ({ signal }) =>
    studentNewsletterFindOne(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentNewsletterFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏(ÌïôÏÉùÏÑ§Î¨∏) Îã®Í±¥ Ï°∞Ìöå(ÌïôÏÉùÏö©)
 */
export const studentNewsletterFindOneByStudent = (
  newsletterId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentNewsletter>(
    { url: `/api/student-newsletters/by-student/${newsletterId}`, method: 'get', signal },
    options,
  )
}

export const getStudentNewsletterFindOneByStudentQueryKey = (newsletterId: number) => [
  `/api/student-newsletters/by-student/${newsletterId}`,
]

export type StudentNewsletterFindOneByStudentQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentNewsletterFindOneByStudent>>
>
export type StudentNewsletterFindOneByStudentQueryError = ErrorType<unknown>

export const useStudentNewsletterFindOneByStudent = <
  TData = Awaited<ReturnType<typeof studentNewsletterFindOneByStudent>>,
  TError = ErrorType<unknown>,
>(
  newsletterId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentNewsletterFindOneByStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentNewsletterFindOneByStudentQueryKey(newsletterId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentNewsletterFindOneByStudent>>> = ({ signal }) =>
    studentNewsletterFindOneByStudent(newsletterId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentNewsletterFindOneByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!newsletterId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏(ÌïôÏÉùÏÑ§Î¨∏) Î™©Î°ù Ï°∞Ìöå(by newsletterId)
 */
export const studentNewsletterFindAllByNewsletterId = (
  newsletterId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentNewsletter[]>(
    { url: `/api/student-newsletters/by-newsletter-id/${newsletterId}`, method: 'get', signal },
    options,
  )
}

export const getStudentNewsletterFindAllByNewsletterIdQueryKey = (newsletterId: number) => [
  `/api/student-newsletters/by-newsletter-id/${newsletterId}`,
]

export type StudentNewsletterFindAllByNewsletterIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentNewsletterFindAllByNewsletterId>>
>
export type StudentNewsletterFindAllByNewsletterIdQueryError = ErrorType<void>

export const useStudentNewsletterFindAllByNewsletterId = <
  TData = Awaited<ReturnType<typeof studentNewsletterFindAllByNewsletterId>>,
  TError = ErrorType<void>,
>(
  newsletterId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentNewsletterFindAllByNewsletterId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentNewsletterFindAllByNewsletterIdQueryKey(newsletterId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentNewsletterFindAllByNewsletterId>>> = ({ signal }) =>
    studentNewsletterFindAllByNewsletterId(newsletterId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentNewsletterFindAllByNewsletterId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!newsletterId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏(Í≥µÏßÄÏÇ¨Ìï≠) ÎØ∏ÌôïÏù∏Ïûê Ï°∞Ìöå(by newsletterId)
 */
export const studentNewsletterFindUnreadUsersByNewsletterId = (
  newsletterId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseChatAttendeeDto[]>(
    { url: `/api/student-newsletters/${newsletterId}/unread-notice-users`, method: 'get', signal },
    options,
  )
}

export const getStudentNewsletterFindUnreadUsersByNewsletterIdQueryKey = (newsletterId: number) => [
  `/api/student-newsletters/${newsletterId}/unread-notice-users`,
]

export type StudentNewsletterFindUnreadUsersByNewsletterIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentNewsletterFindUnreadUsersByNewsletterId>>
>
export type StudentNewsletterFindUnreadUsersByNewsletterIdQueryError = ErrorType<void>

export const useStudentNewsletterFindUnreadUsersByNewsletterId = <
  TData = Awaited<ReturnType<typeof studentNewsletterFindUnreadUsersByNewsletterId>>,
  TError = ErrorType<void>,
>(
  newsletterId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentNewsletterFindUnreadUsersByNewsletterId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentNewsletterFindUnreadUsersByNewsletterIdQueryKey(newsletterId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentNewsletterFindUnreadUsersByNewsletterId>>> = ({
    signal,
  }) => studentNewsletterFindUnreadUsersByNewsletterId(newsletterId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentNewsletterFindUnreadUsersByNewsletterId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!newsletterId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏(ÌïôÏÉùÏÑ§Î¨∏) Îã®Í±¥ Ï°∞Ìöå(by UUID)
 */
export const studentNewsletterFindOneByUUID = (
  uuid: string,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentNewsletter>({ url: `/api/student-newsletters/by-uuid/${uuid}`, method: 'get', signal }, options)
}

export const getStudentNewsletterFindOneByUUIDQueryKey = (uuid: string) => [`/api/student-newsletters/by-uuid/${uuid}`]

export type StudentNewsletterFindOneByUUIDQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentNewsletterFindOneByUUID>>
>
export type StudentNewsletterFindOneByUUIDQueryError = ErrorType<unknown>

export const useStudentNewsletterFindOneByUUID = <
  TData = Awaited<ReturnType<typeof studentNewsletterFindOneByUUID>>,
  TError = ErrorType<unknown>,
>(
  uuid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentNewsletterFindOneByUUID>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentNewsletterFindOneByUUIDQueryKey(uuid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentNewsletterFindOneByUUID>>> = ({ signal }) =>
    studentNewsletterFindOneByUUID(uuid, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentNewsletterFindOneByUUID>>, TError, TData>(queryKey, queryFn, {
    enabled: !!uuid,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏(ÌïôÏÉùÏÑ§Î¨∏) ÏäπÏù∏
 */
export const studentNewsletterApprove = (
  uuid: string,
  requestApproveStudentNewsletterDto: RequestApproveStudentNewsletterDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/student-newsletters/approve/${uuid}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestApproveStudentNewsletterDto,
    },
    options,
  )
}

export type StudentNewsletterApproveMutationResult = NonNullable<Awaited<ReturnType<typeof studentNewsletterApprove>>>
export type StudentNewsletterApproveMutationBody = RequestApproveStudentNewsletterDto
export type StudentNewsletterApproveMutationError = ErrorType<unknown>

export const useStudentNewsletterApprove = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentNewsletterApprove>>,
    TError,
    { uuid: string; data: RequestApproveStudentNewsletterDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentNewsletterApprove>>,
    { uuid: string; data: RequestApproveStudentNewsletterDto }
  > = (props) => {
    const { uuid, data } = props ?? {}

    return studentNewsletterApprove(uuid, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentNewsletterApprove>>,
    TError,
    { uuid: string; data: RequestApproveStudentNewsletterDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í∞ÄÏ†ïÌÜµÏã†Î¨∏(ÌïôÏÉùÏÑ§Î¨∏) ÎãµÎ≥Ä
 */
export const studentNewsletterUpsert = (
  requestUpsertStudentNewsletterDto: RequestUpsertStudentNewsletterDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<StudentNewsletter>(
    {
      url: `/api/student-newsletters`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpsertStudentNewsletterDto,
    },
    options,
  )
}

export type StudentNewsletterUpsertMutationResult = NonNullable<Awaited<ReturnType<typeof studentNewsletterUpsert>>>
export type StudentNewsletterUpsertMutationBody = RequestUpsertStudentNewsletterDto
export type StudentNewsletterUpsertMutationError = ErrorType<unknown>

export const useStudentNewsletterUpsert = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentNewsletterUpsert>>,
    TError,
    { data: RequestUpsertStudentNewsletterDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentNewsletterUpsert>>,
    { data: RequestUpsertStudentNewsletterDto }
  > = (props) => {
    const { data } = props ?? {}

    return studentNewsletterUpsert(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentNewsletterUpsert>>,
    TError,
    { data: RequestUpsertStudentNewsletterDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉùÏùò ÏßÑÌïô/ÌïôÏäµ Ï†ïÎ≥¥
 */
export const studentPropertyFindByStudentId = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentProperty>({ url: `/api/studentproperty/${studentId}`, method: 'get', signal }, options)
}

export const getStudentPropertyFindByStudentIdQueryKey = (studentId: number) => [`/api/studentproperty/${studentId}`]

export type StudentPropertyFindByStudentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentPropertyFindByStudentId>>
>
export type StudentPropertyFindByStudentIdQueryError = ErrorType<unknown>

export const useStudentPropertyFindByStudentId = <
  TData = Awaited<ReturnType<typeof studentPropertyFindByStudentId>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentPropertyFindByStudentId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentPropertyFindByStudentIdQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentPropertyFindByStudentId>>> = ({ signal }) =>
    studentPropertyFindByStudentId(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentPropertyFindByStudentId>>, TError, TData>(queryKey, queryFn, {
    enabled: !!studentId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÏùò ÏßÑÌïô/ÌïôÏäµ Ï†ïÎ≥¥ Ï∂îÍ∞Ä/ÏàòÏ†ï
 */
export const studentPropertyCreateOrUpdate = (
  requestStudentPropertyDto: RequestStudentPropertyDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<StudentProperty>(
    {
      url: `/api/studentproperty`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestStudentPropertyDto,
    },
    options,
  )
}

export type StudentPropertyCreateOrUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentPropertyCreateOrUpdate>>
>
export type StudentPropertyCreateOrUpdateMutationBody = RequestStudentPropertyDto
export type StudentPropertyCreateOrUpdateMutationError = ErrorType<void>

export const useStudentPropertyCreateOrUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentPropertyCreateOrUpdate>>,
    TError,
    { data: RequestStudentPropertyDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentPropertyCreateOrUpdate>>,
    { data: RequestStudentPropertyDto }
  > = (props) => {
    const { data } = props ?? {}

    return studentPropertyCreateOrUpdate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentPropertyCreateOrUpdate>>,
    TError,
    { data: RequestStudentPropertyDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉùÎ≥Ñ ÌñâÎèôÌäπÏÑ± Î∞è Ï¢ÖÌï©ÏùòÍ≤¨ Î™©Î°ù Ï°∞Ìöå
 */
export const studentRecordontrollerFindAnnualReviewByStudentId = (
  params: StudentRecordontrollerFindAnnualReviewByStudentIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentRecord[]>({ url: `/api/student-records/annual-review`, method: 'get', params, signal }, options)
}

export const getStudentRecordontrollerFindAnnualReviewByStudentIdQueryKey = (
  params: StudentRecordontrollerFindAnnualReviewByStudentIdParams,
) => [`/api/student-records/annual-review`, ...(params ? [params] : [])]

export type StudentRecordontrollerFindAnnualReviewByStudentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentRecordontrollerFindAnnualReviewByStudentId>>
>
export type StudentRecordontrollerFindAnnualReviewByStudentIdQueryError = ErrorType<void>

export const useStudentRecordontrollerFindAnnualReviewByStudentId = <
  TData = Awaited<ReturnType<typeof studentRecordontrollerFindAnnualReviewByStudentId>>,
  TError = ErrorType<void>,
>(
  params: StudentRecordontrollerFindAnnualReviewByStudentIdParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof studentRecordontrollerFindAnnualReviewByStudentId>>,
      TError,
      TData
    >
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentRecordontrollerFindAnnualReviewByStudentIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentRecordontrollerFindAnnualReviewByStudentId>>> = ({
    signal,
  }) => studentRecordontrollerFindAnnualReviewByStudentId(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentRecordontrollerFindAnnualReviewByStudentId>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÎ≥Ñ ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä Î™©Î°ù Ï°∞Ìöå
 */
export const studentRecordontrollerFindByStudentId = (
  params: StudentRecordontrollerFindByStudentIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentRecord[]>({ url: `/api/student-records`, method: 'get', params, signal }, options)
}

export const getStudentRecordontrollerFindByStudentIdQueryKey = (
  params: StudentRecordontrollerFindByStudentIdParams,
) => [`/api/student-records`, ...(params ? [params] : [])]

export type StudentRecordontrollerFindByStudentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentRecordontrollerFindByStudentId>>
>
export type StudentRecordontrollerFindByStudentIdQueryError = ErrorType<void>

export const useStudentRecordontrollerFindByStudentId = <
  TData = Awaited<ReturnType<typeof studentRecordontrollerFindByStudentId>>,
  TError = ErrorType<void>,
>(
  params: StudentRecordontrollerFindByStudentIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentRecordontrollerFindByStudentId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentRecordontrollerFindByStudentIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentRecordontrollerFindByStudentId>>> = ({ signal }) =>
    studentRecordontrollerFindByStudentId(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentRecordontrollerFindByStudentId>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä ÏûëÏÑ±
 */
export const studentRecordontrollerCreate = (
  requestCreateStudentRecordDto: RequestCreateStudentRecordDto,
  params: StudentRecordontrollerCreateParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<StudentRecord>(
    {
      url: `/api/student-records`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateStudentRecordDto,
      params,
    },
    options,
  )
}

export type StudentRecordontrollerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentRecordontrollerCreate>>
>
export type StudentRecordontrollerCreateMutationBody = RequestCreateStudentRecordDto
export type StudentRecordontrollerCreateMutationError = ErrorType<void>

export const useStudentRecordontrollerCreate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentRecordontrollerCreate>>,
    TError,
    { data: RequestCreateStudentRecordDto; params: StudentRecordontrollerCreateParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentRecordontrollerCreate>>,
    { data: RequestCreateStudentRecordDto; params: StudentRecordontrollerCreateParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return studentRecordontrollerCreate(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentRecordontrollerCreate>>,
    TError,
    { data: RequestCreateStudentRecordDto; params: StudentRecordontrollerCreateParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í¥ÄÏ∞∞Í∏∞Î°ù ÏàòÏ†ï
 */
export const studentRecordontrollerUpdate = (
  id: number,
  studentRecordontrollerUpdateBody: StudentRecordontrollerUpdateBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<UpdateResult>(
    {
      url: `/api/student-records/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: studentRecordontrollerUpdateBody,
    },
    options,
  )
}

export type StudentRecordontrollerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentRecordontrollerUpdate>>
>
export type StudentRecordontrollerUpdateMutationBody = StudentRecordontrollerUpdateBody
export type StudentRecordontrollerUpdateMutationError = ErrorType<void>

export const useStudentRecordontrollerUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentRecordontrollerUpdate>>,
    TError,
    { id: number; data: StudentRecordontrollerUpdateBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentRecordontrollerUpdate>>,
    { id: number; data: StudentRecordontrollerUpdateBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return studentRecordontrollerUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentRecordontrollerUpdate>>,
    TError,
    { id: number; data: StudentRecordontrollerUpdateBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèôÍ∏∞Î°ù Ï¥àÏïà ÏÇ≠Ï†ú
 */
export const studentRecordontrollerDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<StudentRecord>({ url: `/api/student-records/${id}`, method: 'delete' }, options)
}

export type StudentRecordontrollerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentRecordontrollerDelete>>
>

export type StudentRecordontrollerDeleteMutationError = ErrorType<void>

export const useStudentRecordontrollerDelete = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentRecordontrollerDelete>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof studentRecordontrollerDelete>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return studentRecordontrollerDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof studentRecordontrollerDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏÉùÌôúÍ∏∞Î°ùÎ∂Ä Ï¥ùÏ†ïÎ¶¨ Îã§Ïö¥Î°úÎìú
 */
export const studentRecordontrollerDownloadRecordSummary = (
  groupId: number,
  params: StudentRecordontrollerDownloadRecordSummaryParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Blob>(
    { url: `/api/student-records/download/summary/${groupId}`, method: 'get', params, responseType: 'blob', signal },
    options,
  )
}

export const getStudentRecordontrollerDownloadRecordSummaryQueryKey = (
  groupId: number,
  params: StudentRecordontrollerDownloadRecordSummaryParams,
) => [`/api/student-records/download/summary/${groupId}`, ...(params ? [params] : [])]

export type StudentRecordontrollerDownloadRecordSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentRecordontrollerDownloadRecordSummary>>
>
export type StudentRecordontrollerDownloadRecordSummaryQueryError = ErrorType<unknown>

export const useStudentRecordontrollerDownloadRecordSummary = <
  TData = Awaited<ReturnType<typeof studentRecordontrollerDownloadRecordSummary>>,
  TError = ErrorType<unknown>,
>(
  groupId: number,
  params: StudentRecordontrollerDownloadRecordSummaryParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentRecordontrollerDownloadRecordSummary>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentRecordontrollerDownloadRecordSummaryQueryKey(groupId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentRecordontrollerDownloadRecordSummary>>> = ({
    signal,
  }) => studentRecordontrollerDownloadRecordSummary(groupId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentRecordontrollerDownloadRecordSummary>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!groupId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Ïó≠Ìï† Îì±Î°ù/ÏàòÏ†ï
 */
export const studentRolesUpsertStudentRole = (
  requestUpsertStudentRoleDto: RequestUpsertStudentRoleDto[],
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/student-role/upsert`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpsertStudentRoleDto,
    },
    options,
  )
}

export type StudentRolesUpsertStudentRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentRolesUpsertStudentRole>>
>
export type StudentRolesUpsertStudentRoleMutationBody = RequestUpsertStudentRoleDto[]
export type StudentRolesUpsertStudentRoleMutationError = ErrorType<unknown>

export const useStudentRolesUpsertStudentRole = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentRolesUpsertStudentRole>>,
    TError,
    { data: RequestUpsertStudentRoleDto[] },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentRolesUpsertStudentRole>>,
    { data: RequestUpsertStudentRoleDto[] }
  > = (props) => {
    const { data } = props ?? {}

    return studentRolesUpsertStudentRole(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentRolesUpsertStudentRole>>,
    TError,
    { data: RequestUpsertStudentRoleDto[] },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉù ÏûêÍ∏∞ ÌèâÍ∞Ä (ÏÑ†ÏÉùÎãò Ï°∞Ìöå)
 */
export const studentSelfAssessmentFindStudentAssessment = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentSelfAssessment>(
    { url: `/api/student-self-assessments/student/${studentId}`, method: 'get', signal },
    options,
  )
}

export const getStudentSelfAssessmentFindStudentAssessmentQueryKey = (studentId: number) => [
  `/api/student-self-assessments/student/${studentId}`,
]

export type StudentSelfAssessmentFindStudentAssessmentQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentSelfAssessmentFindStudentAssessment>>
>
export type StudentSelfAssessmentFindStudentAssessmentQueryError = ErrorType<void>

export const useStudentSelfAssessmentFindStudentAssessment = <
  TData = Awaited<ReturnType<typeof studentSelfAssessmentFindStudentAssessment>>,
  TError = ErrorType<void>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof studentSelfAssessmentFindStudentAssessment>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentSelfAssessmentFindStudentAssessmentQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentSelfAssessmentFindStudentAssessment>>> = ({ signal }) =>
    studentSelfAssessmentFindStudentAssessment(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentSelfAssessmentFindStudentAssessment>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÏûêÍ∏∞ ÌèâÍ∞Ä
 */
export const studentSelfAssessmentFindMyAssessment = (
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<StudentSelfAssessment>({ url: `/api/student-self-assessments`, method: 'get', signal }, options)
}

export const getStudentSelfAssessmentFindMyAssessmentQueryKey = () => [`/api/student-self-assessments`]

export type StudentSelfAssessmentFindMyAssessmentQueryResult = NonNullable<
  Awaited<ReturnType<typeof studentSelfAssessmentFindMyAssessment>>
>
export type StudentSelfAssessmentFindMyAssessmentQueryError = ErrorType<void>

export const useStudentSelfAssessmentFindMyAssessment = <
  TData = Awaited<ReturnType<typeof studentSelfAssessmentFindMyAssessment>>,
  TError = ErrorType<void>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof studentSelfAssessmentFindMyAssessment>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getStudentSelfAssessmentFindMyAssessmentQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof studentSelfAssessmentFindMyAssessment>>> = ({ signal }) =>
    studentSelfAssessmentFindMyAssessment(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof studentSelfAssessmentFindMyAssessment>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÏûêÍ∏∞ ÌèâÍ∞Ä Îì±Î°ù
 */
export const studentSelfAssessmentCreate = (
  requestCreateStudentSelfAssessmentDto: RequestCreateStudentSelfAssessmentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<StudentSelfAssessment>(
    {
      url: `/api/student-self-assessments`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateStudentSelfAssessmentDto,
    },
    options,
  )
}

export type StudentSelfAssessmentCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentSelfAssessmentCreate>>
>
export type StudentSelfAssessmentCreateMutationBody = RequestCreateStudentSelfAssessmentDto
export type StudentSelfAssessmentCreateMutationError = ErrorType<unknown>

export const useStudentSelfAssessmentCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentSelfAssessmentCreate>>,
    TError,
    { data: RequestCreateStudentSelfAssessmentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentSelfAssessmentCreate>>,
    { data: RequestCreateStudentSelfAssessmentDto }
  > = (props) => {
    const { data } = props ?? {}

    return studentSelfAssessmentCreate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentSelfAssessmentCreate>>,
    TError,
    { data: RequestCreateStudentSelfAssessmentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌñâÎèôÎ∞úÎã¨ Î∞è Ï¢ÖÌï©ÏùòÍ≤¨ GPT ÏûëÏÑ±
 */
export const studentSelfAssessmentGetAnnualReview = (
  studentId: number,
  requestGetAnnualReviewBodyDto: RequestGetAnnualReviewBodyDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>(
    {
      url: `/api/student-self-assessments/annual_review/${studentId}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestGetAnnualReviewBodyDto,
    },
    options,
  )
}

export type StudentSelfAssessmentGetAnnualReviewMutationResult = NonNullable<
  Awaited<ReturnType<typeof studentSelfAssessmentGetAnnualReview>>
>
export type StudentSelfAssessmentGetAnnualReviewMutationBody = RequestGetAnnualReviewBodyDto
export type StudentSelfAssessmentGetAnnualReviewMutationError = ErrorType<void>

export const useStudentSelfAssessmentGetAnnualReview = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof studentSelfAssessmentGetAnnualReview>>,
    TError,
    { studentId: number; data: RequestGetAnnualReviewBodyDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof studentSelfAssessmentGetAnnualReview>>,
    { studentId: number; data: RequestGetAnnualReviewBodyDto }
  > = (props) => {
    const { studentId, data } = props ?? {}

    return studentSelfAssessmentGetAnnualReview(studentId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof studentSelfAssessmentGetAnnualReview>>,
    TError,
    { studentId: number; data: RequestGetAnnualReviewBodyDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÉùÌôúÍ∏∞Î°ù Î™©Î°ù Ï°∞Ìöå
 */
export const summariesFindByStudentGroupId = (
  params: SummariesFindByStudentGroupIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Summary[]>({ url: `/api/summaries`, method: 'get', params, signal }, options)
}

export const getSummariesFindByStudentGroupIdQueryKey = (params: SummariesFindByStudentGroupIdParams) => [
  `/api/summaries`,
  ...(params ? [params] : []),
]

export type SummariesFindByStudentGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof summariesFindByStudentGroupId>>
>
export type SummariesFindByStudentGroupIdQueryError = ErrorType<unknown>

export const useSummariesFindByStudentGroupId = <
  TData = Awaited<ReturnType<typeof summariesFindByStudentGroupId>>,
  TError = ErrorType<unknown>,
>(
  params: SummariesFindByStudentGroupIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof summariesFindByStudentGroupId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSummariesFindByStudentGroupIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof summariesFindByStudentGroupId>>> = ({ signal }) =>
    summariesFindByStudentGroupId(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof summariesFindByStudentGroupId>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÉùÌôúÍ∏∞Î°ù ÏÉùÏÑ±
 */
export const summariesCreate = (
  requestCreateSummaryDto: RequestCreateSummaryDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Summary>(
    {
      url: `/api/summaries`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateSummaryDto,
    },
    options,
  )
}

export type SummariesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof summariesCreate>>>
export type SummariesCreateMutationBody = RequestCreateSummaryDto
export type SummariesCreateMutationError = ErrorType<unknown>

export const useSummariesCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof summariesCreate>>,
    TError,
    { data: RequestCreateSummaryDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof summariesCreate>>, { data: RequestCreateSummaryDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return summariesCreate(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof summariesCreate>>, TError, { data: RequestCreateSummaryDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏÉùÌôúÍ∏∞Î°ù ÏàòÏ†ï
 */
export const summariesUpdate = (
  id: number,
  requestUpdateSummaryDto: RequestUpdateSummaryDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/summaries/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateSummaryDto,
    },
    options,
  )
}

export type SummariesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof summariesUpdate>>>
export type SummariesUpdateMutationBody = RequestUpdateSummaryDto
export type SummariesUpdateMutationError = ErrorType<void>

export const useSummariesUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof summariesUpdate>>,
    TError,
    { id: number; data: RequestUpdateSummaryDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof summariesUpdate>>,
    { id: number; data: RequestUpdateSummaryDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return summariesUpdate(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof summariesUpdate>>,
    TError,
    { id: number; data: RequestUpdateSummaryDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÉùÌôúÍ∏∞Î°ù ÏÇ≠Ï†ú
 */
export const summariesDelete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/summaries/${id}`, method: 'delete' }, options)
}

export type SummariesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof summariesDelete>>>

export type SummariesDeleteMutationError = ErrorType<unknown>

export const useSummariesDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof summariesDelete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof summariesDelete>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return summariesDelete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof summariesDelete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @deprecated
 * @summary ÍµêÏÇ¨ Í∑∏Î£π Î™©Î°ù Ï°∞Ìöå, group controller Ï°∞Ìöå ÏÇ¨Ïö©ÌïòÎèÑÎ°ù Î≥ÄÍ≤Ω
 */
export const teacherGroupsGetTeacherGroups = (
  params: TeacherGroupsGetTeacherGroupsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>({ url: `/api/teacher-groups`, method: 'get', params, signal }, options)
}

export const getTeacherGroupsGetTeacherGroupsQueryKey = (params: TeacherGroupsGetTeacherGroupsParams) => [
  `/api/teacher-groups`,
  ...(params ? [params] : []),
]

export type TeacherGroupsGetTeacherGroupsQueryResult = NonNullable<
  Awaited<ReturnType<typeof teacherGroupsGetTeacherGroups>>
>
export type TeacherGroupsGetTeacherGroupsQueryError = ErrorType<unknown>

export const useTeacherGroupsGetTeacherGroups = <
  TData = Awaited<ReturnType<typeof teacherGroupsGetTeacherGroups>>,
  TError = ErrorType<unknown>,
>(
  params: TeacherGroupsGetTeacherGroupsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherGroupsGetTeacherGroups>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherGroupsGetTeacherGroupsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherGroupsGetTeacherGroups>>> = ({ signal }) =>
    teacherGroupsGetTeacherGroups(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherGroupsGetTeacherGroups>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãòÏùò Í≥ºÎ™© Ï°∞Ìöå
 */
export const teacherGroupsFindBySubject = (
  params?: TeacherGroupsFindBySubjectParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<TeacherGroup[]>({ url: `/api/teacher-groups/subject`, method: 'get', params, signal }, options)
}

export const getTeacherGroupsFindBySubjectQueryKey = (params?: TeacherGroupsFindBySubjectParams) => [
  `/api/teacher-groups/subject`,
  ...(params ? [params] : []),
]

export type TeacherGroupsFindBySubjectQueryResult = NonNullable<Awaited<ReturnType<typeof teacherGroupsFindBySubject>>>
export type TeacherGroupsFindBySubjectQueryError = ErrorType<unknown>

export const useTeacherGroupsFindBySubject = <
  TData = Awaited<ReturnType<typeof teacherGroupsFindBySubject>>,
  TError = ErrorType<unknown>,
>(
  params?: TeacherGroupsFindBySubjectParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherGroupsFindBySubject>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherGroupsFindBySubjectQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherGroupsFindBySubject>>> = ({ signal }) =>
    teacherGroupsFindBySubject(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherGroupsFindBySubject>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãòÏùò Í∑∏Î£π Ï°∞Ìöå
 */
export const teacherGroupsFindAllByTeacher = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<TeacherGroup[]>({ url: `/api/teacher-groups/by-teacher`, method: 'get', signal }, options)
}

export const getTeacherGroupsFindAllByTeacherQueryKey = () => [`/api/teacher-groups/by-teacher`]

export type TeacherGroupsFindAllByTeacherQueryResult = NonNullable<
  Awaited<ReturnType<typeof teacherGroupsFindAllByTeacher>>
>
export type TeacherGroupsFindAllByTeacherQueryError = ErrorType<unknown>

export const useTeacherGroupsFindAllByTeacher = <
  TData = Awaited<ReturnType<typeof teacherGroupsFindAllByTeacher>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof teacherGroupsFindAllByTeacher>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherGroupsFindAllByTeacherQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherGroupsFindAllByTeacher>>> = ({ signal }) =>
    teacherGroupsFindAllByTeacher(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherGroupsFindAllByTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Í∑∏Î£πÏóê ÏÜçÌïú ÏÑ†ÏÉùÎãò Ï°∞Ìöå
 */
export const teacherGroupsFindTeachersWithKlassByGroupId = (
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<TeacherGroup[]>({ url: `/api/teacher-groups/by-group/${groupId}`, method: 'get', signal }, options)
}

export const getTeacherGroupsFindTeachersWithKlassByGroupIdQueryKey = (groupId: number) => [
  `/api/teacher-groups/by-group/${groupId}`,
]

export type TeacherGroupsFindTeachersWithKlassByGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof teacherGroupsFindTeachersWithKlassByGroupId>>
>
export type TeacherGroupsFindTeachersWithKlassByGroupIdQueryError = ErrorType<unknown>

export const useTeacherGroupsFindTeachersWithKlassByGroupId = <
  TData = Awaited<ReturnType<typeof teacherGroupsFindTeachersWithKlassByGroupId>>,
  TError = ErrorType<unknown>,
>(
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherGroupsFindTeachersWithKlassByGroupId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherGroupsFindTeachersWithKlassByGroupIdQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherGroupsFindTeachersWithKlassByGroupId>>> = ({
    signal,
  }) => teacherGroupsFindTeachersWithKlassByGroupId(groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherGroupsFindTeachersWithKlassByGroupId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!groupId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÍµêÏÇ¨ ÌïôÏÉù ÌèâÍ∞Ä
 */
export const teacherStudentAssessmentFindStudentAssessment = (
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<TeacherStudentAssessment>(
    { url: `/api/teacher-student-assessments/student/${studentId}`, method: 'get', signal },
    options,
  )
}

export const getTeacherStudentAssessmentFindStudentAssessmentQueryKey = (studentId: number) => [
  `/api/teacher-student-assessments/student/${studentId}`,
]

export type TeacherStudentAssessmentFindStudentAssessmentQueryResult = NonNullable<
  Awaited<ReturnType<typeof teacherStudentAssessmentFindStudentAssessment>>
>
export type TeacherStudentAssessmentFindStudentAssessmentQueryError = ErrorType<void>

export const useTeacherStudentAssessmentFindStudentAssessment = <
  TData = Awaited<ReturnType<typeof teacherStudentAssessmentFindStudentAssessment>>,
  TError = ErrorType<void>,
>(
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof teacherStudentAssessmentFindStudentAssessment>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTeacherStudentAssessmentFindStudentAssessmentQueryKey(studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof teacherStudentAssessmentFindStudentAssessment>>> = ({
    signal,
  }) => teacherStudentAssessmentFindStudentAssessment(studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof teacherStudentAssessmentFindStudentAssessment>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÍµêÏÇ¨ ÌïôÏÉù ÌèâÍ∞Ä Îì±Î°ù
 */
export const teacherStudentAssessmentCreate = (
  requestCreateTeacherStudentAssessmentDto: RequestCreateTeacherStudentAssessmentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<TeacherStudentAssessment>(
    {
      url: `/api/teacher-student-assessments`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateTeacherStudentAssessmentDto,
    },
    options,
  )
}

export type TeacherStudentAssessmentCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof teacherStudentAssessmentCreate>>
>
export type TeacherStudentAssessmentCreateMutationBody = RequestCreateTeacherStudentAssessmentDto
export type TeacherStudentAssessmentCreateMutationError = ErrorType<unknown>

export const useTeacherStudentAssessmentCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof teacherStudentAssessmentCreate>>,
    TError,
    { data: RequestCreateTeacherStudentAssessmentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof teacherStudentAssessmentCreate>>,
    { data: RequestCreateTeacherStudentAssessmentDto }
  > = (props) => {
    const { data } = props ?? {}

    return teacherStudentAssessmentCreate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof teacherStudentAssessmentCreate>>,
    TError,
    { data: RequestCreateTeacherStudentAssessmentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏãúÍ∞ÑÌëú Îã®Í±¥ Ï°∞Ìöå
 */
export const timetablesFindOne = (
  year: number,
  semester: number,
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Timetable>({ url: `/api/timetable-v1/${year}/${semester}/${groupId}`, method: 'get', signal }, options)
}

export const getTimetablesFindOneQueryKey = (year: number, semester: number, groupId: number) => [
  `/api/timetable-v1/${year}/${semester}/${groupId}`,
]

export type TimetablesFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof timetablesFindOne>>>
export type TimetablesFindOneQueryError = ErrorType<unknown>

export const useTimetablesFindOne = <
  TData = Awaited<ReturnType<typeof timetablesFindOne>>,
  TError = ErrorType<unknown>,
>(
  year: number,
  semester: number,
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetablesFindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetablesFindOneQueryKey(year, semester, groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetablesFindOne>>> = ({ signal }) =>
    timetablesFindOne(year, semester, groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetablesFindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!(year && semester && groupId),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏãúÍ∞ÑÌëú Ï∂îÍ∞Ä/ÏàòÏ†ï
 */
export const timetablesCreateOrUpdate = (
  requestCreateTimetableDto: RequestCreateTimetableDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<Timetable>(
    {
      url: `/api/timetable-v1`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateTimetableDto,
    },
    options,
  )
}

export type TimetablesCreateOrUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof timetablesCreateOrUpdate>>>
export type TimetablesCreateOrUpdateMutationBody = RequestCreateTimetableDto
export type TimetablesCreateOrUpdateMutationError = ErrorType<void>

export const useTimetablesCreateOrUpdate = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timetablesCreateOrUpdate>>,
    TError,
    { data: RequestCreateTimetableDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timetablesCreateOrUpdate>>,
    { data: RequestCreateTimetableDto }
  > = (props) => {
    const { data } = props ?? {}

    return timetablesCreateOrUpdate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof timetablesCreateOrUpdate>>,
    TError,
    { data: RequestCreateTimetableDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏãúÍ∞ÑÌëú v2 Îã®Í±¥ Ï°∞Ìöå
 */
export const timetablesV2FindOne = (
  year: number,
  semester: number,
  groupId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<TimetableV2>({ url: `/api/timetable/${year}/${semester}/${groupId}`, method: 'get', signal }, options)
}

export const getTimetablesV2FindOneQueryKey = (year: number, semester: number, groupId: number) => [
  `/api/timetable/${year}/${semester}/${groupId}`,
]

export type TimetablesV2FindOneQueryResult = NonNullable<Awaited<ReturnType<typeof timetablesV2FindOne>>>
export type TimetablesV2FindOneQueryError = ErrorType<unknown>

export const useTimetablesV2FindOne = <
  TData = Awaited<ReturnType<typeof timetablesV2FindOne>>,
  TError = ErrorType<unknown>,
>(
  year: number,
  semester: number,
  groupId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetablesV2FindOne>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetablesV2FindOneQueryKey(year, semester, groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetablesV2FindOne>>> = ({ signal }) =>
    timetablesV2FindOne(year, semester, groupId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetablesV2FindOne>>, TError, TData>(queryKey, queryFn, {
    enabled: !!(year && semester && groupId),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏãúÍ∞ÑÌëú v2 ÏÑ†ÏÉùÎãò Î™©Î°ù
 */
export const timetablesV2GetAllTeacher = (
  params: TimetablesV2GetAllTeacherParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseTimetableV2TeacherDto[]>(
    { url: `/api/timetable/allteacher`, method: 'get', params, signal },
    options,
  )
}

export const getTimetablesV2GetAllTeacherQueryKey = (params: TimetablesV2GetAllTeacherParams) => [
  `/api/timetable/allteacher`,
  ...(params ? [params] : []),
]

export type TimetablesV2GetAllTeacherQueryResult = NonNullable<Awaited<ReturnType<typeof timetablesV2GetAllTeacher>>>
export type TimetablesV2GetAllTeacherQueryError = ErrorType<unknown>

export const useTimetablesV2GetAllTeacher = <
  TData = Awaited<ReturnType<typeof timetablesV2GetAllTeacher>>,
  TError = ErrorType<unknown>,
>(
  params: TimetablesV2GetAllTeacherParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetablesV2GetAllTeacher>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetablesV2GetAllTeacherQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetablesV2GetAllTeacher>>> = ({ signal }) =>
    timetablesV2GetAllTeacher(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetablesV2GetAllTeacher>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÏãúÍ∞ÑÌëú v2
 */
export const timetablesV2FindOneByStudent = (
  params: TimetablesV2FindOneByStudentParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<TimetableV2Student>({ url: `/api/timetable/by-student`, method: 'get', params, signal }, options)
}

export const getTimetablesV2FindOneByStudentQueryKey = (params: TimetablesV2FindOneByStudentParams) => [
  `/api/timetable/by-student`,
  ...(params ? [params] : []),
]

export type TimetablesV2FindOneByStudentQueryResult = NonNullable<
  Awaited<ReturnType<typeof timetablesV2FindOneByStudent>>
>
export type TimetablesV2FindOneByStudentQueryError = ErrorType<unknown>

export const useTimetablesV2FindOneByStudent = <
  TData = Awaited<ReturnType<typeof timetablesV2FindOneByStudent>>,
  TError = ErrorType<unknown>,
>(
  params: TimetablesV2FindOneByStudentParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetablesV2FindOneByStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetablesV2FindOneByStudentQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetablesV2FindOneByStudent>>> = ({ signal }) =>
    timetablesV2FindOneByStudent(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetablesV2FindOneByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãòÏù¥ ÌïôÏÉù ÏãúÍ∞ÑÌëú Ï°∞Ìöå
 */
export const timetablesV2FindOneByStudentId = (
  id: number,
  params: TimetablesV2FindOneByStudentIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<TimetableV2Student>({ url: `/api/timetable/student/${id}`, method: 'get', params, signal }, options)
}

export const getTimetablesV2FindOneByStudentIdQueryKey = (id: number, params: TimetablesV2FindOneByStudentIdParams) => [
  `/api/timetable/student/${id}`,
  ...(params ? [params] : []),
]

export type TimetablesV2FindOneByStudentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof timetablesV2FindOneByStudentId>>
>
export type TimetablesV2FindOneByStudentIdQueryError = ErrorType<unknown>

export const useTimetablesV2FindOneByStudentId = <
  TData = Awaited<ReturnType<typeof timetablesV2FindOneByStudentId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  params: TimetablesV2FindOneByStudentIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetablesV2FindOneByStudentId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetablesV2FindOneByStudentIdQueryKey(id, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetablesV2FindOneByStudentId>>> = ({ signal }) =>
    timetablesV2FindOneByStudentId(id, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetablesV2FindOneByStudentId>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏãúÍ∞ÑÌëú v2 ÏûêÎ¶¨Î∞∞ÏπòÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
 */
export const timetablesV2UpdateSeatPosition = (
  id: number,
  timetablesV2UpdateSeatPositionBody: TimetablesV2UpdateSeatPositionBody,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<TimetableV2>(
    {
      url: `/api/timetable/update-seat-position/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: timetablesV2UpdateSeatPositionBody,
    },
    options,
  )
}

export type TimetablesV2UpdateSeatPositionMutationResult = NonNullable<
  Awaited<ReturnType<typeof timetablesV2UpdateSeatPosition>>
>
export type TimetablesV2UpdateSeatPositionMutationBody = TimetablesV2UpdateSeatPositionBody
export type TimetablesV2UpdateSeatPositionMutationError = ErrorType<unknown>

export const useTimetablesV2UpdateSeatPosition = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof timetablesV2UpdateSeatPosition>>,
    TError,
    { id: number; data: TimetablesV2UpdateSeatPositionBody },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof timetablesV2UpdateSeatPosition>>,
    { id: number; data: TimetablesV2UpdateSeatPositionBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return timetablesV2UpdateSeatPosition(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof timetablesV2UpdateSeatPosition>>,
    TError,
    { id: number; data: TimetablesV2UpdateSeatPositionBody },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÍ∏â ÏãúÍ∞ÑÌëú Ï°∞Ìöå
 */
export const timetablev3GetTimetableByGroupId = (
  groupId: number,
  params: Timetablev3GetTimetableByGroupIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseTimetableV3Dto[]>(
    { url: `/api/timetable-v3/group/${groupId}`, method: 'get', params, signal },
    options,
  )
}

export const getTimetablev3GetTimetableByGroupIdQueryKey = (
  groupId: number,
  params: Timetablev3GetTimetableByGroupIdParams,
) => [`/api/timetable-v3/group/${groupId}`, ...(params ? [params] : [])]

export type Timetablev3GetTimetableByGroupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof timetablev3GetTimetableByGroupId>>
>
export type Timetablev3GetTimetableByGroupIdQueryError = ErrorType<void>

export const useTimetablev3GetTimetableByGroupId = <
  TData = Awaited<ReturnType<typeof timetablev3GetTimetableByGroupId>>,
  TError = ErrorType<void>,
>(
  groupId: number,
  params: Timetablev3GetTimetableByGroupIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetablev3GetTimetableByGroupId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetablev3GetTimetableByGroupIdQueryKey(groupId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetablev3GetTimetableByGroupId>>> = ({ signal }) =>
    timetablev3GetTimetableByGroupId(groupId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetablev3GetTimetableByGroupId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!groupId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù ÏãúÍ∞ÑÌëú Ï°∞Ìöå
 */
export const timetablev3GetTimetableByStudentId = (
  studentId: number,
  params: Timetablev3GetTimetableByStudentIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseTimetableV3Dto[]>(
    { url: `/api/timetable-v3/student/${studentId}`, method: 'get', params, signal },
    options,
  )
}

export const getTimetablev3GetTimetableByStudentIdQueryKey = (
  studentId: number,
  params: Timetablev3GetTimetableByStudentIdParams,
) => [`/api/timetable-v3/student/${studentId}`, ...(params ? [params] : [])]

export type Timetablev3GetTimetableByStudentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof timetablev3GetTimetableByStudentId>>
>
export type Timetablev3GetTimetableByStudentIdQueryError = ErrorType<void>

export const useTimetablev3GetTimetableByStudentId = <
  TData = Awaited<ReturnType<typeof timetablev3GetTimetableByStudentId>>,
  TError = ErrorType<void>,
>(
  studentId: number,
  params: Timetablev3GetTimetableByStudentIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetablev3GetTimetableByStudentId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetablev3GetTimetableByStudentIdQueryKey(studentId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetablev3GetTimetableByStudentId>>> = ({ signal }) =>
    timetablev3GetTimetableByStudentId(studentId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetablev3GetTimetableByStudentId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ†ÏÉùÎãò ÏãúÍ∞ÑÌëú Ï°∞Ìöå
 */
export const timetablev3GetTimetableByTeacherId = (
  teacherId: number,
  params: Timetablev3GetTimetableByTeacherIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseTimetableV3Dto[]>(
    { url: `/api/timetable-v3/teacher/${teacherId}`, method: 'get', params, signal },
    options,
  )
}

export const getTimetablev3GetTimetableByTeacherIdQueryKey = (
  teacherId: number,
  params: Timetablev3GetTimetableByTeacherIdParams,
) => [`/api/timetable-v3/teacher/${teacherId}`, ...(params ? [params] : [])]

export type Timetablev3GetTimetableByTeacherIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof timetablev3GetTimetableByTeacherId>>
>
export type Timetablev3GetTimetableByTeacherIdQueryError = ErrorType<void>

export const useTimetablev3GetTimetableByTeacherId = <
  TData = Awaited<ReturnType<typeof timetablev3GetTimetableByTeacherId>>,
  TError = ErrorType<void>,
>(
  teacherId: number,
  params: Timetablev3GetTimetableByTeacherIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof timetablev3GetTimetableByTeacherId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTimetablev3GetTimetableByTeacherIdQueryKey(teacherId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof timetablev3GetTimetableByTeacherId>>> = ({ signal }) =>
    timetablev3GetTimetableByTeacherId(teacherId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof timetablev3GetTimetableByTeacherId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!teacherId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏïÑÏù¥Îîî Ï∞æÍ∏∞
 */
export const userFindId = (
  params: UserFindIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<boolean>({ url: `/api/users/find-id`, method: 'get', params, signal }, options)
}

export const getUserFindIdQueryKey = (params: UserFindIdParams) => [`/api/users/find-id`, ...(params ? [params] : [])]

export type UserFindIdQueryResult = NonNullable<Awaited<ReturnType<typeof userFindId>>>
export type UserFindIdQueryError = ErrorType<unknown>

export const useUserFindId = <TData = Awaited<ReturnType<typeof userFindId>>, TError = ErrorType<unknown>>(
  params: UserFindIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userFindId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserFindIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userFindId>>> = ({ signal }) =>
    userFindId(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userFindId>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞
 */
export const userFindPassword = (
  requestFindPasswordDto: RequestFindPasswordDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>(
    {
      url: `/api/users/find-password`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestFindPasswordDto,
    },
    options,
  )
}

export type UserFindPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof userFindPassword>>>
export type UserFindPasswordMutationBody = RequestFindPasswordDto
export type UserFindPasswordMutationError = ErrorType<unknown>

export const useUserFindPassword = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userFindPassword>>,
    TError,
    { data: RequestFindPasswordDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof userFindPassword>>, { data: RequestFindPasswordDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return userFindPassword(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof userFindPassword>>, TError, { data: RequestFindPasswordDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï
 */
export const userResetPassword = (
  requestResetPasswordDto: RequestResetPasswordDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/users/reset-password`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestResetPasswordDto,
    },
    options,
  )
}

export type UserResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof userResetPassword>>>
export type UserResetPasswordMutationBody = RequestResetPasswordDto
export type UserResetPasswordMutationError = ErrorType<void>

export const useUserResetPassword = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userResetPassword>>,
    TError,
    { data: RequestResetPasswordDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userResetPassword>>,
    { data: RequestResetPasswordDto }
  > = (props) => {
    const { data } = props ?? {}

    return userResetPassword(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof userResetPassword>>,
    TError,
    { data: RequestResetPasswordDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌöåÏõêÍ∞ÄÏûÖ
 */
export const userSignup = (requestSignupDto: RequestSignupDto, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>(
    {
      url: `/api/users/signup`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestSignupDto,
    },
    options,
  )
}

export type UserSignupMutationResult = NonNullable<Awaited<ReturnType<typeof userSignup>>>
export type UserSignupMutationBody = RequestSignupDto
export type UserSignupMutationError = ErrorType<unknown>

export const useUserSignup = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof userSignup>>, TError, { data: RequestSignupDto }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof userSignup>>, { data: RequestSignupDto }> = (props) => {
    const { data } = props ?? {}

    return userSignup(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof userSignup>>, TError, { data: RequestSignupDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * ÌöåÏõêÏùò accessToken ÏùÑ ÏñªÏñ¥ÎÉÖÎãàÎã§.
 * @summary Î°úÍ∑∏Ïù∏ API
 */
export const userLogin = (requestLoginDto: RequestLoginDto, options?: SecondParameter<typeof mutator>) => {
  return mutator<AuthResponse>(
    { url: `/api/users/login`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: requestLoginDto },
    options,
  )
}

export type UserLoginMutationResult = NonNullable<Awaited<ReturnType<typeof userLogin>>>
export type UserLoginMutationBody = RequestLoginDto
export type UserLoginMutationError = ErrorType<void>

export const useUserLogin = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof userLogin>>, TError, { data: RequestLoginDto }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLogin>>, { data: RequestLoginDto }> = (props) => {
    const { data } = props ?? {}

    return userLogin(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof userLogin>>, TError, { data: RequestLoginDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * refreshToken ÏùÑ Ïù¥Ïö©Ìï¥ ÌöåÏõêÏùò accessToken ÏùÑ ÏñªÏñ¥ÎÉÖÎãàÎã§.
 * @summary Refresh Î°úÍ∑∏Ïù∏ API
 */
export const userRefreshLogin = (options?: SecondParameter<typeof mutator>) => {
  return mutator<AuthResponse>({ url: `/api/users/refresh-login`, method: 'post' }, options)
}

export type UserRefreshLoginMutationResult = NonNullable<Awaited<ReturnType<typeof userRefreshLogin>>>

export type UserRefreshLoginMutationError = ErrorType<unknown>

export const useUserRefreshLogin = <TError = ErrorType<unknown>, TVariables = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof userRefreshLogin>>, TError, TVariables, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof userRefreshLogin>>, TVariables> = () => {
    return userRefreshLogin(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof userRefreshLogin>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Î°úÍ∑∏ÏïÑÏõÉ API
 */
export const userLogout = (options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/users/logout`, method: 'post' }, options)
}

export type UserLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof userLogout>>>

export type UserLogoutMutationError = ErrorType<unknown>

export const useUserLogout = <TError = ErrorType<unknown>, TVariables = void, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof userLogout>>, TError, TVariables, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof userLogout>>, TVariables> = () => {
    return userLogout(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof userLogout>>, TError, TVariables, TContext>(mutationFn, mutationOptions)
}

/**
 * @summary Î°úÍ∑∏Ïù∏ Ïú†Ï†ÄÏ†ïÎ≥¥(Î∂ÄÎ™®) + ÏûêÎÖÄÏ°∞Ìöå
 */
export const userMeWithChildren = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ParentDto>({ url: `/api/users/me/children`, method: 'get', signal }, options)
}

export const getUserMeWithChildrenQueryKey = () => [`/api/users/me/children`]

export type UserMeWithChildrenQueryResult = NonNullable<Awaited<ReturnType<typeof userMeWithChildren>>>
export type UserMeWithChildrenQueryError = ErrorType<unknown>

export const useUserMeWithChildren = <
  TData = Awaited<ReturnType<typeof userMeWithChildren>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof userMeWithChildren>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserMeWithChildrenQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userMeWithChildren>>> = ({ signal }) =>
    userMeWithChildren(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userMeWithChildren>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î°úÍ∑∏Ïù∏ Ïú†Ï†ÄÏ†ïÎ≥¥ Ï°∞Ìöå
 */
export const userMe = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseUserDto>({ url: `/api/users/me`, method: 'get', signal }, options)
}

export const getUserMeQueryKey = () => [`/api/users/me`]

export type UserMeQueryResult = NonNullable<Awaited<ReturnType<typeof userMe>>>
export type UserMeQueryError = ErrorType<unknown>

export const useUserMe = <TData = Awaited<ReturnType<typeof userMe>>, TError = ErrorType<unknown>>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof userMe>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserMeQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userMe>>> = ({ signal }) => userMe(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userMe>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÎßàÏù¥ÌéòÏù¥ÏßÄ ÎÇ¥ Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const userUpdateMe = (updateUserDto: UpdateUserDto, options?: SecondParameter<typeof mutator>) => {
  return mutator<ResponseUserDto>(
    { url: `/api/users/me`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: updateUserDto },
    options,
  )
}

export type UserUpdateMeMutationResult = NonNullable<Awaited<ReturnType<typeof userUpdateMe>>>
export type UserUpdateMeMutationBody = UpdateUserDto
export type UserUpdateMeMutationError = ErrorType<unknown>

export const useUserUpdateMe = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof userUpdateMe>>, TError, { data: UpdateUserDto }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof userUpdateMe>>, { data: UpdateUserDto }> = (props) => {
    const { data } = props ?? {}

    return userUpdateMe(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof userUpdateMe>>, TError, { data: UpdateUserDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏµúÏ¥àÌöåÏõêÍ∞ÄÏûÖÏ†ïÎ≥¥ÏûÖÎ†•(first login)
 */
export const userUpdateMyInfoAtFirstLogin = (
  requestUpdateMyInfoAtFirstLoginDto: RequestUpdateMyInfoAtFirstLoginDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseUserDto>(
    {
      url: `/api/users/update-my-info-at-first-login`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateMyInfoAtFirstLoginDto,
    },
    options,
  )
}

export type UserUpdateMyInfoAtFirstLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof userUpdateMyInfoAtFirstLogin>>
>
export type UserUpdateMyInfoAtFirstLoginMutationBody = RequestUpdateMyInfoAtFirstLoginDto
export type UserUpdateMyInfoAtFirstLoginMutationError = ErrorType<void>

export const useUserUpdateMyInfoAtFirstLogin = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userUpdateMyInfoAtFirstLogin>>,
    TError,
    { data: RequestUpdateMyInfoAtFirstLoginDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userUpdateMyInfoAtFirstLogin>>,
    { data: RequestUpdateMyInfoAtFirstLoginDto }
  > = (props) => {
    const { data } = props ?? {}

    return userUpdateMyInfoAtFirstLogin(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof userUpdateMyInfoAtFirstLogin>>,
    TError,
    { data: RequestUpdateMyInfoAtFirstLoginDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Î∂ÄÎ™® ÌöåÏõêÍ∞ÄÏûÖ ÏöîÏ≤≠(ÏïåÎ¶ºÌÜ° Î∞úÏÜ°)
 */
export const userSendParentSignUp = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<boolean>({ url: `/api/users/send-parent-sign-up`, method: 'get', signal }, options)
}

export const getUserSendParentSignUpQueryKey = () => [`/api/users/send-parent-sign-up`]

export type UserSendParentSignUpQueryResult = NonNullable<Awaited<ReturnType<typeof userSendParentSignUp>>>
export type UserSendParentSignUpQueryError = ErrorType<unknown>

export const useUserSendParentSignUp = <
  TData = Awaited<ReturnType<typeof userSendParentSignUp>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof userSendParentSignUp>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserSendParentSignUpQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userSendParentSignUp>>> = ({ signal }) =>
    userSendParentSignUp(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userSendParentSignUp>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î∂ÄÎ™® ÌöåÏõêÍ∞ÄÏûÖ ÏöîÏ≤≠v2(ÏïåÎ¶ºÌÜ° Î∞úÏÜ°)
 */
export const userSendParentSignUpV2 = (
  requestSendParentSignUpDto: RequestSendParentSignUpDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/users/send-parent-sign-up-v2`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestSendParentSignUpDto,
    },
    options,
  )
}

export type UserSendParentSignUpV2MutationResult = NonNullable<Awaited<ReturnType<typeof userSendParentSignUpV2>>>
export type UserSendParentSignUpV2MutationBody = RequestSendParentSignUpDto
export type UserSendParentSignUpV2MutationError = ErrorType<unknown>

export const useUserSendParentSignUpV2 = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userSendParentSignUpV2>>,
    TError,
    { data: RequestSendParentSignUpDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userSendParentSignUpV2>>,
    { data: RequestSendParentSignUpDto }
  > = (props) => {
    const { data } = props ?? {}

    return userSendParentSignUpV2(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof userSendParentSignUpV2>>,
    TError,
    { data: RequestSendParentSignUpDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Î∂ÄÎ™® ÌöåÏõêÍ∞ÄÏûÖ
 */
export const userParentSignUp = (
  schoolId: number,
  requestParentSignUpDto: RequestParentSignUpDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<AuthResponse>(
    {
      url: `/api/users/parent-sign-up/${schoolId}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestParentSignUpDto,
    },
    options,
  )
}

export type UserParentSignUpMutationResult = NonNullable<Awaited<ReturnType<typeof userParentSignUp>>>
export type UserParentSignUpMutationBody = RequestParentSignUpDto
export type UserParentSignUpMutationError = ErrorType<unknown>

export const useUserParentSignUp = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userParentSignUp>>,
    TError,
    { schoolId: number; data: RequestParentSignUpDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof userParentSignUp>>,
    { schoolId: number; data: RequestParentSignUpDto }
  > = (props) => {
    const { schoolId, data } = props ?? {}

    return userParentSignUp(schoolId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof userParentSignUp>>,
    TError,
    { schoolId: number; data: RequestParentSignUpDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Î∂ÄÎ™® ÌöåÏõêÍ∞ÄÏûÖ ÏßÅÌõÑ ÏûêÎÖÄ Ï∂îÍ∞Ä
 */
export const userCreateChildren = (uuid: string, options?: SecondParameter<typeof mutator>) => {
  return mutator<AuthResponse>({ url: `/api/users/children/${uuid}`, method: 'post' }, options)
}

export type UserCreateChildrenMutationResult = NonNullable<Awaited<ReturnType<typeof userCreateChildren>>>

export type UserCreateChildrenMutationError = ErrorType<unknown>

export const useUserCreateChildren = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof userCreateChildren>>, TError, { uuid: string }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof userCreateChildren>>, { uuid: string }> = (props) => {
    const { uuid } = props ?? {}

    return userCreateChildren(uuid, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof userCreateChildren>>, TError, { uuid: string }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌïôÎ∂ÄÎ™®-ÌïôÏÉù Ïó∞Í≤∞ Ï†úÍ±∞
 */
export const userDeleteChild = (
  requestRemoveChildDto: RequestRemoveChildDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/users/remove-child`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestRemoveChildDto,
    },
    options,
  )
}

export type UserDeleteChildMutationResult = NonNullable<Awaited<ReturnType<typeof userDeleteChild>>>
export type UserDeleteChildMutationBody = RequestRemoveChildDto
export type UserDeleteChildMutationError = ErrorType<void>

export const useUserDeleteChild = <TError = ErrorType<void>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userDeleteChild>>,
    TError,
    { data: RequestRemoveChildDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof userDeleteChild>>, { data: RequestRemoveChildDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return userDeleteChild(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof userDeleteChild>>, TError, { data: RequestRemoveChildDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Î™®Îì† ÏÑ†ÏÉùÎãò Ï°∞Ìöå
 */
export const userGetAllTeachers = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseTeachersDto[]>({ url: `/api/users/teachers`, method: 'get', signal }, options)
}

export const getUserGetAllTeachersQueryKey = () => [`/api/users/teachers`]

export type UserGetAllTeachersQueryResult = NonNullable<Awaited<ReturnType<typeof userGetAllTeachers>>>
export type UserGetAllTeachersQueryError = ErrorType<unknown>

export const useUserGetAllTeachers = <
  TData = Awaited<ReturnType<typeof userGetAllTeachers>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof userGetAllTeachers>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserGetAllTeachersQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetAllTeachers>>> = ({ signal }) =>
    userGetAllTeachers(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userGetAllTeachers>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍ∏âÏùò Î™®Îì† Î≥¥Ìò∏Ïûê Ï°∞Ìöå(ÏÑ†ÏÉùÎãòÎßå Ï°∞Ìöå Í∞ÄÎä•)
 */
export const userGetParentsByGroupId = (
  params: UserGetParentsByGroupIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseGetParentsByStudentGroupDto[]>(
    { url: `/api/users/parents`, method: 'get', params, signal },
    options,
  )
}

export const getUserGetParentsByGroupIdQueryKey = (params: UserGetParentsByGroupIdParams) => [
  `/api/users/parents`,
  ...(params ? [params] : []),
]

export type UserGetParentsByGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof userGetParentsByGroupId>>>
export type UserGetParentsByGroupIdQueryError = ErrorType<unknown>

export const useUserGetParentsByGroupId = <
  TData = Awaited<ReturnType<typeof userGetParentsByGroupId>>,
  TError = ErrorType<unknown>,
>(
  params: UserGetParentsByGroupIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userGetParentsByGroupId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserGetParentsByGroupIdQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetParentsByGroupId>>> = ({ signal }) =>
    userGetParentsByGroupId(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userGetParentsByGroupId>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏãúÍ∞ÑÌëú/Ï∂úÏÑùÏ≤¥ÌÅ¨ ÌïôÏÉù(Ï∂úÍ≤∞,Ïó≠Ìï†,ÏûêÎ¶¨) Ï°∞Ìöå
 */
export const userGetUserAttendance = (
  params: UserGetUserAttendanceParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseUserAttendanceDto[]>({ url: `/api/users/attendance`, method: 'get', params, signal }, options)
}

export const getUserGetUserAttendanceQueryKey = (params: UserGetUserAttendanceParams) => [
  `/api/users/attendance`,
  ...(params ? [params] : []),
]

export type UserGetUserAttendanceQueryResult = NonNullable<Awaited<ReturnType<typeof userGetUserAttendance>>>
export type UserGetUserAttendanceQueryError = ErrorType<unknown>

export const useUserGetUserAttendance = <
  TData = Awaited<ReturnType<typeof userGetUserAttendance>>,
  TError = ErrorType<unknown>,
>(
  params: UserGetUserAttendanceParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userGetUserAttendance>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserGetUserAttendanceQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetUserAttendance>>> = ({ signal }) =>
    userGetUserAttendance(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userGetUserAttendance>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

export const userGetAttendanceBook = (
  params: UserGetAttendanceBookParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<void>({ url: `/api/users/attendancebook`, method: 'get', params, signal }, options)
}

export const getUserGetAttendanceBookQueryKey = (params: UserGetAttendanceBookParams) => [
  `/api/users/attendancebook`,
  ...(params ? [params] : []),
]

export type UserGetAttendanceBookQueryResult = NonNullable<Awaited<ReturnType<typeof userGetAttendanceBook>>>
export type UserGetAttendanceBookQueryError = ErrorType<unknown>

export const useUserGetAttendanceBook = <
  TData = Awaited<ReturnType<typeof userGetAttendanceBook>>,
  TError = ErrorType<unknown>,
>(
  params: UserGetAttendanceBookParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userGetAttendanceBook>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserGetAttendanceBookQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetAttendanceBook>>> = ({ signal }) =>
    userGetAttendanceBook(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userGetAttendanceBook>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â
 */
export const userRefreshToken = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<AuthResponse>({ url: `/api/users/refresh-token`, method: 'get', signal }, options)
}

export const getUserRefreshTokenQueryKey = () => [`/api/users/refresh-token`]

export type UserRefreshTokenQueryResult = NonNullable<Awaited<ReturnType<typeof userRefreshToken>>>
export type UserRefreshTokenQueryError = ErrorType<unknown>

export const useUserRefreshToken = <
  TData = Awaited<ReturnType<typeof userRefreshToken>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof userRefreshToken>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserRefreshTokenQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userRefreshToken>>> = ({ signal }) =>
    userRefreshToken(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userRefreshToken>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary SSO token ÏÉùÏÑ±/Ï°∞Ìöå
 */
export const userSsoToken = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<string>({ url: `/api/users/sso-token`, method: 'get', signal }, options)
}

export const getUserSsoTokenQueryKey = () => [`/api/users/sso-token`]

export type UserSsoTokenQueryResult = NonNullable<Awaited<ReturnType<typeof userSsoToken>>>
export type UserSsoTokenQueryError = ErrorType<unknown>

export const useUserSsoToken = <
  TData = Awaited<ReturnType<typeof userSsoToken>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof userSsoToken>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserSsoTokenQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userSsoToken>>> = ({ signal }) =>
    userSsoToken(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userSsoToken>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î∂ÄÎ™® ÌöåÏõêÍ∞ÄÏûÖÎïå ÏûêÎÖÄ Ï°∞Ìöå
 */
export const userGetUser = (uuid: string, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseUserDto>({ url: `/api/users/${uuid}`, method: 'get', signal }, options)
}

export const getUserGetUserQueryKey = (uuid: string) => [`/api/users/${uuid}`]

export type UserGetUserQueryResult = NonNullable<Awaited<ReturnType<typeof userGetUser>>>
export type UserGetUserQueryError = ErrorType<unknown>

export const useUserGetUser = <TData = Awaited<ReturnType<typeof userGetUser>>, TError = ErrorType<unknown>>(
  uuid: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof userGetUser>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getUserGetUserQueryKey(uuid)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof userGetUser>>> = ({ signal }) =>
    userGetUser(uuid, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof userGetUser>>, TError, TData>(queryKey, queryFn, {
    enabled: !!uuid,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÇ¨Ïö©ÏûêÎ≥∏Ïù∏ ÌöåÏõêÌÉàÌá¥
 */
export const userDeleteUser = (
  requestDeleteUserDto: RequestDeleteUserDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/users`,
      method: 'delete',
      headers: { 'Content-Type': 'application/json' },
      data: requestDeleteUserDto,
    },
    options,
  )
}

export type UserDeleteUserMutationResult = NonNullable<Awaited<ReturnType<typeof userDeleteUser>>>
export type UserDeleteUserMutationBody = RequestDeleteUserDto
export type UserDeleteUserMutationError = ErrorType<unknown>

export const useUserDeleteUser = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof userDeleteUser>>,
    TError,
    { data: RequestDeleteUserDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof userDeleteUser>>, { data: RequestDeleteUserDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return userDeleteUser(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof userDeleteUser>>, TError, { data: RequestDeleteUserDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary CAS Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÌïôÏÉùÎã®Í±¥Ï°∞Ìöå
 */
export const iBCasPortfolioGetItem = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseIBPortfolioDto>({ url: `/api/ib/portfolio/student/${id}`, method: 'get', signal }, options)
}

export const getIBCasPortfolioGetItemQueryKey = (id: number) => [`/api/ib/portfolio/student/${id}`]

export type IBCasPortfolioGetItemQueryResult = NonNullable<Awaited<ReturnType<typeof iBCasPortfolioGetItem>>>
export type IBCasPortfolioGetItemQueryError = ErrorType<unknown>

export const useIBCasPortfolioGetItem = <
  TData = Awaited<ReturnType<typeof iBCasPortfolioGetItem>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBCasPortfolioGetItem>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBCasPortfolioGetItemQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBCasPortfolioGetItem>>> = ({ signal }) =>
    iBCasPortfolioGetItem(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBCasPortfolioGetItem>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary CAS Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const iBCasPortfolioGetItems = (
  params?: IBCasPortfolioGetItemsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBPortfolioItemsDto>(
    { url: `/api/ib/portfolio/items`, method: 'get', params, signal },
    options,
  )
}

export const getIBCasPortfolioGetItemsQueryKey = (params?: IBCasPortfolioGetItemsParams) => [
  `/api/ib/portfolio/items`,
  ...(params ? [params] : []),
]

export type IBCasPortfolioGetItemsQueryResult = NonNullable<Awaited<ReturnType<typeof iBCasPortfolioGetItems>>>
export type IBCasPortfolioGetItemsQueryError = ErrorType<unknown>

export const useIBCasPortfolioGetItems = <
  TData = Awaited<ReturnType<typeof iBCasPortfolioGetItems>>,
  TError = ErrorType<unknown>,
>(
  params?: IBCasPortfolioGetItemsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBCasPortfolioGetItems>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBCasPortfolioGetItemsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBCasPortfolioGetItems>>> = ({ signal }) =>
    iBCasPortfolioGetItems(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBCasPortfolioGetItems>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ±Ï∞∞ÏùºÏßÄ ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ Ïπ¥Ïö¥Ìä∏ Ï°∞Ìöå
 */
export const iBCasPortfolioGetSubmissionStatusByReflectionDiaryCount = (
  params?: IBCasPortfolioGetSubmissionStatusByReflectionDiaryCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBPortfolioSubmissionStatusCountDto>(
    { url: `/api/ib/portfolio/reflectionDiary/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getIBCasPortfolioGetSubmissionStatusByReflectionDiaryCountQueryKey = (
  params?: IBCasPortfolioGetSubmissionStatusByReflectionDiaryCountParams,
) => [`/api/ib/portfolio/reflectionDiary/submission-status-count`, ...(params ? [params] : [])]

export type IBCasPortfolioGetSubmissionStatusByReflectionDiaryCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByReflectionDiaryCount>>
>
export type IBCasPortfolioGetSubmissionStatusByReflectionDiaryCountQueryError = ErrorType<unknown>

export const useIBCasPortfolioGetSubmissionStatusByReflectionDiaryCount = <
  TData = Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByReflectionDiaryCount>>,
  TError = ErrorType<unknown>,
>(
  params?: IBCasPortfolioGetSubmissionStatusByReflectionDiaryCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByReflectionDiaryCount>>,
      TError,
      TData
    >
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBCasPortfolioGetSubmissionStatusByReflectionDiaryCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByReflectionDiaryCount>>> = ({
    signal,
  }) => iBCasPortfolioGetSubmissionStatusByReflectionDiaryCount(params, requestOptions, signal)

  const query = useQuery<
    Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByReflectionDiaryCount>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ±Ï∞∞ÏùºÏßÄ ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ Ï°∞Ìöå
 */
export const iBCasPortfolioGetSubmissionStatusByReflectionDiary = (
  params: IBCasPortfolioGetSubmissionStatusByReflectionDiaryParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBPortfolioReflectionDiarySubmissionStatusDto>(
    { url: `/api/ib/portfolio/reflectionDiary/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getIBCasPortfolioGetSubmissionStatusByReflectionDiaryQueryKey = (
  params: IBCasPortfolioGetSubmissionStatusByReflectionDiaryParams,
) => [`/api/ib/portfolio/reflectionDiary/submission-status`, ...(params ? [params] : [])]

export type IBCasPortfolioGetSubmissionStatusByReflectionDiaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByReflectionDiary>>
>
export type IBCasPortfolioGetSubmissionStatusByReflectionDiaryQueryError = ErrorType<unknown>

export const useIBCasPortfolioGetSubmissionStatusByReflectionDiary = <
  TData = Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByReflectionDiary>>,
  TError = ErrorType<unknown>,
>(
  params: IBCasPortfolioGetSubmissionStatusByReflectionDiaryParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByReflectionDiary>>,
      TError,
      TData
    >
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBCasPortfolioGetSubmissionStatusByReflectionDiaryQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByReflectionDiary>>> = ({
    signal,
  }) => iBCasPortfolioGetSubmissionStatusByReflectionDiary(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByReflectionDiary>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ±Ï∞∞ÏùºÏßÄ ÎØ∏Ï†úÏ∂úÏûê ÏïåÎ¶ºÎ≥¥ÎÇ¥Í∏∞
 */
export const iBCasPortfolioReflectionDiaryUnsubmitNotification = (
  params?: IBCasPortfolioReflectionDiaryUnsubmitNotificationParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    { url: `/api/ib/portfolio/reflectionDiary/unsubmit-notification`, method: 'post', params },
    options,
  )
}

export type IBCasPortfolioReflectionDiaryUnsubmitNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBCasPortfolioReflectionDiaryUnsubmitNotification>>
>

export type IBCasPortfolioReflectionDiaryUnsubmitNotificationMutationError = ErrorType<unknown>

export const useIBCasPortfolioReflectionDiaryUnsubmitNotification = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBCasPortfolioReflectionDiaryUnsubmitNotification>>,
    TError,
    { params?: IBCasPortfolioReflectionDiaryUnsubmitNotificationParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBCasPortfolioReflectionDiaryUnsubmitNotification>>,
    { params?: IBCasPortfolioReflectionDiaryUnsubmitNotificationParams }
  > = (props) => {
    const { params } = props ?? {}

    return iBCasPortfolioReflectionDiaryUnsubmitNotification(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBCasPortfolioReflectionDiaryUnsubmitNotification>>,
    TError,
    { params?: IBCasPortfolioReflectionDiaryUnsubmitNotificationParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary CAS Ïù∏ÌÑ∞Î∑∞ ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ Ïπ¥Ïö¥Ìä∏ Ï°∞Ìöå
 */
export const iBCasPortfolioGetSubmissionStatusByInterviewCount = (
  params?: IBCasPortfolioGetSubmissionStatusByInterviewCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBPortfolioSubmissionStatusCountDto>(
    { url: `/api/ib/portfolio/interview/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getIBCasPortfolioGetSubmissionStatusByInterviewCountQueryKey = (
  params?: IBCasPortfolioGetSubmissionStatusByInterviewCountParams,
) => [`/api/ib/portfolio/interview/submission-status-count`, ...(params ? [params] : [])]

export type IBCasPortfolioGetSubmissionStatusByInterviewCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByInterviewCount>>
>
export type IBCasPortfolioGetSubmissionStatusByInterviewCountQueryError = ErrorType<unknown>

export const useIBCasPortfolioGetSubmissionStatusByInterviewCount = <
  TData = Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByInterviewCount>>,
  TError = ErrorType<unknown>,
>(
  params?: IBCasPortfolioGetSubmissionStatusByInterviewCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByInterviewCount>>,
      TError,
      TData
    >
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBCasPortfolioGetSubmissionStatusByInterviewCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByInterviewCount>>> = ({
    signal,
  }) => iBCasPortfolioGetSubmissionStatusByInterviewCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByInterviewCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary CAS Ïù∏ÌÑ∞Î∑∞ ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ Ï°∞Ìöå
 */
export const iBCasPortfolioGetSubmissionStatusByInterview = (
  params: IBCasPortfolioGetSubmissionStatusByInterviewParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBPortfolioInterviewSubmissionStatusDto>(
    { url: `/api/ib/portfolio/interview/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getIBCasPortfolioGetSubmissionStatusByInterviewQueryKey = (
  params: IBCasPortfolioGetSubmissionStatusByInterviewParams,
) => [`/api/ib/portfolio/interview/submission-status`, ...(params ? [params] : [])]

export type IBCasPortfolioGetSubmissionStatusByInterviewQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByInterview>>
>
export type IBCasPortfolioGetSubmissionStatusByInterviewQueryError = ErrorType<unknown>

export const useIBCasPortfolioGetSubmissionStatusByInterview = <
  TData = Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByInterview>>,
  TError = ErrorType<unknown>,
>(
  params: IBCasPortfolioGetSubmissionStatusByInterviewParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByInterview>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBCasPortfolioGetSubmissionStatusByInterviewQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByInterview>>> = ({
    signal,
  }) => iBCasPortfolioGetSubmissionStatusByInterview(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBCasPortfolioGetSubmissionStatusByInterview>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary CAS Ïù∏ÌÑ∞Î∑∞ ÎØ∏Ï†úÏ∂úÏûê ÏïåÎ¶ºÎ≥¥ÎÇ¥Í∏∞
 */
export const iBCasPortfolioInterviewUnsubmitNotification = (
  params?: IBCasPortfolioInterviewUnsubmitNotificationParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>({ url: `/api/ib/portfolio/interview/unsubmit-notification`, method: 'post', params }, options)
}

export type IBCasPortfolioInterviewUnsubmitNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBCasPortfolioInterviewUnsubmitNotification>>
>

export type IBCasPortfolioInterviewUnsubmitNotificationMutationError = ErrorType<unknown>

export const useIBCasPortfolioInterviewUnsubmitNotification = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBCasPortfolioInterviewUnsubmitNotification>>,
    TError,
    { params?: IBCasPortfolioInterviewUnsubmitNotificationParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBCasPortfolioInterviewUnsubmitNotification>>,
    { params?: IBCasPortfolioInterviewUnsubmitNotificationParams }
  > = (props) => {
    const { params } = props ?? {}

    return iBCasPortfolioInterviewUnsubmitNotification(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBCasPortfolioInterviewUnsubmitNotification>>,
    TError,
    { params?: IBCasPortfolioInterviewUnsubmitNotificationParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary CAS Í≥ÑÌöçÏÑú ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉùÏàò Ï°∞Ìöå
 */
export const iBGetCasSubmissionStatusCount = (
  params?: IBGetCasSubmissionStatusCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBStatusCountDto>(
    { url: `/api/ib/cas/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getIBGetCasSubmissionStatusCountQueryKey = (params?: IBGetCasSubmissionStatusCountParams) => [
  `/api/ib/cas/submission-status-count`,
  ...(params ? [params] : []),
]

export type IBGetCasSubmissionStatusCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBGetCasSubmissionStatusCount>>
>
export type IBGetCasSubmissionStatusCountQueryError = ErrorType<unknown>

export const useIBGetCasSubmissionStatusCount = <
  TData = Awaited<ReturnType<typeof iBGetCasSubmissionStatusCount>>,
  TError = ErrorType<unknown>,
>(
  params?: IBGetCasSubmissionStatusCountParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBGetCasSubmissionStatusCount>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBGetCasSubmissionStatusCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBGetCasSubmissionStatusCount>>> = ({ signal }) =>
    iBGetCasSubmissionStatusCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBGetCasSubmissionStatusCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary CAS Í≥ÑÌöçÏÑú ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉù ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const iBGetCasSubmissionStatus = (
  params: IBGetCasSubmissionStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBCasSubmissionDto>(
    { url: `/api/ib/cas/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getIBGetCasSubmissionStatusQueryKey = (params: IBGetCasSubmissionStatusParams) => [
  `/api/ib/cas/submission-status`,
  ...(params ? [params] : []),
]

export type IBGetCasSubmissionStatusQueryResult = NonNullable<Awaited<ReturnType<typeof iBGetCasSubmissionStatus>>>
export type IBGetCasSubmissionStatusQueryError = ErrorType<unknown>

export const useIBGetCasSubmissionStatus = <
  TData = Awaited<ReturnType<typeof iBGetCasSubmissionStatus>>,
  TError = ErrorType<unknown>,
>(
  params: IBGetCasSubmissionStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBGetCasSubmissionStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBGetCasSubmissionStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBGetCasSubmissionStatus>>> = ({ signal }) =>
    iBGetCasSubmissionStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBGetCasSubmissionStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï†úÏïàÏÑú ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉùÏàò Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const iBGetSubmissionStatusCount = (
  params?: IBGetSubmissionStatusCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBStatusCountDto>(
    { url: `/api/ib/proposal/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getIBGetSubmissionStatusCountQueryKey = (params?: IBGetSubmissionStatusCountParams) => [
  `/api/ib/proposal/submission-status-count`,
  ...(params ? [params] : []),
]

export type IBGetSubmissionStatusCountQueryResult = NonNullable<Awaited<ReturnType<typeof iBGetSubmissionStatusCount>>>
export type IBGetSubmissionStatusCountQueryError = ErrorType<unknown>

export const useIBGetSubmissionStatusCount = <
  TData = Awaited<ReturnType<typeof iBGetSubmissionStatusCount>>,
  TError = ErrorType<unknown>,
>(
  params?: IBGetSubmissionStatusCountParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBGetSubmissionStatusCount>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBGetSubmissionStatusCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBGetSubmissionStatusCount>>> = ({ signal }) =>
    iBGetSubmissionStatusCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBGetSubmissionStatusCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï†úÏïàÏÑú ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉù ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const iBGetSubmissionStatus = (
  params: IBGetSubmissionStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBProposalSubmissionStatusDto>(
    { url: `/api/ib/proposal/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getIBGetSubmissionStatusQueryKey = (params: IBGetSubmissionStatusParams) => [
  `/api/ib/proposal/submission-status`,
  ...(params ? [params] : []),
]

export type IBGetSubmissionStatusQueryResult = NonNullable<Awaited<ReturnType<typeof iBGetSubmissionStatus>>>
export type IBGetSubmissionStatusQueryError = ErrorType<unknown>

export const useIBGetSubmissionStatus = <
  TData = Awaited<ReturnType<typeof iBGetSubmissionStatus>>,
  TError = ErrorType<unknown>,
>(
  params: IBGetSubmissionStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBGetSubmissionStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBGetSubmissionStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBGetSubmissionStatus>>> = ({ signal }) =>
    iBGetSubmissionStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBGetSubmissionStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏïÑÏõÉÎùºÏù∏ ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉùÏàò Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const iBGetTokOutlineSubmissionStatusCount = (
  params?: IBGetTokOutlineSubmissionStatusCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBStatusCountDto>(
    { url: `/api/ib/tok-outline/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getIBGetTokOutlineSubmissionStatusCountQueryKey = (
  params?: IBGetTokOutlineSubmissionStatusCountParams,
) => [`/api/ib/tok-outline/submission-status-count`, ...(params ? [params] : [])]

export type IBGetTokOutlineSubmissionStatusCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBGetTokOutlineSubmissionStatusCount>>
>
export type IBGetTokOutlineSubmissionStatusCountQueryError = ErrorType<unknown>

export const useIBGetTokOutlineSubmissionStatusCount = <
  TData = Awaited<ReturnType<typeof iBGetTokOutlineSubmissionStatusCount>>,
  TError = ErrorType<unknown>,
>(
  params?: IBGetTokOutlineSubmissionStatusCountParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBGetTokOutlineSubmissionStatusCount>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBGetTokOutlineSubmissionStatusCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBGetTokOutlineSubmissionStatusCount>>> = ({ signal }) =>
    iBGetTokOutlineSubmissionStatusCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBGetTokOutlineSubmissionStatusCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏïÑÏõÉÎùºÏù∏ ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉù ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const iBGetTokOutlineSubmissionStatus = (
  params: IBGetTokOutlineSubmissionStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBTokOutlineSubmissionStatusDto>(
    { url: `/api/ib/tok-outline/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getIBGetTokOutlineSubmissionStatusQueryKey = (params: IBGetTokOutlineSubmissionStatusParams) => [
  `/api/ib/tok-outline/submission-status`,
  ...(params ? [params] : []),
]

export type IBGetTokOutlineSubmissionStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBGetTokOutlineSubmissionStatus>>
>
export type IBGetTokOutlineSubmissionStatusQueryError = ErrorType<unknown>

export const useIBGetTokOutlineSubmissionStatus = <
  TData = Awaited<ReturnType<typeof iBGetTokOutlineSubmissionStatus>>,
  TError = ErrorType<unknown>,
>(
  params: IBGetTokOutlineSubmissionStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBGetTokOutlineSubmissionStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBGetTokOutlineSubmissionStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBGetTokOutlineSubmissionStatus>>> = ({ signal }) =>
    iBGetTokOutlineSubmissionStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBGetTokOutlineSubmissionStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary TOK ÏïÑÏõÉÎùºÏù∏ ÎØ∏Ï†úÏ∂úÏûê ÏïåÎ¶ºÎ≥¥ÎÇ¥Í∏∞
 */
export const iBTokOutlineUnsubmitNotification = (
  params?: IBTokOutlineUnsubmitNotificationParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>({ url: `/api/ib/tok-outline/unsubmit/notification`, method: 'post', params }, options)
}

export type IBTokOutlineUnsubmitNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBTokOutlineUnsubmitNotification>>
>

export type IBTokOutlineUnsubmitNotificationMutationError = ErrorType<unknown>

export const useIBTokOutlineUnsubmitNotification = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBTokOutlineUnsubmitNotification>>,
    TError,
    { params?: IBTokOutlineUnsubmitNotificationParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBTokOutlineUnsubmitNotification>>,
    { params?: IBTokOutlineUnsubmitNotificationParams }
  > = (props) => {
    const { params } = props ?? {}

    return iBTokOutlineUnsubmitNotification(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBTokOutlineUnsubmitNotification>>,
    TError,
    { params?: IBTokOutlineUnsubmitNotificationParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary TOK Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉùÏàò Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const iBGetTokExhibitionPlanSubmissionStatusCount = (
  params?: IBGetTokExhibitionPlanSubmissionStatusCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBStatusCountDto>(
    { url: `/api/ib/tok-exhibition-plan/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getIBGetTokExhibitionPlanSubmissionStatusCountQueryKey = (
  params?: IBGetTokExhibitionPlanSubmissionStatusCountParams,
) => [`/api/ib/tok-exhibition-plan/submission-status-count`, ...(params ? [params] : [])]

export type IBGetTokExhibitionPlanSubmissionStatusCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBGetTokExhibitionPlanSubmissionStatusCount>>
>
export type IBGetTokExhibitionPlanSubmissionStatusCountQueryError = ErrorType<unknown>

export const useIBGetTokExhibitionPlanSubmissionStatusCount = <
  TData = Awaited<ReturnType<typeof iBGetTokExhibitionPlanSubmissionStatusCount>>,
  TError = ErrorType<unknown>,
>(
  params?: IBGetTokExhibitionPlanSubmissionStatusCountParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBGetTokExhibitionPlanSubmissionStatusCount>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBGetTokExhibitionPlanSubmissionStatusCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBGetTokExhibitionPlanSubmissionStatusCount>>> = ({
    signal,
  }) => iBGetTokExhibitionPlanSubmissionStatusCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBGetTokExhibitionPlanSubmissionStatusCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary TOK Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉù ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const iBGetTokExhibitionPlanSubmissionStatus = (
  params: IBGetTokExhibitionPlanSubmissionStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBTokExhibitionPlanSubmissionStatusDto>(
    { url: `/api/ib/tok-exhibition-plan/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getIBGetTokExhibitionPlanSubmissionStatusQueryKey = (
  params: IBGetTokExhibitionPlanSubmissionStatusParams,
) => [`/api/ib/tok-exhibition-plan/submission-status`, ...(params ? [params] : [])]

export type IBGetTokExhibitionPlanSubmissionStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBGetTokExhibitionPlanSubmissionStatus>>
>
export type IBGetTokExhibitionPlanSubmissionStatusQueryError = ErrorType<unknown>

export const useIBGetTokExhibitionPlanSubmissionStatus = <
  TData = Awaited<ReturnType<typeof iBGetTokExhibitionPlanSubmissionStatus>>,
  TError = ErrorType<unknown>,
>(
  params: IBGetTokExhibitionPlanSubmissionStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBGetTokExhibitionPlanSubmissionStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBGetTokExhibitionPlanSubmissionStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBGetTokExhibitionPlanSubmissionStatus>>> = ({ signal }) =>
    iBGetTokExhibitionPlanSubmissionStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBGetTokExhibitionPlanSubmissionStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary TOK Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà ÎØ∏Ï†úÏ∂úÏûê ÏïåÎ¶ºÎ≥¥ÎÇ¥Í∏∞
 */
export const iBTokExhibitionPlanUnsubmitNotification = (
  params?: IBTokExhibitionPlanUnsubmitNotificationParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>(
    { url: `/api/ib/ib/tok-exhibition-plan/unsubmit/notification`, method: 'post', params },
    options,
  )
}

export type IBTokExhibitionPlanUnsubmitNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBTokExhibitionPlanUnsubmitNotification>>
>

export type IBTokExhibitionPlanUnsubmitNotificationMutationError = ErrorType<unknown>

export const useIBTokExhibitionPlanUnsubmitNotification = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBTokExhibitionPlanUnsubmitNotification>>,
    TError,
    { params?: IBTokExhibitionPlanUnsubmitNotificationParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBTokExhibitionPlanUnsubmitNotification>>,
    { params?: IBTokExhibitionPlanUnsubmitNotificationParams }
  > = (props) => {
    const { params } = props ?? {}

    return iBTokExhibitionPlanUnsubmitNotification(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBTokExhibitionPlanUnsubmitNotification>>,
    TError,
    { params?: IBTokExhibitionPlanUnsubmitNotificationParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary IB ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±
 */
export const iBCreateIB = (requestIBDto: RequestIBDto, options?: SecondParameter<typeof mutator>) => {
  return mutator<ResponseIBDto>(
    { url: `/api/ib`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: requestIBDto },
    options,
  )
}

export type IBCreateIBMutationResult = NonNullable<Awaited<ReturnType<typeof iBCreateIB>>>
export type IBCreateIBMutationBody = RequestIBDto
export type IBCreateIBMutationError = ErrorType<unknown>

export const useIBCreateIB = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof iBCreateIB>>, TError, { data: RequestIBDto }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBCreateIB>>, { data: RequestIBDto }> = (props) => {
    const { data } = props ?? {}

    return iBCreateIB(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBCreateIB>>, TError, { data: RequestIBDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary IB Îã§Ï§ë Ï°∞Ìöå
 */
export const iBGetIBBycoordinator = (
  params?: IBGetIBBycoordinatorParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBDto>({ url: `/api/ib`, method: 'get', params, signal }, options)
}

export const getIBGetIBBycoordinatorQueryKey = (params?: IBGetIBBycoordinatorParams) => [
  `/api/ib`,
  ...(params ? [params] : []),
]

export type IBGetIBBycoordinatorQueryResult = NonNullable<Awaited<ReturnType<typeof iBGetIBBycoordinator>>>
export type IBGetIBBycoordinatorQueryError = ErrorType<unknown>

export const useIBGetIBBycoordinator = <
  TData = Awaited<ReturnType<typeof iBGetIBBycoordinator>>,
  TError = ErrorType<unknown>,
>(
  params?: IBGetIBBycoordinatorParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBGetIBBycoordinator>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBGetIBBycoordinatorQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBGetIBBycoordinator>>> = ({ signal }) =>
    iBGetIBBycoordinator(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBGetIBBycoordinator>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌõÑÏàúÏúÑ Ï†úÏïàÏÑú ÏÉùÏÑ±
 */
export const iBCreateNextProposal = (
  id: number,
  requestIBProposalDto: RequestIBProposalDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBDto>(
    {
      url: `/api/ib/${id}/proposal`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBProposalDto,
    },
    options,
  )
}

export type IBCreateNextProposalMutationResult = NonNullable<Awaited<ReturnType<typeof iBCreateNextProposal>>>
export type IBCreateNextProposalMutationBody = RequestIBProposalDto
export type IBCreateNextProposalMutationError = ErrorType<unknown>

export const useIBCreateNextProposal = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBCreateNextProposal>>,
    TError,
    { id: number; data: RequestIBProposalDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBCreateNextProposal>>,
    { id: number; data: RequestIBProposalDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return iBCreateNextProposal(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBCreateNextProposal>>,
    TError,
    { id: number; data: RequestIBProposalDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary IB Îã®Í±¥ Ï°∞Ìöå
 */
export const iBGetIB = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseIBDto>({ url: `/api/ib/${id}`, method: 'get', signal }, options)
}

export const getIBGetIBQueryKey = (id: number) => [`/api/ib/${id}`]

export type IBGetIBQueryResult = NonNullable<Awaited<ReturnType<typeof iBGetIB>>>
export type IBGetIBQueryError = ErrorType<unknown>

export const useIBGetIB = <TData = Awaited<ReturnType<typeof iBGetIB>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBGetIB>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBGetIBQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBGetIB>>> = ({ signal }) =>
    iBGetIB(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBGetIB>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary IB ÏàòÏ†ï
 */
export const iBUpdateIB = (
  id: number,
  requestIBUpdateDto: RequestIBUpdateDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBDto>(
    { url: `/api/ib/${id}`, method: 'put', headers: { 'Content-Type': 'application/json' }, data: requestIBUpdateDto },
    options,
  )
}

export type IBUpdateIBMutationResult = NonNullable<Awaited<ReturnType<typeof iBUpdateIB>>>
export type IBUpdateIBMutationBody = RequestIBUpdateDto
export type IBUpdateIBMutationError = ErrorType<unknown>

export const useIBUpdateIB = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateIB>>,
    TError,
    { id: number; data: RequestIBUpdateDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBUpdateIB>>,
    { id: number; data: RequestIBUpdateDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return iBUpdateIB(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBUpdateIB>>,
    TError,
    { id: number; data: RequestIBUpdateDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary IB ÏÇ≠Ï†ú
 */
export const iBDeleteIB = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}`, method: 'delete' }, options)
}

export type IBDeleteIBMutationResult = NonNullable<Awaited<ReturnType<typeof iBDeleteIB>>>

export type IBDeleteIBMutationError = ErrorType<unknown>

export const useIBDeleteIB = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof iBDeleteIB>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBDeleteIB>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return iBDeleteIB(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBDeleteIB>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * Ìï¥Îãπ IBÏùò Î™®Îì† Ï†úÏïàÏÑúÏôÄ ÏàúÏúÑÎ•º Ï†úÏ∂úÌï¥Ïïº Ìï©ÎãàÎã§.
 * @summary Ï†úÏïàÏÑú ÏàúÏúÑ Î≥ÄÍ≤Ω
 */
export const iBChangeProposalRank = (
  id: number,
  requestIBProposalRankItemDto: RequestIBProposalRankItemDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/${id}/proposal/rank-change`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBProposalRankItemDto,
    },
    options,
  )
}

export type IBChangeProposalRankMutationResult = NonNullable<Awaited<ReturnType<typeof iBChangeProposalRank>>>
export type IBChangeProposalRankMutationBody = RequestIBProposalRankItemDto
export type IBChangeProposalRankMutationError = ErrorType<unknown>

export const useIBChangeProposalRank = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBChangeProposalRank>>,
    TError,
    { id: number; data: RequestIBProposalRankItemDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBChangeProposalRank>>,
    { id: number; data: RequestIBProposalRankItemDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return iBChangeProposalRank(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBChangeProposalRank>>,
    TError,
    { id: number; data: RequestIBProposalRankItemDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï†úÏïàÏÑú ÏàòÏ†ï
 */
export const iBUpdateProposal = (
  id: number,
  proposalId: number,
  requestIBProposalUpdateDto: RequestIBProposalUpdateDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBDto>(
    {
      url: `/api/ib/${id}/proposal/${proposalId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBProposalUpdateDto,
    },
    options,
  )
}

export type IBUpdateProposalMutationResult = NonNullable<Awaited<ReturnType<typeof iBUpdateProposal>>>
export type IBUpdateProposalMutationBody = RequestIBProposalUpdateDto
export type IBUpdateProposalMutationError = ErrorType<unknown>

export const useIBUpdateProposal = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateProposal>>,
    TError,
    { id: number; proposalId: number; data: RequestIBProposalUpdateDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBUpdateProposal>>,
    { id: number; proposalId: number; data: RequestIBProposalUpdateDto }
  > = (props) => {
    const { id, proposalId, data } = props ?? {}

    return iBUpdateProposal(id, proposalId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBUpdateProposal>>,
    TError,
    { id: number; proposalId: number; data: RequestIBProposalUpdateDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï†úÏïàÏÑú ÏÇ≠Ï†ú
 */
export const iBDeleteProposal = (id: number, proposalId: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/proposal/${proposalId}`, method: 'delete' }, options)
}

export type IBDeleteProposalMutationResult = NonNullable<Awaited<ReturnType<typeof iBDeleteProposal>>>

export type IBDeleteProposalMutationError = ErrorType<unknown>

export const useIBDeleteProposal = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBDeleteProposal>>,
    TError,
    { id: number; proposalId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBDeleteProposal>>,
    { id: number; proposalId: number }
  > = (props) => {
    const { id, proposalId } = props ?? {}

    return iBDeleteProposal(id, proposalId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBDeleteProposal>>,
    TError,
    { id: number; proposalId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * 
IB ÌîÑÎ°úÏ†ùÌä∏ Î≥ÄÍ≤Ω ÏòàÏãú:
- **CAS (ÏùºÎ∞ò, ÌîÑÎ°úÏ†ùÌä∏)**: Í∏∞ÌöçÏÑú Ï†ÄÏû• -> Í≥ÑÌöçÏÑú Ï†úÏ∂ú

 * @summary Í≥ÑÌöçÏÑú Ï†úÏ∂ú (Îã¥ÎãπÏûê ÏßÄÏ†ïÎåÄÍ∏∞ Î≥ÄÍ≤Ω)
 */
export const iBUpdateIBStatusWaitMentor = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/status/wait-mentor`, method: 'patch' }, options)
}

export type IBUpdateIBStatusWaitMentorMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBUpdateIBStatusWaitMentor>>
>

export type IBUpdateIBStatusWaitMentorMutationError = ErrorType<unknown>

export const useIBUpdateIBStatusWaitMentor = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateIBStatusWaitMentor>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBUpdateIBStatusWaitMentor>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return iBUpdateIBStatusWaitMentor(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBUpdateIBStatusWaitMentor>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * 
IB ÌîÑÎ°úÏ†ùÌä∏ Î≥ÄÍ≤Ω ÏòàÏãú:
- **EE**: Ï†úÏïàÏÑú Ï†ÄÏû• -> Ï†úÏïàÏÑú ÏäπÏù∏ÏöîÏ≤≠

 * @summary Ï†úÏïàÏÑú Ï†ÑÏ≤¥ Ï†úÏ∂ú
 */
export const iBUpdateIBProposalStatusSentForAll = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/proposal/status/sent`, method: 'patch' }, options)
}

export type IBUpdateIBProposalStatusSentForAllMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBUpdateIBProposalStatusSentForAll>>
>

export type IBUpdateIBProposalStatusSentForAllMutationError = ErrorType<unknown>

export const useIBUpdateIBProposalStatusSentForAll = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateIBProposalStatusSentForAll>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBUpdateIBProposalStatusSentForAll>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return iBUpdateIBProposalStatusSentForAll(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBUpdateIBProposalStatusSentForAll>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * WAIT_MENTOR ÏÉÅÌÉúÏù¥Î©¥ÏÑú Î©òÌÜ†Í∞Ä ÏûàÏúºÎ©¥ Ìù¨ÎßùÍµêÏÇ¨.
 * @summary Í≥ÑÌöçÏÑú Ìù¨ÎßùÎã¥ÎãπÍµêÏÇ¨ ÏöîÏ≤≠
 */
export const iBSetHopeMentor = (id: number, mentorId: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/set-hope-mentor/${mentorId}`, method: 'patch' }, options)
}

export type IBSetHopeMentorMutationResult = NonNullable<Awaited<ReturnType<typeof iBSetHopeMentor>>>

export type IBSetHopeMentorMutationError = ErrorType<unknown>

export const useIBSetHopeMentor = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBSetHopeMentor>>,
    TError,
    { id: number; mentorId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBSetHopeMentor>>, { id: number; mentorId: number }> = (
    props,
  ) => {
    const { id, mentorId } = props ?? {}

    return iBSetHopeMentor(id, mentorId, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBSetHopeMentor>>, TError, { id: number; mentorId: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * Ìù¨ÎßùÍµêÏÇ¨ Î∞òÎ†§
 * @summary Í≥ÑÌöçÏÑú Ìù¨ÎßùÎã¥ÎãπÍµêÏÇ¨ Î∞òÎ†§
 */
export const iBRejectHopeMentor = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/reject-hope-mentor`, method: 'patch' }, options)
}

export type IBRejectHopeMentorMutationResult = NonNullable<Awaited<ReturnType<typeof iBRejectHopeMentor>>>

export type IBRejectHopeMentorMutationError = ErrorType<unknown>

export const useIBRejectHopeMentor = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof iBRejectHopeMentor>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBRejectHopeMentor>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return iBRejectHopeMentor(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBRejectHopeMentor>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * Îã¥ÎãπÍµêÏÇ¨ Ï≤òÏùå ÏßÄÏ†ï Ïãú Í≥ÑÌöçÏäπÏù∏ÎåÄÍ∏∞ ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤ΩÎê©ÎãàÎã§.
 * @summary Îã¥ÎãπÍµêÏÇ¨ ÏßÄÏ†ï Î∞è ÏàòÏ†ï
 */
export const iBSetMentor = (id: number, mentorId: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/set-mentor/${mentorId}`, method: 'patch' }, options)
}

export type IBSetMentorMutationResult = NonNullable<Awaited<ReturnType<typeof iBSetMentor>>>

export type IBSetMentorMutationError = ErrorType<unknown>

export const useIBSetMentor = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBSetMentor>>,
    TError,
    { id: number; mentorId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBSetMentor>>, { id: number; mentorId: number }> = (
    props,
  ) => {
    const { id, mentorId } = props ?? {}

    return iBSetMentor(id, mentorId, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBSetMentor>>, TError, { id: number; mentorId: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * Îã¥ÎãπÍµêÏÇ¨ Ï≤òÏùå ÏßÄÏ†ï Ïãú Í≥ÑÌöçÏäπÏù∏ÎåÄÍ∏∞ ÏÉÅÌÉúÎ°ú Î≥ÄÍ≤ΩÎê©ÎãàÎã§.
 * @summary Îã¥ÎãπÍµêÏÇ¨ ÏßÄÏ†ï Î∞è ÏàòÏ†ï (Îã§Ï§ë)
 */
export const iBBatchSetMentor = (
  mentorId: number,
  requestIBSetMentorBatchDto: RequestIBSetMentorBatchDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>(
    {
      url: `/api/ib/batch-set-mentor/${mentorId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBSetMentorBatchDto,
    },
    options,
  )
}

export type IBBatchSetMentorMutationResult = NonNullable<Awaited<ReturnType<typeof iBBatchSetMentor>>>
export type IBBatchSetMentorMutationBody = RequestIBSetMentorBatchDto
export type IBBatchSetMentorMutationError = ErrorType<unknown>

export const useIBBatchSetMentor = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBBatchSetMentor>>,
    TError,
    { mentorId: number; data: RequestIBSetMentorBatchDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBBatchSetMentor>>,
    { mentorId: number; data: RequestIBSetMentorBatchDto }
  > = (props) => {
    const { mentorId, data } = props ?? {}

    return iBBatchSetMentor(mentorId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBBatchSetMentor>>,
    TError,
    { mentorId: number; data: RequestIBSetMentorBatchDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * TOK ÏΩîÎîîÏö© Îã§Ï§ë Îã¥ÎãπÍµêÏÇ¨ ÏßÄÏ†ï API ÏûÖÎãàÎã§. Îã¥ÎãπÏûê ÏßÄÏ†ï ÎåÄÍ∏∞Ïùº Ïãú Ï±ÑÌÉùÍ≥ºÎèôÏãúÏóê ÏßÑÌñâÏ§ëÏúºÎ°ú ÎÑòÏñ¥Í∞ëÎãàÎã§.
 * @summary Îã¥ÎãπÍµêÏÇ¨ ÏßÄÏ†ï Î∞è ÏàòÏ†ï ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞ Îã§Ï§ë (TOK)
 */
export const iBBatchSetMentorByTOK = (
  mentorId: number,
  requestIBSetMentorBatchDto: RequestIBSetMentorBatchDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>(
    {
      url: `/api/ib/tok-batch-set-mentor/${mentorId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBSetMentorBatchDto,
    },
    options,
  )
}

export type IBBatchSetMentorByTOKMutationResult = NonNullable<Awaited<ReturnType<typeof iBBatchSetMentorByTOK>>>
export type IBBatchSetMentorByTOKMutationBody = RequestIBSetMentorBatchDto
export type IBBatchSetMentorByTOKMutationError = ErrorType<unknown>

export const useIBBatchSetMentorByTOK = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBBatchSetMentorByTOK>>,
    TError,
    { mentorId: number; data: RequestIBSetMentorBatchDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBBatchSetMentorByTOK>>,
    { mentorId: number; data: RequestIBSetMentorBatchDto }
  > = (props) => {
    const { mentorId, data } = props ?? {}

    return iBBatchSetMentorByTOK(mentorId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBBatchSetMentorByTOK>>,
    TError,
    { mentorId: number; data: RequestIBSetMentorBatchDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * Îã¥ÎãπÍµêÏÇ¨Í∞Ä ÏßÄÏ†ïÎêú ÌõÑ Í≥ÑÌöçÏÑúÏùò ÎÇ¥Ïö© Î≥¥ÏôÑÏöîÏ≤≠
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Í≥ÑÌöçÏÑú Î≥¥ÏôÑÏöîÏ≤≠
 */
export const iBRejectPlan = (
  id: number,
  requestIBCommentDto: RequestIBCommentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/${id}/status/reject-plan`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBCommentDto,
    },
    options,
  )
}

export type IBRejectPlanMutationResult = NonNullable<Awaited<ReturnType<typeof iBRejectPlan>>>
export type IBRejectPlanMutationBody = RequestIBCommentDto
export type IBRejectPlanMutationError = ErrorType<unknown>

export const useIBRejectPlan = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBRejectPlan>>,
    TError,
    { id: number; data: RequestIBCommentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBRejectPlan>>,
    { id: number; data: RequestIBCommentDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return iBRejectPlan(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBRejectPlan>>,
    TError,
    { id: number; data: RequestIBCommentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * Îã¥ÎãπÍµêÏÇ¨Í∞Ä ÏßÄÏ†ïÎêú ÌõÑ Ï†úÏïàÏÑúÏùò ÎÇ¥Ïö© Î≥¥ÏôÑÏöîÏ≤≠
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Ï†úÏïàÏÑú Î≥¥ÏôÑÏöîÏ≤≠
 */
export const iBRejectPlanByProposal = (
  id: number,
  proposalId: number,
  requestIBCommentDto: RequestIBCommentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/${id}/proposal/${proposalId}/status/reject-plan`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBCommentDto,
    },
    options,
  )
}

export type IBRejectPlanByProposalMutationResult = NonNullable<Awaited<ReturnType<typeof iBRejectPlanByProposal>>>
export type IBRejectPlanByProposalMutationBody = RequestIBCommentDto
export type IBRejectPlanByProposalMutationError = ErrorType<unknown>

export const useIBRejectPlanByProposal = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBRejectPlanByProposal>>,
    TError,
    { id: number; proposalId: number; data: RequestIBCommentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBRejectPlanByProposal>>,
    { id: number; proposalId: number; data: RequestIBCommentDto }
  > = (props) => {
    const { id, proposalId, data } = props ?? {}

    return iBRejectPlanByProposal(id, proposalId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBRejectPlanByProposal>>,
    TError,
    { id: number; proposalId: number; data: RequestIBCommentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * Î≥¥ÏôÑÎ∞òÎ†§Îêú ÎÇ¥Ïö© ÏàòÏ†ï ÌõÑ Í≥ÑÌöçÏÑú|Ï†úÏïàÏÑú ÏäπÏù∏ÏöîÏ≤≠
 * @summary ÌîÑÎ°úÏ†ùÌä∏ Í≥ÑÌöçÏÑú|Ï†úÏïàÏÑú Í≥ÑÌöçÏÑúÎ∞òÎ†§ -> Í≥ÑÌöçÏäπÏù∏ÎåÄÍ∏∞Î°ú Î≥ÄÍ≤Ω
 */
export const iBUpdateIBStatusWaitPlanApprove = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/status/wait-plan-approve`, method: 'patch' }, options)
}

export type IBUpdateIBStatusWaitPlanApproveMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBUpdateIBStatusWaitPlanApprove>>
>

export type IBUpdateIBStatusWaitPlanApproveMutationError = ErrorType<unknown>

export const useIBUpdateIBStatusWaitPlanApprove = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateIBStatusWaitPlanApprove>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBUpdateIBStatusWaitPlanApprove>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return iBUpdateIBStatusWaitPlanApprove(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBUpdateIBStatusWaitPlanApprove>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * 
IB ÌîÑÎ°úÏ†ùÌä∏ Î≥ÄÍ≤Ω ÏòàÏãú:
- **EE**: Ï†úÏïàÏÑú ÏäπÏù∏ -> ÏßÑÌñâÏ§ë

 * @summary Ï†úÏïàÏÑú ÏäπÏù∏ -> ÏßÑÌñâÏ§ëÏúºÎ°ú Î≥ÄÍ≤Ω
 */
export const iBUpdateIBProposalStatusInProgress = (
  id: number,
  proposalId: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>({ url: `/api/ib/${id}/proposal/${proposalId}/status/in-progress`, method: 'patch' }, options)
}

export type IBUpdateIBProposalStatusInProgressMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBUpdateIBProposalStatusInProgress>>
>

export type IBUpdateIBProposalStatusInProgressMutationError = ErrorType<unknown>

export const useIBUpdateIBProposalStatusInProgress = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateIBProposalStatusInProgress>>,
    TError,
    { id: number; proposalId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBUpdateIBProposalStatusInProgress>>,
    { id: number; proposalId: number }
  > = (props) => {
    const { id, proposalId } = props ?? {}

    return iBUpdateIBProposalStatusInProgress(id, proposalId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBUpdateIBProposalStatusInProgress>>,
    TError,
    { id: number; proposalId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * 
IB ÌîÑÎ°úÏ†ùÌä∏ Î≥ÄÍ≤Ω ÏòàÏãú:
- **CAS (ÏùºÎ∞ò, ÌîÑÎ°úÏ†ùÌä∏)**: Í≥ÑÌöçÏÑú ÏäπÏù∏ -> ÏßÑÌñâÏ§ë

 * @summary Í≥ÑÌöçÏÑú ÏäπÏù∏ -> ÏßÑÌñâÏ§ëÏúºÎ°ú Î≥ÄÍ≤Ω
 */
export const iBUpdateIBStatusInProgress = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/status/in-progress`, method: 'patch' }, options)
}

export type IBUpdateIBStatusInProgressMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBUpdateIBStatusInProgress>>
>

export type IBUpdateIBStatusInProgressMutationError = ErrorType<unknown>

export const useIBUpdateIBStatusInProgress = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateIBStatusInProgress>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBUpdateIBStatusInProgress>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return iBUpdateIBStatusInProgress(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBUpdateIBStatusInProgress>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏôÑÎ£å ÏäπÏù∏ ÏöîÏ≤≠
 */
export const iBUpdateIBStatusWaitComplete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/status/wait-complete`, method: 'patch' }, options)
}

export type IBUpdateIBStatusWaitCompleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBUpdateIBStatusWaitComplete>>
>

export type IBUpdateIBStatusWaitCompleteMutationError = ErrorType<unknown>

export const useIBUpdateIBStatusWaitComplete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateIBStatusWaitComplete>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBUpdateIBStatusWaitComplete>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return iBUpdateIBStatusWaitComplete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBUpdateIBStatusWaitComplete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏôÑÎ£å ÏäπÏù∏ Î∞òÎ†§
 */
export const iBRejectComplete = (
  id: number,
  requestIBCommentDto: RequestIBCommentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/${id}/status/reject-complete`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBCommentDto,
    },
    options,
  )
}

export type IBRejectCompleteMutationResult = NonNullable<Awaited<ReturnType<typeof iBRejectComplete>>>
export type IBRejectCompleteMutationBody = RequestIBCommentDto
export type IBRejectCompleteMutationError = ErrorType<unknown>

export const useIBRejectComplete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBRejectComplete>>,
    TError,
    { id: number; data: RequestIBCommentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBRejectComplete>>,
    { id: number; data: RequestIBCommentDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return iBRejectComplete(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBRejectComplete>>,
    TError,
    { id: number; data: RequestIBCommentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏôÑÎ£å ÏäπÏù∏
 */
export const iBUpdateIBStstusComplete = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/status/complete`, method: 'patch' }, options)
}

export type IBUpdateIBStstusCompleteMutationResult = NonNullable<Awaited<ReturnType<typeof iBUpdateIBStstusComplete>>>

export type IBUpdateIBStstusCompleteMutationError = ErrorType<unknown>

export const useIBUpdateIBStstusComplete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof iBUpdateIBStstusComplete>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBUpdateIBStstusComplete>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return iBUpdateIBStstusComplete(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBUpdateIBStstusComplete>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary TOK ÏïÑÏõÉÎùºÏù∏ ÏàòÏ†ï
 */
export const iBUpdateTokOutline = (
  id: number,
  outlineId: number,
  requestIBTokOutlineDto: RequestIBTokOutlineDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBTokOutlineDto>(
    {
      url: `/api/ib/${id}/outline/${outlineId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBTokOutlineDto,
    },
    options,
  )
}

export type IBUpdateTokOutlineMutationResult = NonNullable<Awaited<ReturnType<typeof iBUpdateTokOutline>>>
export type IBUpdateTokOutlineMutationBody = RequestIBTokOutlineDto
export type IBUpdateTokOutlineMutationError = ErrorType<unknown>

export const useIBUpdateTokOutline = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateTokOutline>>,
    TError,
    { id: number; outlineId: number; data: RequestIBTokOutlineDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBUpdateTokOutline>>,
    { id: number; outlineId: number; data: RequestIBTokOutlineDto }
  > = (props) => {
    const { id, outlineId, data } = props ?? {}

    return iBUpdateTokOutline(id, outlineId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBUpdateTokOutline>>,
    TError,
    { id: number; outlineId: number; data: RequestIBTokOutlineDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary TOK Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà ÏàòÏ†ï
 */
export const iBUpdateTokExhibitionPlan = (
  id: number,
  exhibitionPlanId: number,
  requestIBTokExhibitionPlanDto: RequestIBTokExhibitionPlanDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBTokExhibitionPlanDto>(
    {
      url: `/api/ib/${id}/exhibition-plan/${exhibitionPlanId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBTokExhibitionPlanDto,
    },
    options,
  )
}

export type IBUpdateTokExhibitionPlanMutationResult = NonNullable<Awaited<ReturnType<typeof iBUpdateTokExhibitionPlan>>>
export type IBUpdateTokExhibitionPlanMutationBody = RequestIBTokExhibitionPlanDto
export type IBUpdateTokExhibitionPlanMutationError = ErrorType<unknown>

export const useIBUpdateTokExhibitionPlan = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateTokExhibitionPlan>>,
    TError,
    { id: number; exhibitionPlanId: number; data: RequestIBTokExhibitionPlanDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBUpdateTokExhibitionPlan>>,
    { id: number; exhibitionPlanId: number; data: RequestIBTokExhibitionPlanDto }
  > = (props) => {
    const { id, exhibitionPlanId, data } = props ?? {}

    return iBUpdateTokExhibitionPlan(id, exhibitionPlanId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBUpdateTokExhibitionPlan>>,
    TError,
    { id: number; exhibitionPlanId: number; data: RequestIBTokExhibitionPlanDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * 
    IB ÌîÑÎ°úÏ†ùÌä∏ Î≥ÄÍ≤Ω ÏòàÏãú:
    - **TOK**: ÏïÑÏõÉÎùºÏù∏ Ï†ÄÏû•(PENDING) -> ÏïÑÏõÉÎùºÏù∏ Ï†úÏ∂ú(SUBMIT)
    
 * @summary TOK ÏïÑÏõÉÎùºÏù∏ Ï†úÏ∂ú
 */
export const iBSubmitTokOutline = (id: number, outlineId: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<boolean>({ url: `/api/ib/${id}/outline/${outlineId}/submit`, method: 'patch' }, options)
}

export type IBSubmitTokOutlineMutationResult = NonNullable<Awaited<ReturnType<typeof iBSubmitTokOutline>>>

export type IBSubmitTokOutlineMutationError = ErrorType<unknown>

export const useIBSubmitTokOutline = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBSubmitTokOutline>>,
    TError,
    { id: number; outlineId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBSubmitTokOutline>>,
    { id: number; outlineId: number }
  > = (props) => {
    const { id, outlineId } = props ?? {}

    return iBSubmitTokOutline(id, outlineId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBSubmitTokOutline>>,
    TError,
    { id: number; outlineId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * 
    IB ÌîÑÎ°úÏ†ùÌä∏ Î≥ÄÍ≤Ω ÏòàÏãú:
    - **TOK**: Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà Ï†ÄÏû•(PENDING) -> Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà Ï†úÏ∂ú(SUBMIT)
    
 * @summary TOK Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà Ï†úÏ∂ú
 */
export const iBSubmitTokExhibitionPlan = (
  id: number,
  exhibitionPlanId: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>({ url: `/api/ib/${id}/exhibition-plan/${exhibitionPlanId}/submit`, method: 'patch' }, options)
}

export type IBSubmitTokExhibitionPlanMutationResult = NonNullable<Awaited<ReturnType<typeof iBSubmitTokExhibitionPlan>>>

export type IBSubmitTokExhibitionPlanMutationError = ErrorType<unknown>

export const useIBSubmitTokExhibitionPlan = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBSubmitTokExhibitionPlan>>,
    TError,
    { id: number; exhibitionPlanId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBSubmitTokExhibitionPlan>>,
    { id: number; exhibitionPlanId: number }
  > = (props) => {
    const { id, exhibitionPlanId } = props ?? {}

    return iBSubmitTokExhibitionPlan(id, exhibitionPlanId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBSubmitTokExhibitionPlan>>,
    TError,
    { id: number; exhibitionPlanId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * 
    TOK_ESSAY:
    - Ïπ¥ÎìúÏÉÅÌÉú: REJECT_PLAN / ÏïÑÏõÉÎùºÏù∏: ACCEPT
    
 * @summary TOK ÏïÑÏõÉÎùºÏù∏ Í∏∞ÌöçÏïà Î∞òÎ†§(Î≥¥ÏôÑÏöîÏ≤≠)
 */
export const iBRejectTokEssay = (
  id: number,
  outlineId: number,
  requestIBCommentDto: RequestIBCommentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/${id}/outline/${outlineId}/status/reject`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBCommentDto,
    },
    options,
  )
}

export type IBRejectTokEssayMutationResult = NonNullable<Awaited<ReturnType<typeof iBRejectTokEssay>>>
export type IBRejectTokEssayMutationBody = RequestIBCommentDto
export type IBRejectTokEssayMutationError = ErrorType<unknown>

export const useIBRejectTokEssay = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBRejectTokEssay>>,
    TError,
    { id: number; outlineId: number; data: RequestIBCommentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBRejectTokEssay>>,
    { id: number; outlineId: number; data: RequestIBCommentDto }
  > = (props) => {
    const { id, outlineId, data } = props ?? {}

    return iBRejectTokEssay(id, outlineId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBRejectTokEssay>>,
    TError,
    { id: number; outlineId: number; data: RequestIBCommentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * 
    TOK_EXHIBITION:
    - Ïπ¥ÎìúÏÉÅÌÉú: REJECT_PLAN / Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà: ACCEPT
    
 * @summary TOK Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà Î∞òÎ†§(Î≥¥ÏôÑÏöîÏ≤≠)
 */
export const iBRejectTokExhibition = (
  id: number,
  exhibitionPlanId: number,
  requestIBCommentDto: RequestIBCommentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/${id}/exhibition-plan/${exhibitionPlanId}/status/reject`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBCommentDto,
    },
    options,
  )
}

export type IBRejectTokExhibitionMutationResult = NonNullable<Awaited<ReturnType<typeof iBRejectTokExhibition>>>
export type IBRejectTokExhibitionMutationBody = RequestIBCommentDto
export type IBRejectTokExhibitionMutationError = ErrorType<unknown>

export const useIBRejectTokExhibition = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBRejectTokExhibition>>,
    TError,
    { id: number; exhibitionPlanId: number; data: RequestIBCommentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBRejectTokExhibition>>,
    { id: number; exhibitionPlanId: number; data: RequestIBCommentDto }
  > = (props) => {
    const { id, exhibitionPlanId, data } = props ?? {}

    return iBRejectTokExhibition(id, exhibitionPlanId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBRejectTokExhibition>>,
    TError,
    { id: number; exhibitionPlanId: number; data: RequestIBCommentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * 
IB ÌîÑÎ°úÏ†ùÌä∏ Î≥ÄÍ≤Ω ÏòàÏãú:
- **TOK ESSAY**: ÏïÑÏõÉÎùºÏù∏ ÏäπÏù∏ -> ÏßÑÌñâÏ§ë

 * @summary ÏïÑÏõÉÎùºÏù∏ ÏäπÏù∏ -> ÏßÑÌñâÏ§ëÏúºÎ°ú Î≥ÄÍ≤Ω
 */
export const iBUpdateIBTokOutlineStatusInProgress = (
  id: number,
  outlineId: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>({ url: `/api/ib/${id}/outline/${outlineId}/status/in-progress`, method: 'patch' }, options)
}

export type IBUpdateIBTokOutlineStatusInProgressMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBUpdateIBTokOutlineStatusInProgress>>
>

export type IBUpdateIBTokOutlineStatusInProgressMutationError = ErrorType<unknown>

export const useIBUpdateIBTokOutlineStatusInProgress = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateIBTokOutlineStatusInProgress>>,
    TError,
    { id: number; outlineId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBUpdateIBTokOutlineStatusInProgress>>,
    { id: number; outlineId: number }
  > = (props) => {
    const { id, outlineId } = props ?? {}

    return iBUpdateIBTokOutlineStatusInProgress(id, outlineId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBUpdateIBTokOutlineStatusInProgress>>,
    TError,
    { id: number; outlineId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * 
IB ÌîÑÎ°úÏ†ùÌä∏ Î≥ÄÍ≤Ω ÏòàÏãú:
- **TOK EXHIBITION**: Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà ÏäπÏù∏ -> ÏßÑÌñâÏ§ë

 * @summary Ï†ÑÏãúÌöå Í∏∞ÌöçÏïà ÏäπÏù∏ -> ÏßÑÌñâÏ§ëÏúºÎ°ú Î≥ÄÍ≤Ω
 */
export const iBUpdateIBTokExhibitionStatusInProgress = (
  id: number,
  exhibitionPlanId: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    { url: `/api/ib/${id}/exhibition-plan/${exhibitionPlanId}/status/in-progress`, method: 'patch' },
    options,
  )
}

export type IBUpdateIBTokExhibitionStatusInProgressMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBUpdateIBTokExhibitionStatusInProgress>>
>

export type IBUpdateIBTokExhibitionStatusInProgressMutationError = ErrorType<unknown>

export const useIBUpdateIBTokExhibitionStatusInProgress = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUpdateIBTokExhibitionStatusInProgress>>,
    TError,
    { id: number; exhibitionPlanId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBUpdateIBTokExhibitionStatusInProgress>>,
    { id: number; exhibitionPlanId: number }
  > = (props) => {
    const { id, exhibitionPlanId } = props ?? {}

    return iBUpdateIBTokExhibitionStatusInProgress(id, exhibitionPlanId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBUpdateIBTokExhibitionStatusInProgress>>,
    TError,
    { id: number; exhibitionPlanId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Í≥ÑÌöçÏÑú|Ï†úÏïàÏÑú ÎØ∏Ï†úÏ∂úÏûê ÏïåÎ¶ºÎ≥¥ÎÇ¥Í∏∞
 */
export const iBUnsubmitNotification = (
  params: IBUnsubmitNotificationParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>({ url: `/api/ib/unsubmit/notification`, method: 'post', params }, options)
}

export type IBUnsubmitNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof iBUnsubmitNotification>>>

export type IBUnsubmitNotificationMutationError = ErrorType<unknown>

export const useIBUnsubmitNotification = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBUnsubmitNotification>>,
    TError,
    { params: IBUnsubmitNotificationParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBUnsubmitNotification>>,
    { params: IBUnsubmitNotificationParams }
  > = (props) => {
    const { params } = props ?? {}

    return iBUnsubmitNotification(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBUnsubmitNotification>>,
    TError,
    { params: IBUnsubmitNotificationParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌîºÎìúÎ∞± ÏÉùÏÑ±
 */
export const feedbackCreateFeedback = (
  requestFeedbackDto: RequestFeedbackDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseFeedbackDto>(
    { url: `/api/feedback`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: requestFeedbackDto },
    options,
  )
}

export type FeedbackCreateFeedbackMutationResult = NonNullable<Awaited<ReturnType<typeof feedbackCreateFeedback>>>
export type FeedbackCreateFeedbackMutationBody = RequestFeedbackDto
export type FeedbackCreateFeedbackMutationError = ErrorType<unknown>

export const useFeedbackCreateFeedback = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof feedbackCreateFeedback>>,
    TError,
    { data: RequestFeedbackDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof feedbackCreateFeedback>>,
    { data: RequestFeedbackDto }
  > = (props) => {
    const { data } = props ?? {}

    return feedbackCreateFeedback(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof feedbackCreateFeedback>>,
    TError,
    { data: RequestFeedbackDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌîºÎìúÎ∞± Ï°∞Ìöå
 */
export const feedbackGetFeedback = (
  params: FeedbackGetFeedbackParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedFeedbackDto>({ url: `/api/feedback`, method: 'get', params, signal }, options)
}

export const getFeedbackGetFeedbackQueryKey = (params: FeedbackGetFeedbackParams) => [
  `/api/feedback`,
  ...(params ? [params] : []),
]

export type FeedbackGetFeedbackQueryResult = NonNullable<Awaited<ReturnType<typeof feedbackGetFeedback>>>
export type FeedbackGetFeedbackQueryError = ErrorType<unknown>

export const useFeedbackGetFeedback = <
  TData = Awaited<ReturnType<typeof feedbackGetFeedback>>,
  TError = ErrorType<unknown>,
>(
  params: FeedbackGetFeedbackParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof feedbackGetFeedback>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFeedbackGetFeedbackQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof feedbackGetFeedback>>> = ({ signal }) =>
    feedbackGetFeedback(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof feedbackGetFeedback>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï¥ù ÌîºÎìúÎ∞± Ïπ¥Ïö¥Ìä∏
 */
export const feedbackGetFeedbackCount = (
  params: FeedbackGetFeedbackCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<number>({ url: `/api/feedback/count`, method: 'get', params, signal }, options)
}

export const getFeedbackGetFeedbackCountQueryKey = (params: FeedbackGetFeedbackCountParams) => [
  `/api/feedback/count`,
  ...(params ? [params] : []),
]

export type FeedbackGetFeedbackCountQueryResult = NonNullable<Awaited<ReturnType<typeof feedbackGetFeedbackCount>>>
export type FeedbackGetFeedbackCountQueryError = ErrorType<unknown>

export const useFeedbackGetFeedbackCount = <
  TData = Awaited<ReturnType<typeof feedbackGetFeedbackCount>>,
  TError = ErrorType<unknown>,
>(
  params: FeedbackGetFeedbackCountParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof feedbackGetFeedbackCount>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFeedbackGetFeedbackCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof feedbackGetFeedbackCount>>> = ({ signal }) =>
    feedbackGetFeedbackCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof feedbackGetFeedbackCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏùΩÏßÄÏïäÏùÄ ÌîºÎìúÎ∞± Ïπ¥Ïö¥Ìä∏
 */
export const feedbackFindUnreadFeedbacksExist = (
  params: FeedbackFindUnreadFeedbacksExistParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<number>({ url: `/api/feedback/unread/count`, method: 'get', params, signal }, options)
}

export const getFeedbackFindUnreadFeedbacksExistQueryKey = (params: FeedbackFindUnreadFeedbacksExistParams) => [
  `/api/feedback/unread/count`,
  ...(params ? [params] : []),
]

export type FeedbackFindUnreadFeedbacksExistQueryResult = NonNullable<
  Awaited<ReturnType<typeof feedbackFindUnreadFeedbacksExist>>
>
export type FeedbackFindUnreadFeedbacksExistQueryError = ErrorType<unknown>

export const useFeedbackFindUnreadFeedbacksExist = <
  TData = Awaited<ReturnType<typeof feedbackFindUnreadFeedbacksExist>>,
  TError = ErrorType<unknown>,
>(
  params: FeedbackFindUnreadFeedbacksExistParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof feedbackFindUnreadFeedbacksExist>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFeedbackFindUnreadFeedbacksExistQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof feedbackFindUnreadFeedbacksExist>>> = ({ signal }) =>
    feedbackFindUnreadFeedbacksExist(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof feedbackFindUnreadFeedbacksExist>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏùΩÏßÄÏïäÏùÄ ÌîºÎìúÎ∞±|Ï¥ùÌîºÎìúÎ∞± Ïπ¥Ïö¥Ìä∏ (Îã§Ï§ëÏ°∞Ìöå)
 */
export const feedbackBatchFindUnreadFeedbacksExist = (
  params: FeedbackBatchFindUnreadFeedbacksExistParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseBatchUnreadFeedBackCountItemsDto>(
    { url: `/api/feedback/batch/count`, method: 'get', params, signal },
    options,
  )
}

export const getFeedbackBatchFindUnreadFeedbacksExistQueryKey = (
  params: FeedbackBatchFindUnreadFeedbacksExistParams,
) => [`/api/feedback/batch/count`, ...(params ? [params] : [])]

export type FeedbackBatchFindUnreadFeedbacksExistQueryResult = NonNullable<
  Awaited<ReturnType<typeof feedbackBatchFindUnreadFeedbacksExist>>
>
export type FeedbackBatchFindUnreadFeedbacksExistQueryError = ErrorType<unknown>

export const useFeedbackBatchFindUnreadFeedbacksExist = <
  TData = Awaited<ReturnType<typeof feedbackBatchFindUnreadFeedbacksExist>>,
  TError = ErrorType<unknown>,
>(
  params: FeedbackBatchFindUnreadFeedbacksExistParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof feedbackBatchFindUnreadFeedbacksExist>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFeedbackBatchFindUnreadFeedbacksExistQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof feedbackBatchFindUnreadFeedbacksExist>>> = ({ signal }) =>
    feedbackBatchFindUnreadFeedbacksExist(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof feedbackBatchFindUnreadFeedbacksExist>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏùΩÏßÄÏïäÏùÄ ÌîºÎìúÎ∞± Ï°∞Ìöå
 */
export const feedbackGetNotReadFeedback = (
  params: FeedbackGetNotReadFeedbackParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedFeedbackDto>({ url: `/api/feedback/unread`, method: 'get', params, signal }, options)
}

export const getFeedbackGetNotReadFeedbackQueryKey = (params: FeedbackGetNotReadFeedbackParams) => [
  `/api/feedback/unread`,
  ...(params ? [params] : []),
]

export type FeedbackGetNotReadFeedbackQueryResult = NonNullable<Awaited<ReturnType<typeof feedbackGetNotReadFeedback>>>
export type FeedbackGetNotReadFeedbackQueryError = ErrorType<unknown>

export const useFeedbackGetNotReadFeedback = <
  TData = Awaited<ReturnType<typeof feedbackGetNotReadFeedback>>,
  TError = ErrorType<unknown>,
>(
  params: FeedbackGetNotReadFeedbackParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof feedbackGetNotReadFeedback>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFeedbackGetNotReadFeedbackQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof feedbackGetNotReadFeedback>>> = ({ signal }) =>
    feedbackGetNotReadFeedback(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof feedbackGetNotReadFeedback>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏóêÏÑ∏Ïù¥ ÏÉùÏÑ±
 */
export const essayCreateEssay = (
  ibId: number,
  requestEssayDto: RequestEssayDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseEssayDto>(
    {
      url: `/api/ib/${ibId}/essay`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestEssayDto,
    },
    options,
  )
}

export type EssayCreateEssayMutationResult = NonNullable<Awaited<ReturnType<typeof essayCreateEssay>>>
export type EssayCreateEssayMutationBody = RequestEssayDto
export type EssayCreateEssayMutationError = ErrorType<unknown>

export const useEssayCreateEssay = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof essayCreateEssay>>,
    TError,
    { ibId: number; data: RequestEssayDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof essayCreateEssay>>,
    { ibId: number; data: RequestEssayDto }
  > = (props) => {
    const { ibId, data } = props ?? {}

    return essayCreateEssay(ibId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof essayCreateEssay>>,
    TError,
    { ibId: number; data: RequestEssayDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏóêÏÑ∏Ïù¥ Ï°∞Ìöå
 */
export const essayGetEssay = (ibId: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseEssayDto>({ url: `/api/ib/${ibId}/essay`, method: 'get', signal }, options)
}

export const getEssayGetEssayQueryKey = (ibId: number) => [`/api/ib/${ibId}/essay`]

export type EssayGetEssayQueryResult = NonNullable<Awaited<ReturnType<typeof essayGetEssay>>>
export type EssayGetEssayQueryError = ErrorType<unknown>

export const useEssayGetEssay = <TData = Awaited<ReturnType<typeof essayGetEssay>>, TError = ErrorType<unknown>>(
  ibId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof essayGetEssay>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getEssayGetEssayQueryKey(ibId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof essayGetEssay>>> = ({ signal }) =>
    essayGetEssay(ibId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof essayGetEssay>>, TError, TData>(queryKey, queryFn, {
    enabled: !!ibId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏóêÏÑ∏Ïù¥ ÏàòÏ†ï
 */
export const essayUpdateEssay = (
  id: number,
  requestEssayDto: RequestEssayDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseEssayDto>(
    {
      url: `/api/essay/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestEssayDto,
    },
    options,
  )
}

export type EssayUpdateEssayMutationResult = NonNullable<Awaited<ReturnType<typeof essayUpdateEssay>>>
export type EssayUpdateEssayMutationBody = RequestEssayDto
export type EssayUpdateEssayMutationError = ErrorType<unknown>

export const useEssayUpdateEssay = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof essayUpdateEssay>>,
    TError,
    { id: number; data: RequestEssayDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof essayUpdateEssay>>,
    { id: number; data: RequestEssayDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return essayUpdateEssay(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof essayUpdateEssay>>,
    TError,
    { id: number; data: RequestEssayDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏóêÏÑ∏Ïù¥ Ï†úÏ∂ú
 */
export const essayUpdateEssayStatusSent = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<ResponseEssayDto>({ url: `/api/essay/${id}/status/sent`, method: 'patch' }, options)
}

export type EssayUpdateEssayStatusSentMutationResult = NonNullable<
  Awaited<ReturnType<typeof essayUpdateEssayStatusSent>>
>

export type EssayUpdateEssayStatusSentMutationError = ErrorType<unknown>

export const useEssayUpdateEssayStatusSent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof essayUpdateEssayStatusSent>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof essayUpdateEssayStatusSent>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return essayUpdateEssayStatusSent(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof essayUpdateEssayStatusSent>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏóêÏÑ∏Ïù¥ ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉùÏàò Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const essayGetSubmissionStatusCount = (
  params?: EssayGetSubmissionStatusCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseEssayStatusCountDto>(
    { url: `/api/ib/essay/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getEssayGetSubmissionStatusCountQueryKey = (params?: EssayGetSubmissionStatusCountParams) => [
  `/api/ib/essay/submission-status-count`,
  ...(params ? [params] : []),
]

export type EssayGetSubmissionStatusCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof essayGetSubmissionStatusCount>>
>
export type EssayGetSubmissionStatusCountQueryError = ErrorType<unknown>

export const useEssayGetSubmissionStatusCount = <
  TData = Awaited<ReturnType<typeof essayGetSubmissionStatusCount>>,
  TError = ErrorType<unknown>,
>(
  params?: EssayGetSubmissionStatusCountParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof essayGetSubmissionStatusCount>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getEssayGetSubmissionStatusCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof essayGetSubmissionStatusCount>>> = ({ signal }) =>
    essayGetSubmissionStatusCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof essayGetSubmissionStatusCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏóêÏÑ∏Ïù¥ ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉù ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const essayGetSubmissionStatus = (
  params: EssayGetSubmissionStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBEssaySubmissionStatusDto>(
    { url: `/api/ib/essay/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getEssayGetSubmissionStatusQueryKey = (params: EssayGetSubmissionStatusParams) => [
  `/api/ib/essay/submission-status`,
  ...(params ? [params] : []),
]

export type EssayGetSubmissionStatusQueryResult = NonNullable<Awaited<ReturnType<typeof essayGetSubmissionStatus>>>
export type EssayGetSubmissionStatusQueryError = ErrorType<unknown>

export const useEssayGetSubmissionStatus = <
  TData = Awaited<ReturnType<typeof essayGetSubmissionStatus>>,
  TError = ErrorType<unknown>,
>(
  params: EssayGetSubmissionStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof essayGetSubmissionStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getEssayGetSubmissionStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof essayGetSubmissionStatus>>> = ({ signal }) =>
    essayGetSubmissionStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof essayGetSubmissionStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏóêÏÑ∏Ïù¥ ÎØ∏Ï†úÏ∂úÏûê ÏïåÎ¶ºÎ≥¥ÎÇ¥Í∏∞
 */
export const essayUnsubmitNotification = (
  params: EssayUnsubmitNotificationParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>({ url: `/api/ib/essay/unsubmit/notification`, method: 'post', params }, options)
}

export type EssayUnsubmitNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof essayUnsubmitNotification>>>

export type EssayUnsubmitNotificationMutationError = ErrorType<unknown>

export const useEssayUnsubmitNotification = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof essayUnsubmitNotification>>,
    TError,
    { params: EssayUnsubmitNotificationParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof essayUnsubmitNotification>>,
    { params: EssayUnsubmitNotificationParams }
  > = (props) => {
    const { params } = props ?? {}

    return essayUnsubmitNotification(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof essayUnsubmitNotification>>,
    TError,
    { params: EssayUnsubmitNotificationParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary RRS Î™©Î°ù Ï°∞Ìöå
 */
export const rRSFindAll = (
  ibId: number,
  params?: RRSFindAllParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationRRSDto>({ url: `/api/ib/${ibId}/rrs`, method: 'get', params, signal }, options)
}

export const getRRSFindAllQueryKey = (ibId: number, params?: RRSFindAllParams) => [
  `/api/ib/${ibId}/rrs`,
  ...(params ? [params] : []),
]

export type RRSFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof rRSFindAll>>>
export type RRSFindAllQueryError = ErrorType<unknown>

export const useRRSFindAll = <TData = Awaited<ReturnType<typeof rRSFindAll>>, TError = ErrorType<unknown>>(
  ibId: number,
  params?: RRSFindAllParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof rRSFindAll>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRRSFindAllQueryKey(ibId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rRSFindAll>>> = ({ signal }) =>
    rRSFindAll(ibId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof rRSFindAll>>, TError, TData>(queryKey, queryFn, {
    enabled: !!ibId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary RRS ÏÉùÏÑ±
 */
export const rRSCreate = (ibId: number, requestRRSDto: RequestRRSDto, options?: SecondParameter<typeof mutator>) => {
  return mutator<ResponseRRSDto>(
    {
      url: `/api/ib/${ibId}/rrs`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestRRSDto,
    },
    options,
  )
}

export type RRSCreateMutationResult = NonNullable<Awaited<ReturnType<typeof rRSCreate>>>
export type RRSCreateMutationBody = RequestRRSDto
export type RRSCreateMutationError = ErrorType<unknown>

export const useRRSCreate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rRSCreate>>,
    TError,
    { ibId: number; data: RequestRRSDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof rRSCreate>>, { ibId: number; data: RequestRRSDto }> = (
    props,
  ) => {
    const { ibId, data } = props ?? {}

    return rRSCreate(ibId, data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof rRSCreate>>, TError, { ibId: number; data: RequestRRSDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary RRS Îã®Í±¥ Ï°∞Ìöå
 */
export const rRSFindById = (
  ibId: number,
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseRRSDto>({ url: `/api/ib/${ibId}/rrs/${id}`, method: 'get', signal }, options)
}

export const getRRSFindByIdQueryKey = (ibId: number, id: number) => [`/api/ib/${ibId}/rrs/${id}`]

export type RRSFindByIdQueryResult = NonNullable<Awaited<ReturnType<typeof rRSFindById>>>
export type RRSFindByIdQueryError = ErrorType<unknown>

export const useRRSFindById = <TData = Awaited<ReturnType<typeof rRSFindById>>, TError = ErrorType<unknown>>(
  ibId: number,
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof rRSFindById>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRRSFindByIdQueryKey(ibId, id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rRSFindById>>> = ({ signal }) =>
    rRSFindById(ibId, id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof rRSFindById>>, TError, TData>(queryKey, queryFn, {
    enabled: !!(ibId && id),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary RRS ÏàòÏ†ï
 */
export const rRSUpdate = (
  ibId: number,
  id: number,
  requestRRSDto: RequestRRSDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseRRSDto>(
    {
      url: `/api/ib/${ibId}/rrs/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestRRSDto,
    },
    options,
  )
}

export type RRSUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof rRSUpdate>>>
export type RRSUpdateMutationBody = RequestRRSDto
export type RRSUpdateMutationError = ErrorType<unknown>

export const useRRSUpdate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rRSUpdate>>,
    TError,
    { ibId: number; id: number; data: RequestRRSDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rRSUpdate>>,
    { ibId: number; id: number; data: RequestRRSDto }
  > = (props) => {
    const { ibId, id, data } = props ?? {}

    return rRSUpdate(ibId, id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof rRSUpdate>>,
    TError,
    { ibId: number; id: number; data: RequestRRSDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary RRS ÏÇ≠Ï†ú
 */
export const rRSDelete = (ibId: number, id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/ib/${ibId}/rrs/${id}`, method: 'delete' }, options)
}

export type RRSDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof rRSDelete>>>

export type RRSDeleteMutationError = ErrorType<unknown>

export const useRRSDelete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof rRSDelete>>, TError, { ibId: number; id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof rRSDelete>>, { ibId: number; id: number }> = (props) => {
    const { ibId, id } = props ?? {}

    return rRSDelete(ibId, id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof rRSDelete>>, TError, { ibId: number; id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary RRS ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉùÏàò Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const rRSGetSubmissionStatusCount = (
  params?: RRSGetSubmissionStatusCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseRRSStatusCountDto>(
    { url: `/api/ib/rrs/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getRRSGetSubmissionStatusCountQueryKey = (params?: RRSGetSubmissionStatusCountParams) => [
  `/api/ib/rrs/submission-status-count`,
  ...(params ? [params] : []),
]

export type RRSGetSubmissionStatusCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof rRSGetSubmissionStatusCount>>
>
export type RRSGetSubmissionStatusCountQueryError = ErrorType<unknown>

export const useRRSGetSubmissionStatusCount = <
  TData = Awaited<ReturnType<typeof rRSGetSubmissionStatusCount>>,
  TError = ErrorType<unknown>,
>(
  params?: RRSGetSubmissionStatusCountParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof rRSGetSubmissionStatusCount>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRRSGetSubmissionStatusCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rRSGetSubmissionStatusCount>>> = ({ signal }) =>
    rRSGetSubmissionStatusCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof rRSGetSubmissionStatusCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary RRS ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉù ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const rRSGetSubmissionStatus = (
  params: RRSGetSubmissionStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBRRSSubmissionStatusDto>(
    { url: `/api/ib/rrs/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getRRSGetSubmissionStatusQueryKey = (params: RRSGetSubmissionStatusParams) => [
  `/api/ib/rrs/submission-status`,
  ...(params ? [params] : []),
]

export type RRSGetSubmissionStatusQueryResult = NonNullable<Awaited<ReturnType<typeof rRSGetSubmissionStatus>>>
export type RRSGetSubmissionStatusQueryError = ErrorType<unknown>

export const useRRSGetSubmissionStatus = <
  TData = Awaited<ReturnType<typeof rRSGetSubmissionStatus>>,
  TError = ErrorType<unknown>,
>(
  params: RRSGetSubmissionStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof rRSGetSubmissionStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRRSGetSubmissionStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rRSGetSubmissionStatus>>> = ({ signal }) =>
    rRSGetSubmissionStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof rRSGetSubmissionStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary RRS ÎØ∏Ï†úÏ∂úÏûê ÏïåÎ¶ºÎ≥¥ÎÇ¥Í∏∞
 */
export const rRSUnsubmitNotification = (
  params?: RRSUnsubmitNotificationParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>({ url: `/api/ib/rrs/unsubmit/notification`, method: 'post', params }, options)
}

export type RRSUnsubmitNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof rRSUnsubmitNotification>>>

export type RRSUnsubmitNotificationMutationError = ErrorType<unknown>

export const useRRSUnsubmitNotification = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rRSUnsubmitNotification>>,
    TError,
    { params?: RRSUnsubmitNotificationParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rRSUnsubmitNotification>>,
    { params?: RRSUnsubmitNotificationParams }
  > = (props) => {
    const { params } = props ?? {}

    return rRSUnsubmitNotification(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof rRSUnsubmitNotification>>,
    TError,
    { params?: RRSUnsubmitNotificationParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary RPPF Ï°∞Ìöå
 */
export const rPPFFindAllRPPF = (
  ibId: number,
  params?: RPPFFindAllRPPFParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationRPPFDto>({ url: `/api/ib/${ibId}/rppf`, method: 'get', params, signal }, options)
}

export const getRPPFFindAllRPPFQueryKey = (ibId: number, params?: RPPFFindAllRPPFParams) => [
  `/api/ib/${ibId}/rppf`,
  ...(params ? [params] : []),
]

export type RPPFFindAllRPPFQueryResult = NonNullable<Awaited<ReturnType<typeof rPPFFindAllRPPF>>>
export type RPPFFindAllRPPFQueryError = ErrorType<unknown>

export const useRPPFFindAllRPPF = <TData = Awaited<ReturnType<typeof rPPFFindAllRPPF>>, TError = ErrorType<unknown>>(
  ibId: number,
  params?: RPPFFindAllRPPFParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof rPPFFindAllRPPF>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRPPFFindAllRPPFQueryKey(ibId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rPPFFindAllRPPF>>> = ({ signal }) =>
    rPPFFindAllRPPF(ibId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof rPPFFindAllRPPF>>, TError, TData>(queryKey, queryFn, {
    enabled: !!ibId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary RPPF Ï∞®Ïàò ÏÉùÏÑ±/ÏàòÏ†ï
 */
export const rPPFCreateOrUpdate = (
  ibId: number,
  requestCreateRPPFDto: RequestCreateRPPFDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseRPPFDto>(
    {
      url: `/api/ib/${ibId}/rppf`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateRPPFDto,
    },
    options,
  )
}

export type RPPFCreateOrUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof rPPFCreateOrUpdate>>>
export type RPPFCreateOrUpdateMutationBody = RequestCreateRPPFDto
export type RPPFCreateOrUpdateMutationError = ErrorType<unknown>

export const useRPPFCreateOrUpdate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rPPFCreateOrUpdate>>,
    TError,
    { ibId: number; data: RequestCreateRPPFDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rPPFCreateOrUpdate>>,
    { ibId: number; data: RequestCreateRPPFDto }
  > = (props) => {
    const { ibId, data } = props ?? {}

    return rPPFCreateOrUpdate(ibId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof rPPFCreateOrUpdate>>,
    TError,
    { ibId: number; data: RequestCreateRPPFDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary RPPF ÏÉÅÏÑ∏Ï°∞Ìöå
 */
export const rPPFFindRPPFById = (
  ibId: number,
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseRPPFDto>({ url: `/api/ib/${ibId}/rppf/${id}`, method: 'get', signal }, options)
}

export const getRPPFFindRPPFByIdQueryKey = (ibId: number, id: number) => [`/api/ib/${ibId}/rppf/${id}`]

export type RPPFFindRPPFByIdQueryResult = NonNullable<Awaited<ReturnType<typeof rPPFFindRPPFById>>>
export type RPPFFindRPPFByIdQueryError = ErrorType<unknown>

export const useRPPFFindRPPFById = <TData = Awaited<ReturnType<typeof rPPFFindRPPFById>>, TError = ErrorType<unknown>>(
  ibId: number,
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof rPPFFindRPPFById>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRPPFFindRPPFByIdQueryKey(ibId, id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rPPFFindRPPFById>>> = ({ signal }) =>
    rPPFFindRPPFById(ibId, id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof rPPFFindRPPFById>>, TError, TData>(queryKey, queryFn, {
    enabled: !!(ibId && id),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary RPPF ÏôÑÎ£åÏäπÏù∏ÏöîÏ≤≠ (ÌïôÏÉù)
 */
export const rPPFUpdateRPPFStatusWaitComplete = (
  ibId: number,
  rppfId: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseRPPFDto>(
    { url: `/api/ib/${ibId}/rppf/${rppfId}/status/wait-complete`, method: 'patch' },
    options,
  )
}

export type RPPFUpdateRPPFStatusWaitCompleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof rPPFUpdateRPPFStatusWaitComplete>>
>

export type RPPFUpdateRPPFStatusWaitCompleteMutationError = ErrorType<unknown>

export const useRPPFUpdateRPPFStatusWaitComplete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rPPFUpdateRPPFStatusWaitComplete>>,
    TError,
    { ibId: number; rppfId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rPPFUpdateRPPFStatusWaitComplete>>,
    { ibId: number; rppfId: number }
  > = (props) => {
    const { ibId, rppfId } = props ?? {}

    return rPPFUpdateRPPFStatusWaitComplete(ibId, rppfId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof rPPFUpdateRPPFStatusWaitComplete>>,
    TError,
    { ibId: number; rppfId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary RPPF Î∞òÎ†§Î≥¥ÏôÑÏöîÏ≤≠ (ÏÑ†ÏÉùÎãò)
 */
export const rPPFUpdateRPPFStatusReject = (
  ibId: number,
  rppfId: number,
  requestIBCommentDto: RequestIBCommentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/${ibId}/rppf/${rppfId}/status/reject`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBCommentDto,
    },
    options,
  )
}

export type RPPFUpdateRPPFStatusRejectMutationResult = NonNullable<
  Awaited<ReturnType<typeof rPPFUpdateRPPFStatusReject>>
>
export type RPPFUpdateRPPFStatusRejectMutationBody = RequestIBCommentDto
export type RPPFUpdateRPPFStatusRejectMutationError = ErrorType<unknown>

export const useRPPFUpdateRPPFStatusReject = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rPPFUpdateRPPFStatusReject>>,
    TError,
    { ibId: number; rppfId: number; data: RequestIBCommentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rPPFUpdateRPPFStatusReject>>,
    { ibId: number; rppfId: number; data: RequestIBCommentDto }
  > = (props) => {
    const { ibId, rppfId, data } = props ?? {}

    return rPPFUpdateRPPFStatusReject(ibId, rppfId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof rPPFUpdateRPPFStatusReject>>,
    TError,
    { ibId: number; rppfId: number; data: RequestIBCommentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary IBÏ†úÏ∂úÏ†ïÎ≥¥ Í∏∞ÏûÖ (ÏÑ†ÏÉùÎãò)
 */
export const rPPFUpdateRPPFInfo = (
  ibId: number,
  rppfId: number,
  requestRPPFInfoUpdateDto: RequestRPPFInfoUpdateDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseRPPFDto>(
    {
      url: `/api/ib/${ibId}/rppf/${rppfId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestRPPFInfoUpdateDto,
    },
    options,
  )
}

export type RPPFUpdateRPPFInfoMutationResult = NonNullable<Awaited<ReturnType<typeof rPPFUpdateRPPFInfo>>>
export type RPPFUpdateRPPFInfoMutationBody = RequestRPPFInfoUpdateDto
export type RPPFUpdateRPPFInfoMutationError = ErrorType<unknown>

export const useRPPFUpdateRPPFInfo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rPPFUpdateRPPFInfo>>,
    TError,
    { ibId: number; rppfId: number; data: RequestRPPFInfoUpdateDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rPPFUpdateRPPFInfo>>,
    { ibId: number; rppfId: number; data: RequestRPPFInfoUpdateDto }
  > = (props) => {
    const { ibId, rppfId, data } = props ?? {}

    return rPPFUpdateRPPFInfo(ibId, rppfId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof rPPFUpdateRPPFInfo>>,
    TError,
    { ibId: number; rppfId: number; data: RequestRPPFInfoUpdateDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary RPPF ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉùÏàò Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const rPPFGetSubmissionStatusCount = (
  params?: RPPFGetSubmissionStatusCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseRPPFStatusCountDto>(
    { url: `/api/ib/rppf/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getRPPFGetSubmissionStatusCountQueryKey = (params?: RPPFGetSubmissionStatusCountParams) => [
  `/api/ib/rppf/submission-status-count`,
  ...(params ? [params] : []),
]

export type RPPFGetSubmissionStatusCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof rPPFGetSubmissionStatusCount>>
>
export type RPPFGetSubmissionStatusCountQueryError = ErrorType<unknown>

export const useRPPFGetSubmissionStatusCount = <
  TData = Awaited<ReturnType<typeof rPPFGetSubmissionStatusCount>>,
  TError = ErrorType<unknown>,
>(
  params?: RPPFGetSubmissionStatusCountParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof rPPFGetSubmissionStatusCount>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRPPFGetSubmissionStatusCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rPPFGetSubmissionStatusCount>>> = ({ signal }) =>
    rPPFGetSubmissionStatusCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof rPPFGetSubmissionStatusCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary RPPF ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉù ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const rPPFGetSubmissionStatus = (
  params: RPPFGetSubmissionStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBRPPFSubmissionStatusDto>(
    { url: `/api/ib/rppf/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getRPPFGetSubmissionStatusQueryKey = (params: RPPFGetSubmissionStatusParams) => [
  `/api/ib/rppf/submission-status`,
  ...(params ? [params] : []),
]

export type RPPFGetSubmissionStatusQueryResult = NonNullable<Awaited<ReturnType<typeof rPPFGetSubmissionStatus>>>
export type RPPFGetSubmissionStatusQueryError = ErrorType<unknown>

export const useRPPFGetSubmissionStatus = <
  TData = Awaited<ReturnType<typeof rPPFGetSubmissionStatus>>,
  TError = ErrorType<unknown>,
>(
  params: RPPFGetSubmissionStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof rPPFGetSubmissionStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getRPPFGetSubmissionStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof rPPFGetSubmissionStatus>>> = ({ signal }) =>
    rPPFGetSubmissionStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof rPPFGetSubmissionStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary RPPF ÎØ∏Ï†úÏ∂úÏûê ÏïåÎ¶ºÎ≥¥ÎÇ¥Í∏∞
 */
export const rPPFUnsubmitNotification = (
  params?: RPPFUnsubmitNotificationParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>({ url: `/api/ib/rppf/unsubmit/notification`, method: 'post', params }, options)
}

export type RPPFUnsubmitNotificationMutationResult = NonNullable<Awaited<ReturnType<typeof rPPFUnsubmitNotification>>>

export type RPPFUnsubmitNotificationMutationError = ErrorType<unknown>

export const useRPPFUnsubmitNotification = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof rPPFUnsubmitNotification>>,
    TError,
    { params?: RPPFUnsubmitNotificationParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof rPPFUnsubmitNotification>>,
    { params?: RPPFUnsubmitNotificationParams }
  > = (props) => {
    const { params } = props ?? {}

    return rPPFUnsubmitNotification(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof rPPFUnsubmitNotification>>,
    TError,
    { params?: RPPFUnsubmitNotificationParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèôÏùºÏßÄ Î™©Î°ù Ï°∞Ìöå
 */
export const iBActivityLogGetItems = (
  ibId: number,
  params?: IBActivityLogGetItemsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationIBActivityLogDto>(
    { url: `/api/ib/${ibId}/activity-log/items`, method: 'get', params, signal },
    options,
  )
}

export const getIBActivityLogGetItemsQueryKey = (ibId: number, params?: IBActivityLogGetItemsParams) => [
  `/api/ib/${ibId}/activity-log/items`,
  ...(params ? [params] : []),
]

export type IBActivityLogGetItemsQueryResult = NonNullable<Awaited<ReturnType<typeof iBActivityLogGetItems>>>
export type IBActivityLogGetItemsQueryError = ErrorType<unknown>

export const useIBActivityLogGetItems = <
  TData = Awaited<ReturnType<typeof iBActivityLogGetItems>>,
  TError = ErrorType<unknown>,
>(
  ibId: number,
  params?: IBActivityLogGetItemsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBActivityLogGetItems>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBActivityLogGetItemsQueryKey(ibId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBActivityLogGetItems>>> = ({ signal }) =>
    iBActivityLogGetItems(ibId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBActivityLogGetItems>>, TError, TData>(queryKey, queryFn, {
    enabled: !!ibId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèôÏùºÏßÄ Îã®Í±¥ Ï°∞Ìöå
 */
export const iBActivityLogGetItem = (
  ibId: number,
  activityLogId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBActivityLogDto>(
    { url: `/api/ib/${ibId}/activity-log/${activityLogId}`, method: 'get', signal },
    options,
  )
}

export const getIBActivityLogGetItemQueryKey = (ibId: number, activityLogId: number) => [
  `/api/ib/${ibId}/activity-log/${activityLogId}`,
]

export type IBActivityLogGetItemQueryResult = NonNullable<Awaited<ReturnType<typeof iBActivityLogGetItem>>>
export type IBActivityLogGetItemQueryError = ErrorType<unknown>

export const useIBActivityLogGetItem = <
  TData = Awaited<ReturnType<typeof iBActivityLogGetItem>>,
  TError = ErrorType<unknown>,
>(
  ibId: number,
  activityLogId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBActivityLogGetItem>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBActivityLogGetItemQueryKey(ibId, activityLogId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBActivityLogGetItem>>> = ({ signal }) =>
    iBActivityLogGetItem(ibId, activityLogId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBActivityLogGetItem>>, TError, TData>(queryKey, queryFn, {
    enabled: !!(ibId && activityLogId),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌôúÎèôÏùºÏßÄ ÏàòÏ†ï
 */
export const iBActivityLogUpdateItem = (
  ibId: number,
  activityLogId: number,
  requestIBActivityLogUpdateDto: RequestIBActivityLogUpdateDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBActivityLogDto>(
    {
      url: `/api/ib/${ibId}/activity-log/${activityLogId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBActivityLogUpdateDto,
    },
    options,
  )
}

export type IBActivityLogUpdateItemMutationResult = NonNullable<Awaited<ReturnType<typeof iBActivityLogUpdateItem>>>
export type IBActivityLogUpdateItemMutationBody = RequestIBActivityLogUpdateDto
export type IBActivityLogUpdateItemMutationError = ErrorType<unknown>

export const useIBActivityLogUpdateItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBActivityLogUpdateItem>>,
    TError,
    { ibId: number; activityLogId: number; data: RequestIBActivityLogUpdateDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBActivityLogUpdateItem>>,
    { ibId: number; activityLogId: number; data: RequestIBActivityLogUpdateDto }
  > = (props) => {
    const { ibId, activityLogId, data } = props ?? {}

    return iBActivityLogUpdateItem(ibId, activityLogId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBActivityLogUpdateItem>>,
    TError,
    { ibId: number; activityLogId: number; data: RequestIBActivityLogUpdateDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèôÏùºÏßÄ ÏÇ≠Ï†ú
 */
export const iBActivityLogDeleteItem = (
  ibId: number,
  activityLogId: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>({ url: `/api/ib/${ibId}/activity-log/${activityLogId}`, method: 'delete' }, options)
}

export type IBActivityLogDeleteItemMutationResult = NonNullable<Awaited<ReturnType<typeof iBActivityLogDeleteItem>>>

export type IBActivityLogDeleteItemMutationError = ErrorType<unknown>

export const useIBActivityLogDeleteItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBActivityLogDeleteItem>>,
    TError,
    { ibId: number; activityLogId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBActivityLogDeleteItem>>,
    { ibId: number; activityLogId: number }
  > = (props) => {
    const { ibId, activityLogId } = props ?? {}

    return iBActivityLogDeleteItem(ibId, activityLogId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBActivityLogDeleteItem>>,
    TError,
    { ibId: number; activityLogId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌôúÎèôÏùºÏßÄ ÏÉùÏÑ±
 */
export const iBActivityLogCreateItem = (
  ibId: number,
  requestIBActivityLogDto: RequestIBActivityLogDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBActivityLogDto>(
    {
      url: `/api/ib/${ibId}/activity-log`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBActivityLogDto,
    },
    options,
  )
}

export type IBActivityLogCreateItemMutationResult = NonNullable<Awaited<ReturnType<typeof iBActivityLogCreateItem>>>
export type IBActivityLogCreateItemMutationBody = RequestIBActivityLogDto
export type IBActivityLogCreateItemMutationError = ErrorType<unknown>

export const useIBActivityLogCreateItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBActivityLogCreateItem>>,
    TError,
    { ibId: number; data: RequestIBActivityLogDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBActivityLogCreateItem>>,
    { ibId: number; data: RequestIBActivityLogDto }
  > = (props) => {
    const { ibId, data } = props ?? {}

    return iBActivityLogCreateItem(ibId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBActivityLogCreateItem>>,
    TError,
    { ibId: number; data: RequestIBActivityLogDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï£ºÏ†ú ÏßàÎ¨∏ Ï°∞Ìöå
 */
export const themeQuestionGetThemeQuestionItemsByType = (
  params?: ThemeQuestionGetThemeQuestionItemsByTypeParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseThemeQuestionDto[]>(
    { url: `/api/ib/theme-question/items`, method: 'get', params, signal },
    options,
  )
}

export const getThemeQuestionGetThemeQuestionItemsByTypeQueryKey = (
  params?: ThemeQuestionGetThemeQuestionItemsByTypeParams,
) => [`/api/ib/theme-question/items`, ...(params ? [params] : [])]

export type ThemeQuestionGetThemeQuestionItemsByTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof themeQuestionGetThemeQuestionItemsByType>>
>
export type ThemeQuestionGetThemeQuestionItemsByTypeQueryError = ErrorType<unknown>

export const useThemeQuestionGetThemeQuestionItemsByType = <
  TData = Awaited<ReturnType<typeof themeQuestionGetThemeQuestionItemsByType>>,
  TError = ErrorType<unknown>,
>(
  params?: ThemeQuestionGetThemeQuestionItemsByTypeParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof themeQuestionGetThemeQuestionItemsByType>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getThemeQuestionGetThemeQuestionItemsByTypeQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof themeQuestionGetThemeQuestionItemsByType>>> = ({ signal }) =>
    themeQuestionGetThemeQuestionItemsByType(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof themeQuestionGetThemeQuestionItemsByType>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï£ºÏ†ú ÏßàÎ¨∏ Ï†ÄÏû•/ÏàòÏ†ï
 */
export const themeQuestionSaveThemeQuestions = (
  requestCreateThemeQuestionsDto: RequestCreateThemeQuestionsDto,
  params: ThemeQuestionSaveThemeQuestionsParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseThemeQuestionDto>(
    {
      url: `/api/ib/theme-question`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateThemeQuestionsDto,
      params,
    },
    options,
  )
}

export type ThemeQuestionSaveThemeQuestionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof themeQuestionSaveThemeQuestions>>
>
export type ThemeQuestionSaveThemeQuestionsMutationBody = RequestCreateThemeQuestionsDto
export type ThemeQuestionSaveThemeQuestionsMutationError = ErrorType<unknown>

export const useThemeQuestionSaveThemeQuestions = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof themeQuestionSaveThemeQuestions>>,
    TError,
    { data: RequestCreateThemeQuestionsDto; params: ThemeQuestionSaveThemeQuestionsParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof themeQuestionSaveThemeQuestions>>,
    { data: RequestCreateThemeQuestionsDto; params: ThemeQuestionSaveThemeQuestionsParams }
  > = (props) => {
    const { data, params } = props ?? {}

    return themeQuestionSaveThemeQuestions(data, params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof themeQuestionSaveThemeQuestions>>,
    TError,
    { data: RequestCreateThemeQuestionsDto; params: ThemeQuestionSaveThemeQuestionsParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary IB ÏΩîÎîî Îã§Ï§ëÏ°∞Ìöå
 */
export const iBCoordinatorGetItems = (
  params?: IBCoordinatorGetItemsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBCoordinatorDto>(
    { url: `/api/ib/coordinator/items`, method: 'get', params, signal },
    options,
  )
}

export const getIBCoordinatorGetItemsQueryKey = (params?: IBCoordinatorGetItemsParams) => [
  `/api/ib/coordinator/items`,
  ...(params ? [params] : []),
]

export type IBCoordinatorGetItemsQueryResult = NonNullable<Awaited<ReturnType<typeof iBCoordinatorGetItems>>>
export type IBCoordinatorGetItemsQueryError = ErrorType<unknown>

export const useIBCoordinatorGetItems = <
  TData = Awaited<ReturnType<typeof iBCoordinatorGetItems>>,
  TError = ErrorType<unknown>,
>(
  params?: IBCoordinatorGetItemsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBCoordinatorGetItems>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBCoordinatorGetItemsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBCoordinatorGetItems>>> = ({ signal }) =>
    iBCoordinatorGetItems(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBCoordinatorGetItems>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Î≥∏Ïù∏ ÏΩîÎîî Í∂åÌïúÏ≤¥ÌÅ¨
 */
export const iBCoordinatorGetCoordinatorPermission = (
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseCoordinatorSelfCheckDto>({ url: `/api/ib/coordinator/self`, method: 'get', signal }, options)
}

export const getIBCoordinatorGetCoordinatorPermissionQueryKey = () => [`/api/ib/coordinator/self`]

export type IBCoordinatorGetCoordinatorPermissionQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBCoordinatorGetCoordinatorPermission>>
>
export type IBCoordinatorGetCoordinatorPermissionQueryError = ErrorType<unknown>

export const useIBCoordinatorGetCoordinatorPermission = <
  TData = Awaited<ReturnType<typeof iBCoordinatorGetCoordinatorPermission>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof iBCoordinatorGetCoordinatorPermission>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBCoordinatorGetCoordinatorPermissionQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBCoordinatorGetCoordinatorPermission>>> = ({ signal }) =>
    iBCoordinatorGetCoordinatorPermission(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBCoordinatorGetCoordinatorPermission>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞ Í∂åÌïú ÏßÄÏ†ï
 */
export const iBCoordinatorCreateCoordinator = (
  requestCoordinatorDto: RequestCoordinatorDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseCoordinatorDto>(
    {
      url: `/api/ib/coordinator`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCoordinatorDto,
    },
    options,
  )
}

export type IBCoordinatorCreateCoordinatorMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBCoordinatorCreateCoordinator>>
>
export type IBCoordinatorCreateCoordinatorMutationBody = RequestCoordinatorDto
export type IBCoordinatorCreateCoordinatorMutationError = ErrorType<unknown>

export const useIBCoordinatorCreateCoordinator = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBCoordinatorCreateCoordinator>>,
    TError,
    { data: RequestCoordinatorDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBCoordinatorCreateCoordinator>>,
    { data: RequestCoordinatorDto }
  > = (props) => {
    const { data } = props ?? {}

    return iBCoordinatorCreateCoordinator(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBCoordinatorCreateCoordinator>>,
    TError,
    { data: RequestCoordinatorDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞ Í∂åÌïú ÏÇ≠Ï†ú
 */
export const iBCoordinatorDeleteCoordinator = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/ib/coordinator/${id}`, method: 'delete' }, options)
}

export type IBCoordinatorDeleteCoordinatorMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBCoordinatorDeleteCoordinator>>
>

export type IBCoordinatorDeleteCoordinatorMutationError = ErrorType<unknown>

export const useIBCoordinatorDeleteCoordinator = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBCoordinatorDeleteCoordinator>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBCoordinatorDeleteCoordinator>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return iBCoordinatorDeleteCoordinator(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBCoordinatorDeleteCoordinator>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary IB ÎßàÍ∞êÏùºÏûê Ï°∞Ìöå
 */
export const iBDeadlineGetItems = (
  params: IBDeadlineGetItemsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBDeadlineitemsDto>({ url: `/api/ib/deadline/items`, method: 'get', params, signal }, options)
}

export const getIBDeadlineGetItemsQueryKey = (params: IBDeadlineGetItemsParams) => [
  `/api/ib/deadline/items`,
  ...(params ? [params] : []),
]

export type IBDeadlineGetItemsQueryResult = NonNullable<Awaited<ReturnType<typeof iBDeadlineGetItems>>>
export type IBDeadlineGetItemsQueryError = ErrorType<unknown>

export const useIBDeadlineGetItems = <
  TData = Awaited<ReturnType<typeof iBDeadlineGetItems>>,
  TError = ErrorType<unknown>,
>(
  params: IBDeadlineGetItemsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBDeadlineGetItems>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBDeadlineGetItemsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBDeadlineGetItems>>> = ({ signal }) =>
    iBDeadlineGetItems(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBDeadlineGetItems>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary IB ÎßàÍ∞êÏùºÏûê ÏÉùÏÑ±
 */
export const iBDeadlineCreateDeadline = (
  requestIBDeadlineDto: RequestIBDeadlineDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBDeadlineDto>(
    {
      url: `/api/ib/deadline`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBDeadlineDto,
    },
    options,
  )
}

export type IBDeadlineCreateDeadlineMutationResult = NonNullable<Awaited<ReturnType<typeof iBDeadlineCreateDeadline>>>
export type IBDeadlineCreateDeadlineMutationBody = RequestIBDeadlineDto
export type IBDeadlineCreateDeadlineMutationError = ErrorType<unknown>

export const useIBDeadlineCreateDeadline = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBDeadlineCreateDeadline>>,
    TError,
    { data: RequestIBDeadlineDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBDeadlineCreateDeadline>>,
    { data: RequestIBDeadlineDto }
  > = (props) => {
    const { data } = props ?? {}

    return iBDeadlineCreateDeadline(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBDeadlineCreateDeadline>>,
    TError,
    { data: RequestIBDeadlineDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary IB ÎßàÍ∞êÏùºÏûê ÏàòÏ†ï
 */
export const iBDeadlineUpdateDeadline = (
  id: number,
  requestIBDeadlineUpdateDto: RequestIBDeadlineUpdateDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBDeadlineDto>(
    {
      url: `/api/ib/deadline/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBDeadlineUpdateDto,
    },
    options,
  )
}

export type IBDeadlineUpdateDeadlineMutationResult = NonNullable<Awaited<ReturnType<typeof iBDeadlineUpdateDeadline>>>
export type IBDeadlineUpdateDeadlineMutationBody = RequestIBDeadlineUpdateDto
export type IBDeadlineUpdateDeadlineMutationError = ErrorType<unknown>

export const useIBDeadlineUpdateDeadline = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBDeadlineUpdateDeadline>>,
    TError,
    { id: number; data: RequestIBDeadlineUpdateDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBDeadlineUpdateDeadline>>,
    { id: number; data: RequestIBDeadlineUpdateDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return iBDeadlineUpdateDeadline(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBDeadlineUpdateDeadline>>,
    TError,
    { id: number; data: RequestIBDeadlineUpdateDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary IB ÎßàÍ∞êÏùºÏûê ÏÇ≠Ï†ú
 */
export const iBDeadlineDeleteDeadline = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<unknown>({ url: `/api/ib/deadline/${id}`, method: 'delete' }, options)
}

export type IBDeadlineDeleteDeadlineMutationResult = NonNullable<Awaited<ReturnType<typeof iBDeadlineDeleteDeadline>>>

export type IBDeadlineDeleteDeadlineMutationError = ErrorType<unknown>

export const useIBDeadlineDeleteDeadline = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof iBDeadlineDeleteDeadline>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBDeadlineDeleteDeadline>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return iBDeadlineDeleteDeadline(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBDeadlineDeleteDeadline>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÏßàÎ¨∏ Î≤åÌÅ¨ ÏÉùÏÑ± (ÏΩîÎîî)
 */
export const checklistCreateChecklist = (
  requestChecklistBulkDto: RequestChecklistBulkDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/checklist`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestChecklistBulkDto,
    },
    options,
  )
}

export type ChecklistCreateChecklistMutationResult = NonNullable<Awaited<ReturnType<typeof checklistCreateChecklist>>>
export type ChecklistCreateChecklistMutationBody = RequestChecklistBulkDto
export type ChecklistCreateChecklistMutationError = ErrorType<unknown>

export const useChecklistCreateChecklist = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checklistCreateChecklist>>,
    TError,
    { data: RequestChecklistBulkDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checklistCreateChecklist>>,
    { data: RequestChecklistBulkDto }
  > = (props) => {
    const { data } = props ?? {}

    return checklistCreateChecklist(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof checklistCreateChecklist>>,
    TError,
    { data: RequestChecklistBulkDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÏßàÎ¨∏ Ï°∞Ìöå (ÏΩîÎîî)
 */
export const checklistGetitems = (
  params: ChecklistGetitemsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedChecklistDto>({ url: `/api/checklist`, method: 'get', params, signal }, options)
}

export const getChecklistGetitemsQueryKey = (params: ChecklistGetitemsParams) => [
  `/api/checklist`,
  ...(params ? [params] : []),
]

export type ChecklistGetitemsQueryResult = NonNullable<Awaited<ReturnType<typeof checklistGetitems>>>
export type ChecklistGetitemsQueryError = ErrorType<unknown>

export const useChecklistGetitems = <
  TData = Awaited<ReturnType<typeof checklistGetitems>>,
  TError = ErrorType<unknown>,
>(
  params: ChecklistGetitemsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof checklistGetitems>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getChecklistGetitemsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof checklistGetitems>>> = ({ signal }) =>
    checklistGetitems(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof checklistGetitems>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÏßàÎ¨∏ Î≤åÌÅ¨ ÏÇ≠Ï†ú (ÏΩîÎîî)
 */
export const checklistDeleteChecklist = (
  deleteCheckListContent: DeleteCheckListContent,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/checklist`,
      method: 'delete',
      headers: { 'Content-Type': 'application/json' },
      data: deleteCheckListContent,
    },
    options,
  )
}

export type ChecklistDeleteChecklistMutationResult = NonNullable<Awaited<ReturnType<typeof checklistDeleteChecklist>>>
export type ChecklistDeleteChecklistMutationBody = DeleteCheckListContent
export type ChecklistDeleteChecklistMutationError = ErrorType<unknown>

export const useChecklistDeleteChecklist = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checklistDeleteChecklist>>,
    TError,
    { data: DeleteCheckListContent },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checklistDeleteChecklist>>,
    { data: DeleteCheckListContent }
  > = (props) => {
    const { data } = props ?? {}

    return checklistDeleteChecklist(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof checklistDeleteChecklist>>,
    TError,
    { data: DeleteCheckListContent },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * ÏöîÏ≤≠ Î≥∏Ïù∏Ïùò Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Í∞Ä Ï≤¥ÌÅ¨ Î∞è Ìï¥Ï†úÍ∞Ä Îê©ÎãàÎã§. (ÏûêÍ∏∞ÏûêÏã†Ïùò Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Îßå Î∞òÏòÅÏù¥ Îê©ÎãàÎã§.)
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ï≤¥ÌÅ¨ ÏÉÅÌÉú Î≥ÄÍ≤Ω (ÌïôÏÉù)
 */
export const checklistCreateChecklistResponse = (
  requestChecklistResponseBulkDto: RequestChecklistResponseBulkDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/checklist/check`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestChecklistResponseBulkDto,
    },
    options,
  )
}

export type ChecklistCreateChecklistResponseMutationResult = NonNullable<
  Awaited<ReturnType<typeof checklistCreateChecklistResponse>>
>
export type ChecklistCreateChecklistResponseMutationBody = RequestChecklistResponseBulkDto
export type ChecklistCreateChecklistResponseMutationError = ErrorType<unknown>

export const useChecklistCreateChecklistResponse = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checklistCreateChecklistResponse>>,
    TError,
    { data: RequestChecklistResponseBulkDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checklistCreateChecklistResponse>>,
    { data: RequestChecklistResponseBulkDto }
  > = (props) => {
    const { data } = props ?? {}

    return checklistCreateChecklistResponse(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof checklistCreateChecklistResponse>>,
    TError,
    { data: RequestChecklistResponseBulkDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * ÏöîÏ≤≠ Î≥∏Ïù∏Ïùò Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Í∞Ä Ï≤¥ÌÅ¨ Î∞è Ìï¥Ï†úÍ∞Ä Îê©ÎãàÎã§. (ÏûêÍ∏∞ÏûêÏã†Ïùò Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Îßå Î∞òÏòÅÏù¥ Îê©ÎãàÎã§.)
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ï≤¥ÌÅ¨ ÏÉÅÌÉú Î≥ÄÍ≤Ω (ÏÑ†ÏÉùÎãòÏù¥ ÌïôÏÉùÏ≤¥ÌÅ¨ Î≥ÄÍ≤Ω)
 */
export const checklistCreateChecklistResponseFromTeacher = (
  studentId: number,
  requestChecklistResponseBulkDto: RequestChecklistResponseBulkDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/checklist/check/student/${studentId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestChecklistResponseBulkDto,
    },
    options,
  )
}

export type ChecklistCreateChecklistResponseFromTeacherMutationResult = NonNullable<
  Awaited<ReturnType<typeof checklistCreateChecklistResponseFromTeacher>>
>
export type ChecklistCreateChecklistResponseFromTeacherMutationBody = RequestChecklistResponseBulkDto
export type ChecklistCreateChecklistResponseFromTeacherMutationError = ErrorType<unknown>

export const useChecklistCreateChecklistResponseFromTeacher = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof checklistCreateChecklistResponseFromTeacher>>,
    TError,
    { studentId: number; data: RequestChecklistResponseBulkDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof checklistCreateChecklistResponseFromTeacher>>,
    { studentId: number; data: RequestChecklistResponseBulkDto }
  > = (props) => {
    const { studentId, data } = props ?? {}

    return checklistCreateChecklistResponseFromTeacher(studentId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof checklistCreateChecklistResponseFromTeacher>>,
    TError,
    { studentId: number; data: RequestChecklistResponseBulkDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ ÏßàÎ¨∏ Î∞è Ï≤¥ÌÅ¨Ï°∞Ìöå (ÌïôÏÉù)
 */
export const checklistGetitemsByStudent = (
  studentId: number,
  params: ChecklistGetitemsByStudentParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedChecklistDto>(
    { url: `/api/checklist/student/${studentId}`, method: 'get', params, signal },
    options,
  )
}

export const getChecklistGetitemsByStudentQueryKey = (studentId: number, params: ChecklistGetitemsByStudentParams) => [
  `/api/checklist/student/${studentId}`,
  ...(params ? [params] : []),
]

export type ChecklistGetitemsByStudentQueryResult = NonNullable<Awaited<ReturnType<typeof checklistGetitemsByStudent>>>
export type ChecklistGetitemsByStudentQueryError = ErrorType<unknown>

export const useChecklistGetitemsByStudent = <
  TData = Awaited<ReturnType<typeof checklistGetitemsByStudent>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  params: ChecklistGetitemsByStudentParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof checklistGetitemsByStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getChecklistGetitemsByStudentQueryKey(studentId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof checklistGetitemsByStudent>>> = ({ signal }) =>
    checklistGetitemsByStudent(studentId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof checklistGetitemsByStudent>>, TError, TData>(queryKey, queryFn, {
    enabled: !!studentId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary EE ÌèâÍ∞Ä ÏÉùÏÑ± (ÏΩîÎîî)
 */
export const eEEvaluationCreateEEEvaluation = (
  requestEEEvaluationDto: RequestEEEvaluationDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseEEEvaluationRelationDto>(
    {
      url: `/api/ib/ee-evaluation`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestEEEvaluationDto,
    },
    options,
  )
}

export type EEEvaluationCreateEEEvaluationMutationResult = NonNullable<
  Awaited<ReturnType<typeof eEEvaluationCreateEEEvaluation>>
>
export type EEEvaluationCreateEEEvaluationMutationBody = RequestEEEvaluationDto
export type EEEvaluationCreateEEEvaluationMutationError = ErrorType<unknown>

export const useEEEvaluationCreateEEEvaluation = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eEEvaluationCreateEEEvaluation>>,
    TError,
    { data: RequestEEEvaluationDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eEEvaluationCreateEEEvaluation>>,
    { data: RequestEEEvaluationDto }
  > = (props) => {
    const { data } = props ?? {}

    return eEEvaluationCreateEEEvaluation(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof eEEvaluationCreateEEEvaluation>>,
    TError,
    { data: RequestEEEvaluationDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌèâÍ∞Ä Í∏∞Ï§Ä, Îì±Í∏â, Ìï≠Î™© (ÏÉùÏÑ±|ÏàòÏ†ï|ÏÇ≠Ï†ú)
 */
export const eEEvaluationUpsertAndDeleteEEEvaluation = (
  id: number,
  requestUpdateEEEvaluationDto: RequestUpdateEEEvaluationDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseEEEvaluationRelationDto>(
    {
      url: `/api/ib/ee-evaluation/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateEEEvaluationDto,
    },
    options,
  )
}

export type EEEvaluationUpsertAndDeleteEEEvaluationMutationResult = NonNullable<
  Awaited<ReturnType<typeof eEEvaluationUpsertAndDeleteEEEvaluation>>
>
export type EEEvaluationUpsertAndDeleteEEEvaluationMutationBody = RequestUpdateEEEvaluationDto
export type EEEvaluationUpsertAndDeleteEEEvaluationMutationError = ErrorType<unknown>

export const useEEEvaluationUpsertAndDeleteEEEvaluation = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eEEvaluationUpsertAndDeleteEEEvaluation>>,
    TError,
    { id: number; data: RequestUpdateEEEvaluationDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eEEvaluationUpsertAndDeleteEEEvaluation>>,
    { id: number; data: RequestUpdateEEEvaluationDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return eEEvaluationUpsertAndDeleteEEEvaluation(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof eEEvaluationUpsertAndDeleteEEEvaluation>>,
    TError,
    { id: number; data: RequestUpdateEEEvaluationDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌèâÍ∞Ä Îã®Í±¥ Ï°∞Ìöå (ÏΩîÎîî)
 */
export const eEEvaluationGetEEEvaluation = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseEEEvaluationRelationDto>(
    { url: `/api/ib/ee-evaluation/${id}`, method: 'get', signal },
    options,
  )
}

export const getEEEvaluationGetEEEvaluationQueryKey = (id: number) => [`/api/ib/ee-evaluation/${id}`]

export type EEEvaluationGetEEEvaluationQueryResult = NonNullable<
  Awaited<ReturnType<typeof eEEvaluationGetEEEvaluation>>
>
export type EEEvaluationGetEEEvaluationQueryError = ErrorType<unknown>

export const useEEEvaluationGetEEEvaluation = <
  TData = Awaited<ReturnType<typeof eEEvaluationGetEEEvaluation>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof eEEvaluationGetEEEvaluation>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getEEEvaluationGetEEEvaluationQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof eEEvaluationGetEEEvaluation>>> = ({ signal }) =>
    eEEvaluationGetEEEvaluation(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof eEEvaluationGetEEEvaluation>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary EE ÌèâÍ∞Ä Î¶¨Ïä§Ìä∏ Ï°∞Ìöå (ÏΩîÎîî)
 */
export const eEEvaluationGetItems = (
  params: EEEvaluationGetItemsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationEEEvaluationDto>(
    { url: `/api/ib/ee-evaluation/items`, method: 'get', params, signal },
    options,
  )
}

export const getEEEvaluationGetItemsQueryKey = (params: EEEvaluationGetItemsParams) => [
  `/api/ib/ee-evaluation/items`,
  ...(params ? [params] : []),
]

export type EEEvaluationGetItemsQueryResult = NonNullable<Awaited<ReturnType<typeof eEEvaluationGetItems>>>
export type EEEvaluationGetItemsQueryError = ErrorType<unknown>

export const useEEEvaluationGetItems = <
  TData = Awaited<ReturnType<typeof eEEvaluationGetItems>>,
  TError = ErrorType<unknown>,
>(
  params: EEEvaluationGetItemsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof eEEvaluationGetItems>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getEEEvaluationGetItemsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof eEEvaluationGetItems>>> = ({ signal }) =>
    eEEvaluationGetItems(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof eEEvaluationGetItems>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉùÏùò EE ÌèâÍ∞Ä Ï°∞Ìöå (ÏÑ†ÏÉùÎãò)
 */
export const eEEvaluationGetEEEvaluationByStudent = (
  studentId: number,
  params: EEEvaluationGetEEEvaluationByStudentParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseEEEvaluationRelationByStudentDto>(
    { url: `/api/ib/ee-evaluation/student/${studentId}`, method: 'get', params, signal },
    options,
  )
}

export const getEEEvaluationGetEEEvaluationByStudentQueryKey = (
  studentId: number,
  params: EEEvaluationGetEEEvaluationByStudentParams,
) => [`/api/ib/ee-evaluation/student/${studentId}`, ...(params ? [params] : [])]

export type EEEvaluationGetEEEvaluationByStudentQueryResult = NonNullable<
  Awaited<ReturnType<typeof eEEvaluationGetEEEvaluationByStudent>>
>
export type EEEvaluationGetEEEvaluationByStudentQueryError = ErrorType<unknown>

export const useEEEvaluationGetEEEvaluationByStudent = <
  TData = Awaited<ReturnType<typeof eEEvaluationGetEEEvaluationByStudent>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  params: EEEvaluationGetEEEvaluationByStudentParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof eEEvaluationGetEEEvaluationByStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getEEEvaluationGetEEEvaluationByStudentQueryKey(studentId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof eEEvaluationGetEEEvaluationByStudent>>> = ({ signal }) =>
    eEEvaluationGetEEEvaluationByStudent(studentId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof eEEvaluationGetEEEvaluationByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù EE ÌèâÍ∞Ä
 */
export const eEEvaluationEvaluationCheckByStudent = (
  eeEvaluationId: number,
  studentId: number,
  requestEEEvaluationCheckItemsByStudentDto: RequestEEEvaluationCheckItemsByStudentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/ee-evaluation/${eeEvaluationId}/student/${studentId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestEEEvaluationCheckItemsByStudentDto,
    },
    options,
  )
}

export type EEEvaluationEvaluationCheckByStudentMutationResult = NonNullable<
  Awaited<ReturnType<typeof eEEvaluationEvaluationCheckByStudent>>
>
export type EEEvaluationEvaluationCheckByStudentMutationBody = RequestEEEvaluationCheckItemsByStudentDto
export type EEEvaluationEvaluationCheckByStudentMutationError = ErrorType<unknown>

export const useEEEvaluationEvaluationCheckByStudent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof eEEvaluationEvaluationCheckByStudent>>,
    TError,
    { eeEvaluationId: number; studentId: number; data: RequestEEEvaluationCheckItemsByStudentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof eEEvaluationEvaluationCheckByStudent>>,
    { eeEvaluationId: number; studentId: number; data: RequestEEEvaluationCheckItemsByStudentDto }
  > = (props) => {
    const { eeEvaluationId, studentId, data } = props ?? {}

    return eEEvaluationEvaluationCheckByStudent(eeEvaluationId, studentId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof eEEvaluationEvaluationCheckByStudent>>,
    TError,
    { eeEvaluationId: number; studentId: number; data: RequestEEEvaluationCheckItemsByStudentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∞∏Í≥†ÏûêÎ£å Î™©Î°ù Ï°∞Ìöå
 */
export const referenceInfoGetReferenceInfoList = (
  params: ReferenceInfoGetReferenceInfoListParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationReferenceInfoDto>(
    { url: `/api/reference-info`, method: 'get', params, signal },
    options,
  )
}

export const getReferenceInfoGetReferenceInfoListQueryKey = (params: ReferenceInfoGetReferenceInfoListParams) => [
  `/api/reference-info`,
  ...(params ? [params] : []),
]

export type ReferenceInfoGetReferenceInfoListQueryResult = NonNullable<
  Awaited<ReturnType<typeof referenceInfoGetReferenceInfoList>>
>
export type ReferenceInfoGetReferenceInfoListQueryError = ErrorType<unknown>

export const useReferenceInfoGetReferenceInfoList = <
  TData = Awaited<ReturnType<typeof referenceInfoGetReferenceInfoList>>,
  TError = ErrorType<unknown>,
>(
  params: ReferenceInfoGetReferenceInfoListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof referenceInfoGetReferenceInfoList>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getReferenceInfoGetReferenceInfoListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof referenceInfoGetReferenceInfoList>>> = ({ signal }) =>
    referenceInfoGetReferenceInfoList(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof referenceInfoGetReferenceInfoList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∞∏Í≥†ÏûêÎ£å ÏÉùÏÑ±
 */
export const referenceInfoCreateReferenceInfo = (
  requestCreateReferenceInfoDto: RequestCreateReferenceInfoDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseReferenceInfoDto>(
    {
      url: `/api/reference-info`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateReferenceInfoDto,
    },
    options,
  )
}

export type ReferenceInfoCreateReferenceInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof referenceInfoCreateReferenceInfo>>
>
export type ReferenceInfoCreateReferenceInfoMutationBody = RequestCreateReferenceInfoDto
export type ReferenceInfoCreateReferenceInfoMutationError = ErrorType<unknown>

export const useReferenceInfoCreateReferenceInfo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof referenceInfoCreateReferenceInfo>>,
    TError,
    { data: RequestCreateReferenceInfoDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof referenceInfoCreateReferenceInfo>>,
    { data: RequestCreateReferenceInfoDto }
  > = (props) => {
    const { data } = props ?? {}

    return referenceInfoCreateReferenceInfo(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof referenceInfoCreateReferenceInfo>>,
    TError,
    { data: RequestCreateReferenceInfoDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∞∏Í≥†ÏûêÎ£å Îã®Ïùº Ï°∞Ìöå
 */
export const referenceInfoGetReferenceInfoById = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseReferenceInfoDto>({ url: `/api/reference-info/${id}`, method: 'get', signal }, options)
}

export const getReferenceInfoGetReferenceInfoByIdQueryKey = (id: number) => [`/api/reference-info/${id}`]

export type ReferenceInfoGetReferenceInfoByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof referenceInfoGetReferenceInfoById>>
>
export type ReferenceInfoGetReferenceInfoByIdQueryError = ErrorType<unknown>

export const useReferenceInfoGetReferenceInfoById = <
  TData = Awaited<ReturnType<typeof referenceInfoGetReferenceInfoById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof referenceInfoGetReferenceInfoById>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getReferenceInfoGetReferenceInfoByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof referenceInfoGetReferenceInfoById>>> = ({ signal }) =>
    referenceInfoGetReferenceInfoById(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof referenceInfoGetReferenceInfoById>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï∞∏Í≥†ÏûêÎ£å ÏàòÏ†ï
 */
export const referenceInfoUpdateReferenceInfo = (
  id: number,
  requestReferenceInfoDto: RequestReferenceInfoDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseReferenceInfoDto>(
    {
      url: `/api/reference-info/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestReferenceInfoDto,
    },
    options,
  )
}

export type ReferenceInfoUpdateReferenceInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof referenceInfoUpdateReferenceInfo>>
>
export type ReferenceInfoUpdateReferenceInfoMutationBody = RequestReferenceInfoDto
export type ReferenceInfoUpdateReferenceInfoMutationError = ErrorType<unknown>

export const useReferenceInfoUpdateReferenceInfo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof referenceInfoUpdateReferenceInfo>>,
    TError,
    { id: number; data: RequestReferenceInfoDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof referenceInfoUpdateReferenceInfo>>,
    { id: number; data: RequestReferenceInfoDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return referenceInfoUpdateReferenceInfo(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof referenceInfoUpdateReferenceInfo>>,
    TError,
    { id: number; data: RequestReferenceInfoDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï∞∏Í≥†ÏûêÎ£å ÏÇ≠Ï†ú
 */
export const referenceInfoDeleteReferenceInfo = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/reference-info/${id}`, method: 'delete' }, options)
}

export type ReferenceInfoDeleteReferenceInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof referenceInfoDeleteReferenceInfo>>
>

export type ReferenceInfoDeleteReferenceInfoMutationError = ErrorType<unknown>

export const useReferenceInfoDeleteReferenceInfo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof referenceInfoDeleteReferenceInfo>>,
    TError,
    { id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof referenceInfoDeleteReferenceInfo>>, { id: number }> = (
    props,
  ) => {
    const { id } = props ?? {}

    return referenceInfoDeleteReferenceInfo(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof referenceInfoDeleteReferenceInfo>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary FAQ Î™©Î°ù Ï°∞Ìöå
 */
export const fAQGetFAQList = (
  params: FAQGetFAQListParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationFAQDto>({ url: `/api/faq`, method: 'get', params, signal }, options)
}

export const getFAQGetFAQListQueryKey = (params: FAQGetFAQListParams) => [`/api/faq`, ...(params ? [params] : [])]

export type FAQGetFAQListQueryResult = NonNullable<Awaited<ReturnType<typeof fAQGetFAQList>>>
export type FAQGetFAQListQueryError = ErrorType<unknown>

export const useFAQGetFAQList = <TData = Awaited<ReturnType<typeof fAQGetFAQList>>, TError = ErrorType<unknown>>(
  params: FAQGetFAQListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fAQGetFAQList>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFAQGetFAQListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fAQGetFAQList>>> = ({ signal }) =>
    fAQGetFAQList(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fAQGetFAQList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary FAQ ÏÉùÏÑ±
 */
export const fAQCreateFAQ = (requestCreateFAQDto: RequestCreateFAQDto, options?: SecondParameter<typeof mutator>) => {
  return mutator<ResponseFAQDto>(
    { url: `/api/faq`, method: 'post', headers: { 'Content-Type': 'application/json' }, data: requestCreateFAQDto },
    options,
  )
}

export type FAQCreateFAQMutationResult = NonNullable<Awaited<ReturnType<typeof fAQCreateFAQ>>>
export type FAQCreateFAQMutationBody = RequestCreateFAQDto
export type FAQCreateFAQMutationError = ErrorType<unknown>

export const useFAQCreateFAQ = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fAQCreateFAQ>>,
    TError,
    { data: RequestCreateFAQDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof fAQCreateFAQ>>, { data: RequestCreateFAQDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return fAQCreateFAQ(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof fAQCreateFAQ>>, TError, { data: RequestCreateFAQDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary FAQ Îã®Ïùº Ï°∞Ìöå
 */
export const fAQGetFAQById = (id: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseFAQDto>({ url: `/api/faq/${id}`, method: 'get', signal }, options)
}

export const getFAQGetFAQByIdQueryKey = (id: number) => [`/api/faq/${id}`]

export type FAQGetFAQByIdQueryResult = NonNullable<Awaited<ReturnType<typeof fAQGetFAQById>>>
export type FAQGetFAQByIdQueryError = ErrorType<unknown>

export const useFAQGetFAQById = <TData = Awaited<ReturnType<typeof fAQGetFAQById>>, TError = ErrorType<unknown>>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof fAQGetFAQById>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFAQGetFAQByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof fAQGetFAQById>>> = ({ signal }) =>
    fAQGetFAQById(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof fAQGetFAQById>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary FAQ ÏàòÏ†ï
 */
export const fAQUpdateFAQ = (id: number, requestFAQDto: RequestFAQDto, options?: SecondParameter<typeof mutator>) => {
  return mutator<ResponseFAQDto>(
    { url: `/api/faq/${id}`, method: 'patch', headers: { 'Content-Type': 'application/json' }, data: requestFAQDto },
    options,
  )
}

export type FAQUpdateFAQMutationResult = NonNullable<Awaited<ReturnType<typeof fAQUpdateFAQ>>>
export type FAQUpdateFAQMutationBody = RequestFAQDto
export type FAQUpdateFAQMutationError = ErrorType<unknown>

export const useFAQUpdateFAQ = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof fAQUpdateFAQ>>,
    TError,
    { id: number; data: RequestFAQDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof fAQUpdateFAQ>>, { id: number; data: RequestFAQDto }> = (
    props,
  ) => {
    const { id, data } = props ?? {}

    return fAQUpdateFAQ(id, data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof fAQUpdateFAQ>>, TError, { id: number; data: RequestFAQDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary FAQ ÏÇ≠Ï†ú
 */
export const fAQDeleteFAQ = (id: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<void>({ url: `/api/faq/${id}`, method: 'delete' }, options)
}

export type FAQDeleteFAQMutationResult = NonNullable<Awaited<ReturnType<typeof fAQDeleteFAQ>>>

export type FAQDeleteFAQMutationError = ErrorType<unknown>

export const useFAQDeleteFAQ = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof fAQDeleteFAQ>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof fAQDeleteFAQ>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return fAQDeleteFAQ(id, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof fAQDeleteFAQ>>, TError, { id: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary TKPPF Ï°∞Ìöå
 */
export const tKPPFFindTKPPF = (ibId: number, options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseTKPPFDto>({ url: `/api/ib/${ibId}/tkppf`, method: 'get', signal }, options)
}

export const getTKPPFFindTKPPFQueryKey = (ibId: number) => [`/api/ib/${ibId}/tkppf`]

export type TKPPFFindTKPPFQueryResult = NonNullable<Awaited<ReturnType<typeof tKPPFFindTKPPF>>>
export type TKPPFFindTKPPFQueryError = ErrorType<unknown>

export const useTKPPFFindTKPPF = <TData = Awaited<ReturnType<typeof tKPPFFindTKPPF>>, TError = ErrorType<unknown>>(
  ibId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof tKPPFFindTKPPF>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTKPPFFindTKPPFQueryKey(ibId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tKPPFFindTKPPF>>> = ({ signal }) =>
    tKPPFFindTKPPF(ibId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof tKPPFFindTKPPF>>, TError, TData>(queryKey, queryFn, {
    enabled: !!ibId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary TKPPF Ï∞®Ïàò ÏÉùÏÑ±/ÏàòÏ†ï (ÌïôÏÉù/ÏÑ†ÏÉùÎãò)
 */
export const tKPPFCreateOrUpdate = (
  ibId: number,
  requestCreateTKPPFDto: RequestCreateTKPPFDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseTKPPFDto>(
    {
      url: `/api/ib/${ibId}/tkppf`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateTKPPFDto,
    },
    options,
  )
}

export type TKPPFCreateOrUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof tKPPFCreateOrUpdate>>>
export type TKPPFCreateOrUpdateMutationBody = RequestCreateTKPPFDto
export type TKPPFCreateOrUpdateMutationError = ErrorType<unknown>

export const useTKPPFCreateOrUpdate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tKPPFCreateOrUpdate>>,
    TError,
    { ibId: number; data: RequestCreateTKPPFDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tKPPFCreateOrUpdate>>,
    { ibId: number; data: RequestCreateTKPPFDto }
  > = (props) => {
    const { ibId, data } = props ?? {}

    return tKPPFCreateOrUpdate(ibId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof tKPPFCreateOrUpdate>>,
    TError,
    { ibId: number; data: RequestCreateTKPPFDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary IBÏ†úÏ∂úÏ†ïÎ≥¥ Í∏∞ÏûÖ (ÏÑ†ÏÉùÎãò)
 */
export const tKPPFUpdateTKPPFInfo = (
  ibId: number,
  requestTKPPFInfoUpdateDto: RequestTKPPFInfoUpdateDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseTKPPFDto>(
    {
      url: `/api/ib/${ibId}/tkppf`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestTKPPFInfoUpdateDto,
    },
    options,
  )
}

export type TKPPFUpdateTKPPFInfoMutationResult = NonNullable<Awaited<ReturnType<typeof tKPPFUpdateTKPPFInfo>>>
export type TKPPFUpdateTKPPFInfoMutationBody = RequestTKPPFInfoUpdateDto
export type TKPPFUpdateTKPPFInfoMutationError = ErrorType<unknown>

export const useTKPPFUpdateTKPPFInfo = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tKPPFUpdateTKPPFInfo>>,
    TError,
    { ibId: number; data: RequestTKPPFInfoUpdateDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tKPPFUpdateTKPPFInfo>>,
    { ibId: number; data: RequestTKPPFInfoUpdateDto }
  > = (props) => {
    const { ibId, data } = props ?? {}

    return tKPPFUpdateTKPPFInfo(ibId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof tKPPFUpdateTKPPFInfo>>,
    TError,
    { ibId: number; data: RequestTKPPFInfoUpdateDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary TKPPF ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉùÏàò Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const tKPPFGetSubmissionStatusCount = (
  params?: TKPPFGetSubmissionStatusCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseTKPPFStatusCountDto>(
    { url: `/api/ib/tkppf/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getTKPPFGetSubmissionStatusCountQueryKey = (params?: TKPPFGetSubmissionStatusCountParams) => [
  `/api/ib/tkppf/submission-status-count`,
  ...(params ? [params] : []),
]

export type TKPPFGetSubmissionStatusCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof tKPPFGetSubmissionStatusCount>>
>
export type TKPPFGetSubmissionStatusCountQueryError = ErrorType<unknown>

export const useTKPPFGetSubmissionStatusCount = <
  TData = Awaited<ReturnType<typeof tKPPFGetSubmissionStatusCount>>,
  TError = ErrorType<unknown>,
>(
  params?: TKPPFGetSubmissionStatusCountParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof tKPPFGetSubmissionStatusCount>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTKPPFGetSubmissionStatusCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tKPPFGetSubmissionStatusCount>>> = ({ signal }) =>
    tKPPFGetSubmissionStatusCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof tKPPFGetSubmissionStatusCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary TKPPF ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉù ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const tKPPFGetSubmissionStatus = (
  params: TKPPFGetSubmissionStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBTKPPFSubmissionStatusDto>(
    { url: `/api/ib/tkppf/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getTKPPFGetSubmissionStatusQueryKey = (params: TKPPFGetSubmissionStatusParams) => [
  `/api/ib/tkppf/submission-status`,
  ...(params ? [params] : []),
]

export type TKPPFGetSubmissionStatusQueryResult = NonNullable<Awaited<ReturnType<typeof tKPPFGetSubmissionStatus>>>
export type TKPPFGetSubmissionStatusQueryError = ErrorType<unknown>

export const useTKPPFGetSubmissionStatus = <
  TData = Awaited<ReturnType<typeof tKPPFGetSubmissionStatus>>,
  TError = ErrorType<unknown>,
>(
  params: TKPPFGetSubmissionStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof tKPPFGetSubmissionStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTKPPFGetSubmissionStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tKPPFGetSubmissionStatus>>> = ({ signal }) =>
    tKPPFGetSubmissionStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof tKPPFGetSubmissionStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary TKPPF ÎØ∏Ï†úÏ∂úÏûê ÏïåÎ¶ºÎ≥¥ÎÇ¥Í∏∞
 */
export const tKPPFTkppfUnsubmitNotification = (
  params?: TKPPFTkppfUnsubmitNotificationParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>({ url: `/api/ib/tkppf/unsubmit/notification`, method: 'post', params }, options)
}

export type TKPPFTkppfUnsubmitNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof tKPPFTkppfUnsubmitNotification>>
>

export type TKPPFTkppfUnsubmitNotificationMutationError = ErrorType<unknown>

export const useTKPPFTkppfUnsubmitNotification = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tKPPFTkppfUnsubmitNotification>>,
    TError,
    { params?: TKPPFTkppfUnsubmitNotificationParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tKPPFTkppfUnsubmitNotification>>,
    { params?: TKPPFTkppfUnsubmitNotificationParams }
  > = (props) => {
    const { params } = props ?? {}

    return tKPPFTkppfUnsubmitNotification(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof tKPPFTkppfUnsubmitNotification>>,
    TError,
    { params?: TKPPFTkppfUnsubmitNotificationParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary TKPPF ÏôÑÎ£åÏäπÏù∏ÏöîÏ≤≠ (ÌïôÏÉù)
 */
export const tKPPFUpdateRPPFStatusWaitComplete = (ibId: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<ResponseTKPPFDto>({ url: `/api/ib/${ibId}/tkppf/status/wait-complete`, method: 'patch' }, options)
}

export type TKPPFUpdateRPPFStatusWaitCompleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof tKPPFUpdateRPPFStatusWaitComplete>>
>

export type TKPPFUpdateRPPFStatusWaitCompleteMutationError = ErrorType<unknown>

export const useTKPPFUpdateRPPFStatusWaitComplete = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tKPPFUpdateRPPFStatusWaitComplete>>,
    TError,
    { ibId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tKPPFUpdateRPPFStatusWaitComplete>>,
    { ibId: number }
  > = (props) => {
    const { ibId } = props ?? {}

    return tKPPFUpdateRPPFStatusWaitComplete(ibId, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof tKPPFUpdateRPPFStatusWaitComplete>>, TError, { ibId: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary TKPPF Î∞òÎ†§Î≥¥ÏôÑÏöîÏ≤≠ (ÏÑ†ÏÉùÎãò)
 */
export const tKPPFUpdateRPPFStatusReject = (
  ibId: number,
  requestIBCommentDto: RequestIBCommentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/${ibId}/tkppf/status/reject`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBCommentDto,
    },
    options,
  )
}

export type TKPPFUpdateRPPFStatusRejectMutationResult = NonNullable<
  Awaited<ReturnType<typeof tKPPFUpdateRPPFStatusReject>>
>
export type TKPPFUpdateRPPFStatusRejectMutationBody = RequestIBCommentDto
export type TKPPFUpdateRPPFStatusRejectMutationError = ErrorType<unknown>

export const useTKPPFUpdateRPPFStatusReject = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tKPPFUpdateRPPFStatusReject>>,
    TError,
    { ibId: number; data: RequestIBCommentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tKPPFUpdateRPPFStatusReject>>,
    { ibId: number; data: RequestIBCommentDto }
  > = (props) => {
    const { ibId, data } = props ?? {}

    return tKPPFUpdateRPPFStatusReject(ibId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof tKPPFUpdateRPPFStatusReject>>,
    TError,
    { ibId: number; data: RequestIBCommentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï†ÑÏãúÌöå Ï°∞Ìöå
 */
export const exhibitionGetExhibition = (
  ibId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseExhibitionDto>({ url: `/api/ib/${ibId}/exhibition`, method: 'get', signal }, options)
}

export const getExhibitionGetExhibitionQueryKey = (ibId: number) => [`/api/ib/${ibId}/exhibition`]

export type ExhibitionGetExhibitionQueryResult = NonNullable<Awaited<ReturnType<typeof exhibitionGetExhibition>>>
export type ExhibitionGetExhibitionQueryError = ErrorType<unknown>

export const useExhibitionGetExhibition = <
  TData = Awaited<ReturnType<typeof exhibitionGetExhibition>>,
  TError = ErrorType<unknown>,
>(
  ibId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof exhibitionGetExhibition>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getExhibitionGetExhibitionQueryKey(ibId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof exhibitionGetExhibition>>> = ({ signal }) =>
    exhibitionGetExhibition(ibId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof exhibitionGetExhibition>>, TError, TData>(queryKey, queryFn, {
    enabled: !!ibId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï†ÑÏãúÌöå ÏÉùÏÑ±
 */
export const exhibitionCreateExhibition = (
  ibId: number,
  requestExhibitionDto: RequestExhibitionDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseExhibitionDto>(
    {
      url: `/api/ib/${ibId}/exhibition`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestExhibitionDto,
    },
    options,
  )
}

export type ExhibitionCreateExhibitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof exhibitionCreateExhibition>>
>
export type ExhibitionCreateExhibitionMutationBody = RequestExhibitionDto
export type ExhibitionCreateExhibitionMutationError = ErrorType<unknown>

export const useExhibitionCreateExhibition = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof exhibitionCreateExhibition>>,
    TError,
    { ibId: number; data: RequestExhibitionDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof exhibitionCreateExhibition>>,
    { ibId: number; data: RequestExhibitionDto }
  > = (props) => {
    const { ibId, data } = props ?? {}

    return exhibitionCreateExhibition(ibId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof exhibitionCreateExhibition>>,
    TError,
    { ibId: number; data: RequestExhibitionDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï†ÑÏãúÌöå ÏàòÏ†ï
 */
export const exhibitionUpdateExhibition = (
  ibId: number,
  id: number,
  requestExhibitionDto: RequestExhibitionDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseExhibitionDto>(
    {
      url: `/api/ib/${ibId}/exhibition/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestExhibitionDto,
    },
    options,
  )
}

export type ExhibitionUpdateExhibitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof exhibitionUpdateExhibition>>
>
export type ExhibitionUpdateExhibitionMutationBody = RequestExhibitionDto
export type ExhibitionUpdateExhibitionMutationError = ErrorType<unknown>

export const useExhibitionUpdateExhibition = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof exhibitionUpdateExhibition>>,
    TError,
    { ibId: number; id: number; data: RequestExhibitionDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof exhibitionUpdateExhibition>>,
    { ibId: number; id: number; data: RequestExhibitionDto }
  > = (props) => {
    const { ibId, id, data } = props ?? {}

    return exhibitionUpdateExhibition(ibId, id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof exhibitionUpdateExhibition>>,
    TError,
    { ibId: number; id: number; data: RequestExhibitionDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï†ÑÏãúÌöå ÏôÑÎ£åÏäπÏù∏ÏöîÏ≤≠ (ÌïôÏÉù)
 */
export const exhibitionUpdateExhibitionStatusWaitComplete = (
  ibId: number,
  id: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>({ url: `/api/ib/${ibId}/exhibition/${id}/status/wait-complete`, method: 'patch' }, options)
}

export type ExhibitionUpdateExhibitionStatusWaitCompleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof exhibitionUpdateExhibitionStatusWaitComplete>>
>

export type ExhibitionUpdateExhibitionStatusWaitCompleteMutationError = ErrorType<unknown>

export const useExhibitionUpdateExhibitionStatusWaitComplete = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof exhibitionUpdateExhibitionStatusWaitComplete>>,
    TError,
    { ibId: number; id: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof exhibitionUpdateExhibitionStatusWaitComplete>>,
    { ibId: number; id: number }
  > = (props) => {
    const { ibId, id } = props ?? {}

    return exhibitionUpdateExhibitionStatusWaitComplete(ibId, id, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof exhibitionUpdateExhibitionStatusWaitComplete>>,
    TError,
    { ibId: number; id: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï†ÑÏãúÌöå Î∞òÎ†§Î≥¥ÏôÑÏöîÏ≤≠ (ÏÑ†ÏÉùÎãò)
 */
export const exhibitionUpdateExhibitionStatusReject = (
  ibId: number,
  id: number,
  requestIBCommentDto: RequestIBCommentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/${ibId}/exhibition/${id}/status/reject`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBCommentDto,
    },
    options,
  )
}

export type ExhibitionUpdateExhibitionStatusRejectMutationResult = NonNullable<
  Awaited<ReturnType<typeof exhibitionUpdateExhibitionStatusReject>>
>
export type ExhibitionUpdateExhibitionStatusRejectMutationBody = RequestIBCommentDto
export type ExhibitionUpdateExhibitionStatusRejectMutationError = ErrorType<unknown>

export const useExhibitionUpdateExhibitionStatusReject = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof exhibitionUpdateExhibitionStatusReject>>,
    TError,
    { ibId: number; id: number; data: RequestIBCommentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof exhibitionUpdateExhibitionStatusReject>>,
    { ibId: number; id: number; data: RequestIBCommentDto }
  > = (props) => {
    const { ibId, id, data } = props ?? {}

    return exhibitionUpdateExhibitionStatusReject(ibId, id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof exhibitionUpdateExhibitionStatusReject>>,
    TError,
    { ibId: number; id: number; data: RequestIBCommentDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ï†ÑÏãúÌöå ÌòÑÌô©Í¥ÄÎ¶¨ ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉùÏàò Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const exhibitionGetSubmissionStatusCount = (
  params?: ExhibitionGetSubmissionStatusCountParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseExhibitionSubmissionStatusCountDto>(
    { url: `/api/ib/exhibition/submission-status-count`, method: 'get', params, signal },
    options,
  )
}

export const getExhibitionGetSubmissionStatusCountQueryKey = (params?: ExhibitionGetSubmissionStatusCountParams) => [
  `/api/ib/exhibition/submission-status-count`,
  ...(params ? [params] : []),
]

export type ExhibitionGetSubmissionStatusCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof exhibitionGetSubmissionStatusCount>>
>
export type ExhibitionGetSubmissionStatusCountQueryError = ErrorType<unknown>

export const useExhibitionGetSubmissionStatusCount = <
  TData = Awaited<ReturnType<typeof exhibitionGetSubmissionStatusCount>>,
  TError = ErrorType<unknown>,
>(
  params?: ExhibitionGetSubmissionStatusCountParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof exhibitionGetSubmissionStatusCount>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getExhibitionGetSubmissionStatusCountQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof exhibitionGetSubmissionStatusCount>>> = ({ signal }) =>
    exhibitionGetSubmissionStatusCount(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof exhibitionGetSubmissionStatusCount>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ï†ÑÏãúÌöå ÏÉÅÌÉúÎ≥Ñ ÌïôÏÉù ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò / ÏΩîÎîîÎÑ§Ïù¥ÌÑ∞)
 */
export const exhibitionGetSubmissionStatus = (
  params: ExhibitionGetSubmissionStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginatedIBExhibitionSubmissionStatusDto>(
    { url: `/api/ib/exhibition/submission-status`, method: 'get', params, signal },
    options,
  )
}

export const getExhibitionGetSubmissionStatusQueryKey = (params: ExhibitionGetSubmissionStatusParams) => [
  `/api/ib/exhibition/submission-status`,
  ...(params ? [params] : []),
]

export type ExhibitionGetSubmissionStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof exhibitionGetSubmissionStatus>>
>
export type ExhibitionGetSubmissionStatusQueryError = ErrorType<unknown>

export const useExhibitionGetSubmissionStatus = <
  TData = Awaited<ReturnType<typeof exhibitionGetSubmissionStatus>>,
  TError = ErrorType<unknown>,
>(
  params: ExhibitionGetSubmissionStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof exhibitionGetSubmissionStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getExhibitionGetSubmissionStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof exhibitionGetSubmissionStatus>>> = ({ signal }) =>
    exhibitionGetSubmissionStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof exhibitionGetSubmissionStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary TOK Ï†ÑÏãúÌöå ÎØ∏Ï†úÏ∂úÏûê ÏïåÎ¶ºÎ≥¥ÎÇ¥Í∏∞
 */
export const exhibitionExhibitionUnsubmitNotification = (
  params?: ExhibitionExhibitionUnsubmitNotificationParams,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<unknown>({ url: `/api/ib/exhibition/unsubmit/notification`, method: 'post', params }, options)
}

export type ExhibitionExhibitionUnsubmitNotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof exhibitionExhibitionUnsubmitNotification>>
>

export type ExhibitionExhibitionUnsubmitNotificationMutationError = ErrorType<unknown>

export const useExhibitionExhibitionUnsubmitNotification = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof exhibitionExhibitionUnsubmitNotification>>,
    TError,
    { params?: ExhibitionExhibitionUnsubmitNotificationParams },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof exhibitionExhibitionUnsubmitNotification>>,
    { params?: ExhibitionExhibitionUnsubmitNotificationParams }
  > = (props) => {
    const { params } = props ?? {}

    return exhibitionExhibitionUnsubmitNotification(params, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof exhibitionExhibitionUnsubmitNotification>>,
    TError,
    { params?: ExhibitionExhibitionUnsubmitNotificationParams },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌèâÍ∞Ä Í∏∞Ï§Ä Î™©Î°ù Ï°∞Ìöå
 */
export const tokEvaluationGetCriteriaItems = (
  params?: TokEvaluationGetCriteriaItemsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationTokEvaluationCriteriaDto>(
    { url: `/api/ib/tok-evaluation/criteria`, method: 'get', params, signal },
    options,
  )
}

export const getTokEvaluationGetCriteriaItemsQueryKey = (params?: TokEvaluationGetCriteriaItemsParams) => [
  `/api/ib/tok-evaluation/criteria`,
  ...(params ? [params] : []),
]

export type TokEvaluationGetCriteriaItemsQueryResult = NonNullable<
  Awaited<ReturnType<typeof tokEvaluationGetCriteriaItems>>
>
export type TokEvaluationGetCriteriaItemsQueryError = ErrorType<unknown>

export const useTokEvaluationGetCriteriaItems = <
  TData = Awaited<ReturnType<typeof tokEvaluationGetCriteriaItems>>,
  TError = ErrorType<unknown>,
>(
  params?: TokEvaluationGetCriteriaItemsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof tokEvaluationGetCriteriaItems>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTokEvaluationGetCriteriaItemsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tokEvaluationGetCriteriaItems>>> = ({ signal }) =>
    tokEvaluationGetCriteriaItems(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof tokEvaluationGetCriteriaItems>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌèâÍ∞Ä Í∏∞Ï§Ä ÏÉùÏÑ± (ÏÑ†ÏÉùÎãò)
 */
export const tokEvaluationCreateCriteria = (
  requestCreateTokEvaluationDto: RequestCreateTokEvaluationDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseTokEvaluationCriteriaDto>(
    {
      url: `/api/ib/tok-evaluation/criteria`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateTokEvaluationDto,
    },
    options,
  )
}

export type TokEvaluationCreateCriteriaMutationResult = NonNullable<
  Awaited<ReturnType<typeof tokEvaluationCreateCriteria>>
>
export type TokEvaluationCreateCriteriaMutationBody = RequestCreateTokEvaluationDto
export type TokEvaluationCreateCriteriaMutationError = ErrorType<unknown>

export const useTokEvaluationCreateCriteria = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tokEvaluationCreateCriteria>>,
    TError,
    { data: RequestCreateTokEvaluationDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tokEvaluationCreateCriteria>>,
    { data: RequestCreateTokEvaluationDto }
  > = (props) => {
    const { data } = props ?? {}

    return tokEvaluationCreateCriteria(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof tokEvaluationCreateCriteria>>,
    TError,
    { data: RequestCreateTokEvaluationDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌèâÍ∞Ä Í∏∞Ï§Ä Îã®Í±¥ Ï°∞Ìöå
 */
export const tokEvaluationGetCriteriaById = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseTokEvaluationCriteriaDto>(
    { url: `/api/ib/tok-evaluation/criteria/${id}`, method: 'get', signal },
    options,
  )
}

export const getTokEvaluationGetCriteriaByIdQueryKey = (id: number) => [`/api/ib/tok-evaluation/criteria/${id}`]

export type TokEvaluationGetCriteriaByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof tokEvaluationGetCriteriaById>>
>
export type TokEvaluationGetCriteriaByIdQueryError = ErrorType<unknown>

export const useTokEvaluationGetCriteriaById = <
  TData = Awaited<ReturnType<typeof tokEvaluationGetCriteriaById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof tokEvaluationGetCriteriaById>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTokEvaluationGetCriteriaByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tokEvaluationGetCriteriaById>>> = ({ signal }) =>
    tokEvaluationGetCriteriaById(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof tokEvaluationGetCriteriaById>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌèâÍ∞Ä Í∏∞Ï§Ä ÏàòÏ†ï (ÏÑ†ÏÉùÎãò)
 */
export const tokEvaluationUpdateCriteria = (
  id: number,
  requestUpdateTokEvaluationDto: RequestUpdateTokEvaluationDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseTokEvaluationCriteriaDto>(
    {
      url: `/api/ib/tok-evaluation/criteria/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateTokEvaluationDto,
    },
    options,
  )
}

export type TokEvaluationUpdateCriteriaMutationResult = NonNullable<
  Awaited<ReturnType<typeof tokEvaluationUpdateCriteria>>
>
export type TokEvaluationUpdateCriteriaMutationBody = RequestUpdateTokEvaluationDto
export type TokEvaluationUpdateCriteriaMutationError = ErrorType<unknown>

export const useTokEvaluationUpdateCriteria = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tokEvaluationUpdateCriteria>>,
    TError,
    { id: number; data: RequestUpdateTokEvaluationDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tokEvaluationUpdateCriteria>>,
    { id: number; data: RequestUpdateTokEvaluationDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return tokEvaluationUpdateCriteria(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof tokEvaluationUpdateCriteria>>,
    TError,
    { id: number; data: RequestUpdateTokEvaluationDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary TOK Ï†úÏ∂úÎ¨º ÌèâÍ∞Ä (ÏÑ†ÏÉùÎãò)
 */
export const tokEvaluationCreateOrUpdate = (
  ibId: number,
  criteriaId: number,
  requestTokEvaluationDto: RequestTokEvaluationDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<boolean>(
    {
      url: `/api/ib/${ibId}/tok-evaluation/${criteriaId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestTokEvaluationDto,
    },
    options,
  )
}

export type TokEvaluationCreateOrUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof tokEvaluationCreateOrUpdate>>
>
export type TokEvaluationCreateOrUpdateMutationBody = RequestTokEvaluationDto
export type TokEvaluationCreateOrUpdateMutationError = ErrorType<unknown>

export const useTokEvaluationCreateOrUpdate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof tokEvaluationCreateOrUpdate>>,
    TError,
    { ibId: number; criteriaId: number; data: RequestTokEvaluationDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof tokEvaluationCreateOrUpdate>>,
    { ibId: number; criteriaId: number; data: RequestTokEvaluationDto }
  > = (props) => {
    const { ibId, criteriaId, data } = props ?? {}

    return tokEvaluationCreateOrUpdate(ibId, criteriaId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof tokEvaluationCreateOrUpdate>>,
    TError,
    { ibId: number; criteriaId: number; data: RequestTokEvaluationDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary TOK Ï†úÏ∂úÎ¨º ÌèâÍ∞ÄÎ•º ÏúÑÌïú Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå (ÌèâÍ∞ÄÏûê Î™©Î°ù, ÌèâÍ∞Ä Í∏∞Ï§Ä Î≤ÑÏ†Ñ)
 */
export const tokEvaluationGetEvaluationInitialData = (
  ibId: number,
  params: TokEvaluationGetEvaluationInitialDataParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseTokEvaluationInitialDataDto>(
    { url: `/api/ib/${ibId}/tok-evaluation/initial-data`, method: 'get', params, signal },
    options,
  )
}

export const getTokEvaluationGetEvaluationInitialDataQueryKey = (
  ibId: number,
  params: TokEvaluationGetEvaluationInitialDataParams,
) => [`/api/ib/${ibId}/tok-evaluation/initial-data`, ...(params ? [params] : [])]

export type TokEvaluationGetEvaluationInitialDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof tokEvaluationGetEvaluationInitialData>>
>
export type TokEvaluationGetEvaluationInitialDataQueryError = ErrorType<unknown>

export const useTokEvaluationGetEvaluationInitialData = <
  TData = Awaited<ReturnType<typeof tokEvaluationGetEvaluationInitialData>>,
  TError = ErrorType<unknown>,
>(
  ibId: number,
  params: TokEvaluationGetEvaluationInitialDataParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof tokEvaluationGetEvaluationInitialData>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTokEvaluationGetEvaluationInitialDataQueryKey(ibId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tokEvaluationGetEvaluationInitialData>>> = ({ signal }) =>
    tokEvaluationGetEvaluationInitialData(ibId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof tokEvaluationGetEvaluationInitialData>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!ibId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary IB ÌïôÍµêÏ†ïÎ≥¥ Îã®Í±¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò)
 */
export const iBSchoolManagementGetItem = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseIBSchoolManagementDto>(
    { url: `/api/ib/school-management/item`, method: 'get', signal },
    options,
  )
}

export const getIBSchoolManagementGetItemQueryKey = () => [`/api/ib/school-management/item`]

export type IBSchoolManagementGetItemQueryResult = NonNullable<Awaited<ReturnType<typeof iBSchoolManagementGetItem>>>
export type IBSchoolManagementGetItemQueryError = ErrorType<unknown>

export const useIBSchoolManagementGetItem = <
  TData = Awaited<ReturnType<typeof iBSchoolManagementGetItem>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof iBSchoolManagementGetItem>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBSchoolManagementGetItemQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBSchoolManagementGetItem>>> = ({ signal }) =>
    iBSchoolManagementGetItem(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBSchoolManagementGetItem>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary IB ÌïôÍµêÏ†ïÎ≥¥ ÏÉùÏÑ± (ÏÑ†ÏÉùÎãò)
 */
export const iBSchoolManagementCreateItem = (
  requestIBSchoolManagementDto: RequestIBSchoolManagementDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBSchoolManagementDto>(
    {
      url: `/api/ib/school-management`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBSchoolManagementDto,
    },
    options,
  )
}

export type IBSchoolManagementCreateItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBSchoolManagementCreateItem>>
>
export type IBSchoolManagementCreateItemMutationBody = RequestIBSchoolManagementDto
export type IBSchoolManagementCreateItemMutationError = ErrorType<unknown>

export const useIBSchoolManagementCreateItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBSchoolManagementCreateItem>>,
    TError,
    { data: RequestIBSchoolManagementDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBSchoolManagementCreateItem>>,
    { data: RequestIBSchoolManagementDto }
  > = (props) => {
    const { data } = props ?? {}

    return iBSchoolManagementCreateItem(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBSchoolManagementCreateItem>>,
    TError,
    { data: RequestIBSchoolManagementDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary IB ÌïôÍµêÏ†ïÎ≥¥ ÏàòÏ†ï (ÏÑ†ÏÉùÎãò)
 */
export const iBSchoolManagementUpdateItem = (
  requestIBSchoolManagementDto: RequestIBSchoolManagementDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBSchoolManagementDto>(
    {
      url: `/api/ib/school-management`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBSchoolManagementDto,
    },
    options,
  )
}

export type IBSchoolManagementUpdateItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBSchoolManagementUpdateItem>>
>
export type IBSchoolManagementUpdateItemMutationBody = RequestIBSchoolManagementDto
export type IBSchoolManagementUpdateItemMutationError = ErrorType<unknown>

export const useIBSchoolManagementUpdateItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBSchoolManagementUpdateItem>>,
    TError,
    { data: RequestIBSchoolManagementDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBSchoolManagementUpdateItem>>,
    { data: RequestIBSchoolManagementDto }
  > = (props) => {
    const { data } = props ?? {}

    return iBSchoolManagementUpdateItem(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBSchoolManagementUpdateItem>>,
    TError,
    { data: RequestIBSchoolManagementDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ïπ¥ÌîºÌÇ¨Îü¨ Í≤ÄÏÇ¨ ÎåÄÏÉÅ Í≥ºÏ†úÎ¨º ÏóÖÎ°úÎìú
 */
export const plagiarismCopykillerUpload = (
  requestCopykillerUploadDto: RequestCopykillerUploadDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseCopykillerResponseDto>(
    {
      url: `/api/plagiarism/copykiller/upload`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCopykillerUploadDto,
    },
    options,
  )
}

export type PlagiarismCopykillerUploadMutationResult = NonNullable<
  Awaited<ReturnType<typeof plagiarismCopykillerUpload>>
>
export type PlagiarismCopykillerUploadMutationBody = RequestCopykillerUploadDto
export type PlagiarismCopykillerUploadMutationError = ErrorType<unknown>

export const usePlagiarismCopykillerUpload = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof plagiarismCopykillerUpload>>,
    TError,
    { data: RequestCopykillerUploadDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof plagiarismCopykillerUpload>>,
    { data: RequestCopykillerUploadDto }
  > = (props) => {
    const { data } = props ?? {}

    return plagiarismCopykillerUpload(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof plagiarismCopykillerUpload>>,
    TError,
    { data: RequestCopykillerUploadDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ïπ¥ÌîºÌÇ¨Îü¨ Í≤ÄÏÇ¨ Î¨∏ÏÑú Î¶¨Ïä§Ìä∏ Ï°∞Ìöå
 */
export const plagiarismGetCopykillerList = (
  params?: PlagiarismGetCopykillerListParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationCopykillerDto>(
    { url: `/api/plagiarism/copykiller/list`, method: 'get', params, signal },
    options,
  )
}

export const getPlagiarismGetCopykillerListQueryKey = (params?: PlagiarismGetCopykillerListParams) => [
  `/api/plagiarism/copykiller/list`,
  ...(params ? [params] : []),
]

export type PlagiarismGetCopykillerListQueryResult = NonNullable<
  Awaited<ReturnType<typeof plagiarismGetCopykillerList>>
>
export type PlagiarismGetCopykillerListQueryError = ErrorType<unknown>

export const usePlagiarismGetCopykillerList = <
  TData = Awaited<ReturnType<typeof plagiarismGetCopykillerList>>,
  TError = ErrorType<unknown>,
>(
  params?: PlagiarismGetCopykillerListParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof plagiarismGetCopykillerList>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPlagiarismGetCopykillerListQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof plagiarismGetCopykillerList>>> = ({ signal }) =>
    plagiarismGetCopykillerList(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof plagiarismGetCopykillerList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïπ¥ÌîºÌÇ¨Îü¨ ÏßÅÏ†ë ÌëúÏ†àÎ•† Í≤ÄÏÇ¨ Ï°∞Ìöå (ÌååÏùºÏóÖÎ°úÎìú/ÏßÅÏ†ëÏûÖÎ†•)
 */
export const plagiarismGetCopykillerStatusById = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseCopykillerWithContentDto>(
    { url: `/api/plagiarism/copykiller/${id}/status`, method: 'get', signal },
    options,
  )
}

export const getPlagiarismGetCopykillerStatusByIdQueryKey = (id: number) => [`/api/plagiarism/copykiller/${id}/status`]

export type PlagiarismGetCopykillerStatusByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof plagiarismGetCopykillerStatusById>>
>
export type PlagiarismGetCopykillerStatusByIdQueryError = ErrorType<unknown>

export const usePlagiarismGetCopykillerStatusById = <
  TData = Awaited<ReturnType<typeof plagiarismGetCopykillerStatusById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof plagiarismGetCopykillerStatusById>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPlagiarismGetCopykillerStatusByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof plagiarismGetCopykillerStatusById>>> = ({ signal }) =>
    plagiarismGetCopykillerStatusById(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof plagiarismGetCopykillerStatusById>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïπ¥ÌîºÌÇ¨Îü¨ Ï†ÄÏû•Îêú ÌäπÏ†ï Î¨∏ÏÑúÏóê ÎåÄÌïú ÌëúÏ†àÎ•† Ï°∞Ìöå (ESSAY)
 */
export const plagiarismGetCopykillerStatus = (
  params?: PlagiarismGetCopykillerStatusParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseCopykillerResponseDto>(
    { url: `/api/plagiarism/copykiller/status`, method: 'get', params, signal },
    options,
  )
}

export const getPlagiarismGetCopykillerStatusQueryKey = (params?: PlagiarismGetCopykillerStatusParams) => [
  `/api/plagiarism/copykiller/status`,
  ...(params ? [params] : []),
]

export type PlagiarismGetCopykillerStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof plagiarismGetCopykillerStatus>>
>
export type PlagiarismGetCopykillerStatusQueryError = ErrorType<unknown>

export const usePlagiarismGetCopykillerStatus = <
  TData = Awaited<ReturnType<typeof plagiarismGetCopykillerStatus>>,
  TError = ErrorType<unknown>,
>(
  params?: PlagiarismGetCopykillerStatusParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof plagiarismGetCopykillerStatus>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPlagiarismGetCopykillerStatusQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof plagiarismGetCopykillerStatus>>> = ({ signal }) =>
    plagiarismGetCopykillerStatus(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof plagiarismGetCopykillerStatus>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïπ¥ÌîºÌÇ¨Îü¨ ÌëúÏ†à Í≤ÄÏÇ¨ ÏÉÅÏÑ∏ Í≤∞Í≥º ÌéòÏù¥ÏßÄ Ï°∞Ìöå(HTML ÌòïÏãù)
 */
export const plagiarismGetCopyRatioDetailById = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<string>({ url: `/api/plagiarism/copykiller/${id}/detail`, method: 'get', signal }, options)
}

export const getPlagiarismGetCopyRatioDetailByIdQueryKey = (id: number) => [`/api/plagiarism/copykiller/${id}/detail`]

export type PlagiarismGetCopyRatioDetailByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof plagiarismGetCopyRatioDetailById>>
>
export type PlagiarismGetCopyRatioDetailByIdQueryError = ErrorType<unknown>

export const usePlagiarismGetCopyRatioDetailById = <
  TData = Awaited<ReturnType<typeof plagiarismGetCopyRatioDetailById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof plagiarismGetCopyRatioDetailById>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPlagiarismGetCopyRatioDetailByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof plagiarismGetCopyRatioDetailById>>> = ({ signal }) =>
    plagiarismGetCopyRatioDetailById(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof plagiarismGetCopyRatioDetailById>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * ÌëúÏ†à Í≤ÄÏÇ¨ ÏÉÅÏÑ∏ Í≤∞Í≥º ÌéòÏù¥ÏßÄ Ï°∞Ìöå Ïù¥ÌõÑ copykiller_core.js ÌååÏùºÏóêÏÑú ÏûêÎèôÏúºÎ°ú Ìò∏Ï∂úÌï©ÎãàÎã§. ÏßÅÏ†ë Ìò∏Ï∂úÌï† ÌïÑÏöî ÏóÜÏùå.
 * @summary Ïπ¥ÌîºÌÇ¨Îü¨ ÌëúÏ†à Í≤ÄÏÇ¨ ÏÉÅÏÑ∏ Í≤∞Í≥º ÎπÑÍµê Î¨∏Ïû• Ï°∞Ìöå(HTML ÌòïÏãù)
 */
export const plagiarismGetCopykillerSimilarSentence = (
  hash: string,
  requestCopykillerSimilarSentenceDto: RequestCopykillerSimilarSentenceDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<string>(
    {
      url: `/api/plagiarism/copykiller/similar-sentence/${hash}`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCopykillerSimilarSentenceDto,
    },
    options,
  )
}

export type PlagiarismGetCopykillerSimilarSentenceMutationResult = NonNullable<
  Awaited<ReturnType<typeof plagiarismGetCopykillerSimilarSentence>>
>
export type PlagiarismGetCopykillerSimilarSentenceMutationBody = RequestCopykillerSimilarSentenceDto
export type PlagiarismGetCopykillerSimilarSentenceMutationError = ErrorType<unknown>

export const usePlagiarismGetCopykillerSimilarSentence = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof plagiarismGetCopykillerSimilarSentence>>,
    TError,
    { hash: string; data: RequestCopykillerSimilarSentenceDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof plagiarismGetCopykillerSimilarSentence>>,
    { hash: string; data: RequestCopykillerSimilarSentenceDto }
  > = (props) => {
    const { hash, data } = props ?? {}

    return plagiarismGetCopykillerSimilarSentence(hash, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof plagiarismGetCopykillerSimilarSentence>>,
    TError,
    { hash: string; data: RequestCopykillerSimilarSentenceDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ïπ¥ÌîºÌÇ¨Îü¨ ÌëúÏ†à Í≤ÄÏÇ¨ Í≤∞Í≥º PDF Îã§Ïö¥Î°úÎìú
 */
export const plagiarismDownloadCopyRatioResult = (
  hash: string,
  params: PlagiarismDownloadCopyRatioResultParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<Buffer>({ url: `/api/plagiarism/copykiller/download/${hash}`, method: 'get', params, signal }, options)
}

export const getPlagiarismDownloadCopyRatioResultQueryKey = (
  hash: string,
  params: PlagiarismDownloadCopyRatioResultParams,
) => [`/api/plagiarism/copykiller/download/${hash}`, ...(params ? [params] : [])]

export type PlagiarismDownloadCopyRatioResultQueryResult = NonNullable<
  Awaited<ReturnType<typeof plagiarismDownloadCopyRatioResult>>
>
export type PlagiarismDownloadCopyRatioResultQueryError = ErrorType<unknown>

export const usePlagiarismDownloadCopyRatioResult = <
  TData = Awaited<ReturnType<typeof plagiarismDownloadCopyRatioResult>>,
  TError = ErrorType<unknown>,
>(
  hash: string,
  params: PlagiarismDownloadCopyRatioResultParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof plagiarismDownloadCopyRatioResult>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getPlagiarismDownloadCopyRatioResultQueryKey(hash, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof plagiarismDownloadCopyRatioResult>>> = ({ signal }) =>
    plagiarismDownloadCopyRatioResult(hash, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof plagiarismDownloadCopyRatioResult>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!hash, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍµê ÏÜçÏÑ± Ï†ÑÏ≤¥ Ï°∞Ìöå
 */
export const schoolPropertyGetProperties = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseSchoolPropertyDto[]>({ url: `/api/school-property/list`, method: 'get', signal }, options)
}

export const getSchoolPropertyGetPropertiesQueryKey = () => [`/api/school-property/list`]

export type SchoolPropertyGetPropertiesQueryResult = NonNullable<
  Awaited<ReturnType<typeof schoolPropertyGetProperties>>
>
export type SchoolPropertyGetPropertiesQueryError = ErrorType<unknown>

export const useSchoolPropertyGetProperties = <
  TData = Awaited<ReturnType<typeof schoolPropertyGetProperties>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof schoolPropertyGetProperties>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolPropertyGetPropertiesQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolPropertyGetProperties>>> = ({ signal }) =>
    schoolPropertyGetProperties(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolPropertyGetProperties>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Îã®Í±¥ ÌïôÍµê ÏÜçÏÑ± Ï°∞Ìöå
 */
export const schoolPropertyGetProperty = (
  params: SchoolPropertyGetPropertyParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseSchoolPropertyDto>({ url: `/api/school-property`, method: 'get', params, signal }, options)
}

export const getSchoolPropertyGetPropertyQueryKey = (params: SchoolPropertyGetPropertyParams) => [
  `/api/school-property`,
  ...(params ? [params] : []),
]

export type SchoolPropertyGetPropertyQueryResult = NonNullable<Awaited<ReturnType<typeof schoolPropertyGetProperty>>>
export type SchoolPropertyGetPropertyQueryError = ErrorType<unknown>

export const useSchoolPropertyGetProperty = <
  TData = Awaited<ReturnType<typeof schoolPropertyGetProperty>>,
  TError = ErrorType<unknown>,
>(
  params: SchoolPropertyGetPropertyParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof schoolPropertyGetProperty>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getSchoolPropertyGetPropertyQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof schoolPropertyGetProperty>>> = ({ signal }) =>
    schoolPropertyGetProperty(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof schoolPropertyGetProperty>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÍµê ÏÜçÏÑ± ÏÑ§Ï†ï
 */
export const schoolPropertySetProperty = (
  requestSchoolPropertyDto: RequestSchoolPropertyDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseSchoolPropertyDto>(
    {
      url: `/api/school-property`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestSchoolPropertyDto,
    },
    options,
  )
}

export type SchoolPropertySetPropertyMutationResult = NonNullable<Awaited<ReturnType<typeof schoolPropertySetProperty>>>
export type SchoolPropertySetPropertyMutationBody = RequestSchoolPropertyDto
export type SchoolPropertySetPropertyMutationError = ErrorType<unknown>

export const useSchoolPropertySetProperty = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof schoolPropertySetProperty>>,
    TError,
    { data: RequestSchoolPropertyDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof schoolPropertySetProperty>>,
    { data: RequestSchoolPropertyDto }
  > = (props) => {
    const { data } = props ?? {}

    return schoolPropertySetProperty(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof schoolPropertySetProperty>>,
    TError,
    { data: RequestSchoolPropertyDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉùÎ≥∏Ïù∏ IBÌîÑÎ°úÌïÑ ÏÉùÏÑ±
 */
export const iBProfileCreateItem = (
  requestIBProfileDto: RequestIBProfileDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBProfileDto>(
    {
      url: `/api/ib/profile`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBProfileDto,
    },
    options,
  )
}

export type IBProfileCreateItemMutationResult = NonNullable<Awaited<ReturnType<typeof iBProfileCreateItem>>>
export type IBProfileCreateItemMutationBody = RequestIBProfileDto
export type IBProfileCreateItemMutationError = ErrorType<unknown>

export const useIBProfileCreateItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBProfileCreateItem>>,
    TError,
    { data: RequestIBProfileDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBProfileCreateItem>>, { data: RequestIBProfileDto }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return iBProfileCreateItem(data, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBProfileCreateItem>>, TError, { data: RequestIBProfileDto }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÌïôÏÉù IBÌîÑÎ°úÌïÑ Ï°∞Ìöå
 */
export const iBProfileGetItemByStudent = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBProfileDto>({ url: `/api/ib/profile/student/${id}`, method: 'get', signal }, options)
}

export const getIBProfileGetItemByStudentQueryKey = (id: number) => [`/api/ib/profile/student/${id}`]

export type IBProfileGetItemByStudentQueryResult = NonNullable<Awaited<ReturnType<typeof iBProfileGetItemByStudent>>>
export type IBProfileGetItemByStudentQueryError = ErrorType<unknown>

export const useIBProfileGetItemByStudent = <
  TData = Awaited<ReturnType<typeof iBProfileGetItemByStudent>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBProfileGetItemByStudent>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBProfileGetItemByStudentQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBProfileGetItemByStudent>>> = ({ signal }) =>
    iBProfileGetItemByStudent(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBProfileGetItemByStudent>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù IBÌîÑÎ°úÌïÑ Îã§Ï§ëÏ°∞Ìöå
 */
export const iBProfileGetItems = (
  params?: IBProfileGetItemsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBProfilePaginationDto>(
    { url: `/api/ib/profile/items`, method: 'get', params, signal },
    options,
  )
}

export const getIBProfileGetItemsQueryKey = (params?: IBProfileGetItemsParams) => [
  `/api/ib/profile/items`,
  ...(params ? [params] : []),
]

export type IBProfileGetItemsQueryResult = NonNullable<Awaited<ReturnType<typeof iBProfileGetItems>>>
export type IBProfileGetItemsQueryError = ErrorType<unknown>

export const useIBProfileGetItems = <
  TData = Awaited<ReturnType<typeof iBProfileGetItems>>,
  TError = ErrorType<unknown>,
>(
  params?: IBProfileGetItemsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBProfileGetItems>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBProfileGetItemsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBProfileGetItems>>> = ({ signal }) =>
    iBProfileGetItems(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBProfileGetItems>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Î≥∏Ïù∏ IBÌîÑÎ°úÌïÑ ÏàòÏ†ï
 */
export const iBProfileUpdateItem = (
  id: number,
  requestIBProfileDto: RequestIBProfileDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBProfileDto>(
    {
      url: `/api/ib/profile/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBProfileDto,
    },
    options,
  )
}

export type IBProfileUpdateItemMutationResult = NonNullable<Awaited<ReturnType<typeof iBProfileUpdateItem>>>
export type IBProfileUpdateItemMutationBody = RequestIBProfileDto
export type IBProfileUpdateItemMutationError = ErrorType<unknown>

export const useIBProfileUpdateItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBProfileUpdateItem>>,
    TError,
    { id: number; data: RequestIBProfileDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBProfileUpdateItem>>,
    { id: number; data: RequestIBProfileDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return iBProfileUpdateItem(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBProfileUpdateItem>>,
    TError,
    { id: number; data: RequestIBProfileDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary CAS ÌîÑÎ°úÌïÑ ÏßàÎ¨∏ ÌÖúÌîåÎ¶ø ÏÉùÏÑ±
 */
export const iBProfileCreateTemplate = (
  requestIBProfileTemplateDto: RequestIBProfileTemplateDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBProfileTemplateDto>(
    {
      url: `/api/ib/profile/template/item`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBProfileTemplateDto,
    },
    options,
  )
}

export type IBProfileCreateTemplateMutationResult = NonNullable<Awaited<ReturnType<typeof iBProfileCreateTemplate>>>
export type IBProfileCreateTemplateMutationBody = RequestIBProfileTemplateDto
export type IBProfileCreateTemplateMutationError = ErrorType<unknown>

export const useIBProfileCreateTemplate = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBProfileCreateTemplate>>,
    TError,
    { data: RequestIBProfileTemplateDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBProfileCreateTemplate>>,
    { data: RequestIBProfileTemplateDto }
  > = (props) => {
    const { data } = props ?? {}

    return iBProfileCreateTemplate(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBProfileCreateTemplate>>,
    TError,
    { data: RequestIBProfileTemplateDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary CAS ÌîÑÎ°úÌïÑ ÏßàÎ¨∏ ÌÖúÌîåÎ¶ø Ï°∞Ìöå
 */
export const iBProfileGetTemplateItemByStudent = (options?: SecondParameter<typeof mutator>, signal?: AbortSignal) => {
  return mutator<ResponseIBProfileTemplateDto>({ url: `/api/ib/profile/template/item`, method: 'get', signal }, options)
}

export const getIBProfileGetTemplateItemByStudentQueryKey = () => [`/api/ib/profile/template/item`]

export type IBProfileGetTemplateItemByStudentQueryResult = NonNullable<
  Awaited<ReturnType<typeof iBProfileGetTemplateItemByStudent>>
>
export type IBProfileGetTemplateItemByStudentQueryError = ErrorType<unknown>

export const useIBProfileGetTemplateItemByStudent = <
  TData = Awaited<ReturnType<typeof iBProfileGetTemplateItemByStudent>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof iBProfileGetTemplateItemByStudent>>, TError, TData>
  request?: SecondParameter<typeof mutator>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBProfileGetTemplateItemByStudentQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBProfileGetTemplateItemByStudent>>> = ({ signal }) =>
    iBProfileGetTemplateItemByStudent(requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBProfileGetTemplateItemByStudent>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary CAS ÌîÑÎ°úÌïÑ ÏßàÎ¨∏ ÌÖúÌîåÎ¶ø ÏàòÏ†ï
 */
export const iBProfileUpdateTemplateItem = (
  requestIBProfileTemplateDto: RequestIBProfileTemplateDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBProfileTemplateDto>(
    {
      url: `/api/ib/profile/template/item`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBProfileTemplateDto,
    },
    options,
  )
}

export type IBProfileUpdateTemplateItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBProfileUpdateTemplateItem>>
>
export type IBProfileUpdateTemplateItemMutationBody = RequestIBProfileTemplateDto
export type IBProfileUpdateTemplateItemMutationError = ErrorType<unknown>

export const useIBProfileUpdateTemplateItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBProfileUpdateTemplateItem>>,
    TError,
    { data: RequestIBProfileTemplateDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBProfileUpdateTemplateItem>>,
    { data: RequestIBProfileTemplateDto }
  > = (props) => {
    const { data } = props ?? {}

    return iBProfileUpdateTemplateItem(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBProfileUpdateTemplateItem>>,
    TError,
    { data: RequestIBProfileTemplateDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary CAS ÌîÑÎ°úÌïÑ ÏßàÎ¨∏ ÌÖúÌîåÎ¶ø ÏÇ≠Ï†ú
 */
export const iBProfileDeleteTemplateItem = (options?: SecondParameter<typeof mutator>) => {
  return mutator<ResponseIBProfileTemplateDto>({ url: `/api/ib/profile/template/item`, method: 'delete' }, options)
}

export type IBProfileDeleteTemplateItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBProfileDeleteTemplateItem>>
>

export type IBProfileDeleteTemplateItemMutationError = ErrorType<unknown>

export const useIBProfileDeleteTemplateItem = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof iBProfileDeleteTemplateItem>>, TError, TVariables, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof iBProfileDeleteTemplateItem>>, TVariables> = () => {
    return iBProfileDeleteTemplateItem(requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof iBProfileDeleteTemplateItem>>, TError, TVariables, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary ÏßÄÎèÑÍµêÏÇ¨ ÏßÄÏ†ï Î∞è ÏàòÏ†ï
 */
export const iBProfileSetMentor = (id: number, mentorId: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<ResponseIBProfileDto>(
    { url: `/api/ib/profile/${id}/set-mentor/${mentorId}`, method: 'patch' },
    options,
  )
}

export type IBProfileSetMentorMutationResult = NonNullable<Awaited<ReturnType<typeof iBProfileSetMentor>>>

export type IBProfileSetMentorMutationError = ErrorType<unknown>

export const useIBProfileSetMentor = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBProfileSetMentor>>,
    TError,
    { id: number; mentorId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBProfileSetMentor>>,
    { id: number; mentorId: number }
  > = (props) => {
    const { id, mentorId } = props ?? {}

    return iBProfileSetMentor(id, mentorId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBProfileSetMentor>>,
    TError,
    { id: number; mentorId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ïù∏ÌÑ∞Î∑∞ Î™©Î°ù Ï°∞Ìöå (ÏÑ†ÏÉùÎãò)
 */
export const interviewFindAllInterview = (
  params?: InterviewFindAllInterviewParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationInterviewDto>({ url: `/api/interview`, method: 'get', params, signal }, options)
}

export const getInterviewFindAllInterviewQueryKey = (params?: InterviewFindAllInterviewParams) => [
  `/api/interview`,
  ...(params ? [params] : []),
]

export type InterviewFindAllInterviewQueryResult = NonNullable<Awaited<ReturnType<typeof interviewFindAllInterview>>>
export type InterviewFindAllInterviewQueryError = ErrorType<unknown>

export const useInterviewFindAllInterview = <
  TData = Awaited<ReturnType<typeof interviewFindAllInterview>>,
  TError = ErrorType<unknown>,
>(
  params?: InterviewFindAllInterviewParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof interviewFindAllInterview>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getInterviewFindAllInterviewQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof interviewFindAllInterview>>> = ({ signal }) =>
    interviewFindAllInterview(params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof interviewFindAllInterview>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïù∏ÌÑ∞Î∑∞ ÏÉùÏÑ± (ÏÑ†ÏÉùÎãò)
 */
export const interviewCreateByTeacher = (
  requestCreateInterviewDto: RequestCreateInterviewDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseInterviewDto>(
    {
      url: `/api/interview`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateInterviewDto,
    },
    options,
  )
}

export type InterviewCreateByTeacherMutationResult = NonNullable<Awaited<ReturnType<typeof interviewCreateByTeacher>>>
export type InterviewCreateByTeacherMutationBody = RequestCreateInterviewDto
export type InterviewCreateByTeacherMutationError = ErrorType<unknown>

export const useInterviewCreateByTeacher = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof interviewCreateByTeacher>>,
    TError,
    { data: RequestCreateInterviewDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof interviewCreateByTeacher>>,
    { data: RequestCreateInterviewDto }
  > = (props) => {
    const { data } = props ?? {}

    return interviewCreateByTeacher(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof interviewCreateByTeacher>>,
    TError,
    { data: RequestCreateInterviewDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ïù∏ÌÑ∞Î∑∞ Îã®Í±¥ Ï°∞Ìöå (ÏÑ†ÏÉùÎãò)
 */
export const interviewFindInterviewById = (
  id: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseInterviewDto>({ url: `/api/interview/${id}`, method: 'get', signal }, options)
}

export const getInterviewFindInterviewByIdQueryKey = (id: number) => [`/api/interview/${id}`]

export type InterviewFindInterviewByIdQueryResult = NonNullable<Awaited<ReturnType<typeof interviewFindInterviewById>>>
export type InterviewFindInterviewByIdQueryError = ErrorType<unknown>

export const useInterviewFindInterviewById = <
  TData = Awaited<ReturnType<typeof interviewFindInterviewById>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof interviewFindInterviewById>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getInterviewFindInterviewByIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof interviewFindInterviewById>>> = ({ signal }) =>
    interviewFindInterviewById(id, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof interviewFindInterviewById>>, TError, TData>(queryKey, queryFn, {
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïù∏ÌÑ∞Î∑∞ ÏàòÏ†ï (ÏÑ†ÏÉùÎãò)
 */
export const interviewUpdateByTeacher = (
  id: number,
  requestUpdateInterviewDto: RequestUpdateInterviewDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseInterviewDto>(
    {
      url: `/api/interview/${id}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateInterviewDto,
    },
    options,
  )
}

export type InterviewUpdateByTeacherMutationResult = NonNullable<Awaited<ReturnType<typeof interviewUpdateByTeacher>>>
export type InterviewUpdateByTeacherMutationBody = RequestUpdateInterviewDto
export type InterviewUpdateByTeacherMutationError = ErrorType<unknown>

export const useInterviewUpdateByTeacher = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof interviewUpdateByTeacher>>,
    TError,
    { id: number; data: RequestUpdateInterviewDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof interviewUpdateByTeacher>>,
    { id: number; data: RequestUpdateInterviewDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return interviewUpdateByTeacher(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof interviewUpdateByTeacher>>,
    TError,
    { id: number; data: RequestUpdateInterviewDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÌïôÏÉù Ïù∏ÌÑ∞Î∑∞ QnA Î™©Î°ù Ï°∞Ìöå
 */
export const interviewFindQnaByStudentId = (
  studentId: number,
  params?: InterviewFindQnaByStudentIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseInterviewListWithQnaDto[]>(
    { url: `/api/interview/student/${studentId}/qna`, method: 'get', params, signal },
    options,
  )
}

export const getInterviewFindQnaByStudentIdQueryKey = (
  studentId: number,
  params?: InterviewFindQnaByStudentIdParams,
) => [`/api/interview/student/${studentId}/qna`, ...(params ? [params] : [])]

export type InterviewFindQnaByStudentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof interviewFindQnaByStudentId>>
>
export type InterviewFindQnaByStudentIdQueryError = ErrorType<unknown>

export const useInterviewFindQnaByStudentId = <
  TData = Awaited<ReturnType<typeof interviewFindQnaByStudentId>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  params?: InterviewFindQnaByStudentIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof interviewFindQnaByStudentId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getInterviewFindQnaByStudentIdQueryKey(studentId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof interviewFindQnaByStudentId>>> = ({ signal }) =>
    interviewFindQnaByStudentId(studentId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof interviewFindQnaByStudentId>>, TError, TData>(queryKey, queryFn, {
    enabled: !!studentId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÌïôÏÉù Ïù∏ÌÑ∞Î∑∞ Í∞ÄÎä• Î™©Î°ù Ï°∞Ìöå
 */
export const interviewFindInterviewByStudentId = (
  studentId: number,
  params?: InterviewFindInterviewByStudentIdParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseStudentInterviewDto[]>(
    { url: `/api/interview/student/${studentId}`, method: 'get', params, signal },
    options,
  )
}

export const getInterviewFindInterviewByStudentIdQueryKey = (
  studentId: number,
  params?: InterviewFindInterviewByStudentIdParams,
) => [`/api/interview/student/${studentId}`, ...(params ? [params] : [])]

export type InterviewFindInterviewByStudentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof interviewFindInterviewByStudentId>>
>
export type InterviewFindInterviewByStudentIdQueryError = ErrorType<unknown>

export const useInterviewFindInterviewByStudentId = <
  TData = Awaited<ReturnType<typeof interviewFindInterviewByStudentId>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  params?: InterviewFindInterviewByStudentIdParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof interviewFindInterviewByStudentId>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getInterviewFindInterviewByStudentIdQueryKey(studentId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof interviewFindInterviewByStudentId>>> = ({ signal }) =>
    interviewFindInterviewByStudentId(studentId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof interviewFindInterviewByStudentId>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!studentId, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary Ïù∏ÌÑ∞Î∑∞ QnA ÏÉÅÏÑ∏Ï°∞Ìöå
 */
export const interviewFindQnaById = (
  qnaId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseInterviewWithQnaDto>({ url: `/api/interview/qna/${qnaId}`, method: 'get', signal }, options)
}

export const getInterviewFindQnaByIdQueryKey = (qnaId: number) => [`/api/interview/qna/${qnaId}`]

export type InterviewFindQnaByIdQueryResult = NonNullable<Awaited<ReturnType<typeof interviewFindQnaById>>>
export type InterviewFindQnaByIdQueryError = ErrorType<unknown>

export const useInterviewFindQnaById = <
  TData = Awaited<ReturnType<typeof interviewFindQnaById>>,
  TError = ErrorType<unknown>,
>(
  qnaId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof interviewFindQnaById>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getInterviewFindQnaByIdQueryKey(qnaId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof interviewFindQnaById>>> = ({ signal }) =>
    interviewFindQnaById(qnaId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof interviewFindQnaById>>, TError, TData>(queryKey, queryFn, {
    enabled: !!qnaId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * ÏÑ†ÏÉùÎãòÏùÄ ÌäπÏ†ï ÌïôÏÉùÏóê ÎåÄÌïú ÏßàÎ¨∏ÏùÑ Í∞úÎ≥ÑÏ†ÅÏúºÎ°ú Ï∂îÍ∞Ä/ÏàòÏ†ï/ÏÇ≠Ï†ú Ìï† Ïàò ÏûàÍ≥†, ÌïôÏÉùÏùÄ ÎãµÎ≥ÄÎßå ÏàòÏ†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.
 * @summary Ïù∏ÌÑ∞Î∑∞ QnA ÏàòÏ†ï (ÌïôÏÉù/ÏÑ†ÏÉùÎãò)
 */
export const interviewUpdateQna = (
  qnaId: number,
  requestUpdateQnaDto: RequestUpdateQnaDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseInterviewQnaDto>(
    {
      url: `/api/interview/qna/${qnaId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateQnaDto,
    },
    options,
  )
}

export type InterviewUpdateQnaMutationResult = NonNullable<Awaited<ReturnType<typeof interviewUpdateQna>>>
export type InterviewUpdateQnaMutationBody = RequestUpdateQnaDto
export type InterviewUpdateQnaMutationError = ErrorType<unknown>

export const useInterviewUpdateQna = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof interviewUpdateQna>>,
    TError,
    { qnaId: number; data: RequestUpdateQnaDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof interviewUpdateQna>>,
    { qnaId: number; data: RequestUpdateQnaDto }
  > = (props) => {
    const { qnaId, data } = props ?? {}

    return interviewUpdateQna(qnaId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof interviewUpdateQna>>,
    TError,
    { qnaId: number; data: RequestUpdateQnaDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary Ïù∏ÌÑ∞Î∑∞ QnA ÏÇ≠Ï†ú
 */
export const interviewDeleteQna = (qnaId: number, options?: SecondParameter<typeof mutator>) => {
  return mutator<unknown>({ url: `/api/interview/qna/${qnaId}`, method: 'delete' }, options)
}

export type InterviewDeleteQnaMutationResult = NonNullable<Awaited<ReturnType<typeof interviewDeleteQna>>>

export type InterviewDeleteQnaMutationError = ErrorType<unknown>

export const useInterviewDeleteQna = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof interviewDeleteQna>>, TError, { qnaId: number }, TContext>
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof interviewDeleteQna>>, { qnaId: number }> = (props) => {
    const { qnaId } = props ?? {}

    return interviewDeleteQna(qnaId, requestOptions)
  }

  return useMutation<Awaited<ReturnType<typeof interviewDeleteQna>>, TError, { qnaId: number }, TContext>(
    mutationFn,
    mutationOptions,
  )
}

/**
 * @summary Ïù∏ÌÑ∞Î∑∞ QnA ÏÉùÏÑ± (ÌïôÏÉù)
 */
export const interviewCreateQnaByStudent = (
  id: number,
  requestCreateQnaDto: RequestCreateQnaDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseInterviewQnaDto>(
    {
      url: `/api/interview/${id}/qna`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateQnaDto,
    },
    options,
  )
}

export type InterviewCreateQnaByStudentMutationResult = NonNullable<
  Awaited<ReturnType<typeof interviewCreateQnaByStudent>>
>
export type InterviewCreateQnaByStudentMutationBody = RequestCreateQnaDto
export type InterviewCreateQnaByStudentMutationError = ErrorType<unknown>

export const useInterviewCreateQnaByStudent = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof interviewCreateQnaByStudent>>,
    TError,
    { id: number; data: RequestCreateQnaDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof interviewCreateQnaByStudent>>,
    { id: number; data: RequestCreateQnaDto }
  > = (props) => {
    const { id, data } = props ?? {}

    return interviewCreateQnaByStudent(id, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof interviewCreateQnaByStudent>>,
    TError,
    { id: number; data: RequestCreateQnaDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑ±Ï∞∞ÏùºÏßÄ Î™©Î°ù Ï°∞Ìöå
 */
export const iBReflectionDiaryGetItems = (
  studentId: number,
  params?: IBReflectionDiaryGetItemsParams,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponsePaginationIBBasicContentDto>(
    { url: `/api/ib/reflection-diary/items/student/${studentId}`, method: 'get', params, signal },
    options,
  )
}

export const getIBReflectionDiaryGetItemsQueryKey = (studentId: number, params?: IBReflectionDiaryGetItemsParams) => [
  `/api/ib/reflection-diary/items/student/${studentId}`,
  ...(params ? [params] : []),
]

export type IBReflectionDiaryGetItemsQueryResult = NonNullable<Awaited<ReturnType<typeof iBReflectionDiaryGetItems>>>
export type IBReflectionDiaryGetItemsQueryError = ErrorType<unknown>

export const useIBReflectionDiaryGetItems = <
  TData = Awaited<ReturnType<typeof iBReflectionDiaryGetItems>>,
  TError = ErrorType<unknown>,
>(
  studentId: number,
  params?: IBReflectionDiaryGetItemsParams,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBReflectionDiaryGetItems>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBReflectionDiaryGetItemsQueryKey(studentId, params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBReflectionDiaryGetItems>>> = ({ signal }) =>
    iBReflectionDiaryGetItems(studentId, params, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBReflectionDiaryGetItems>>, TError, TData>(queryKey, queryFn, {
    enabled: !!studentId,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ±Ï∞∞ÏùºÏßÄ Îã®Í±¥ Ï°∞Ìöå
 */
export const iBReflectionDiaryGetItem = (
  id: number,
  studentId: number,
  options?: SecondParameter<typeof mutator>,
  signal?: AbortSignal,
) => {
  return mutator<ResponseIBBasicContentDto>(
    { url: `/api/ib/reflection-diary/${id}/student/${studentId}`, method: 'get', signal },
    options,
  )
}

export const getIBReflectionDiaryGetItemQueryKey = (id: number, studentId: number) => [
  `/api/ib/reflection-diary/${id}/student/${studentId}`,
]

export type IBReflectionDiaryGetItemQueryResult = NonNullable<Awaited<ReturnType<typeof iBReflectionDiaryGetItem>>>
export type IBReflectionDiaryGetItemQueryError = ErrorType<unknown>

export const useIBReflectionDiaryGetItem = <
  TData = Awaited<ReturnType<typeof iBReflectionDiaryGetItem>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  studentId: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof iBReflectionDiaryGetItem>>, TError, TData>
    request?: SecondParameter<typeof mutator>
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getIBReflectionDiaryGetItemQueryKey(id, studentId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof iBReflectionDiaryGetItem>>> = ({ signal }) =>
    iBReflectionDiaryGetItem(id, studentId, requestOptions, signal)

  const query = useQuery<Awaited<ReturnType<typeof iBReflectionDiaryGetItem>>, TError, TData>(queryKey, queryFn, {
    enabled: !!(id && studentId),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryKey

  return query
}

/**
 * @summary ÏÑ±Ï∞∞ÏùºÏßÄ ÏàòÏ†ï
 */
export const iBReflectionDiaryUpdateItem = (
  id: number,
  studentId: number,
  requestIBBasicContentUpdateDto: RequestIBBasicContentUpdateDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBBasicContentDto>(
    {
      url: `/api/ib/reflection-diary/${id}/student/${studentId}`,
      method: 'patch',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBBasicContentUpdateDto,
    },
    options,
  )
}

export type IBReflectionDiaryUpdateItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBReflectionDiaryUpdateItem>>
>
export type IBReflectionDiaryUpdateItemMutationBody = RequestIBBasicContentUpdateDto
export type IBReflectionDiaryUpdateItemMutationError = ErrorType<unknown>

export const useIBReflectionDiaryUpdateItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBReflectionDiaryUpdateItem>>,
    TError,
    { id: number; studentId: number; data: RequestIBBasicContentUpdateDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBReflectionDiaryUpdateItem>>,
    { id: number; studentId: number; data: RequestIBBasicContentUpdateDto }
  > = (props) => {
    const { id, studentId, data } = props ?? {}

    return iBReflectionDiaryUpdateItem(id, studentId, data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBReflectionDiaryUpdateItem>>,
    TError,
    { id: number; studentId: number; data: RequestIBBasicContentUpdateDto },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑ±Ï∞∞ÏùºÏßÄ ÏÇ≠Ï†ú
 */
export const iBReflectionDiaryDeleteItem = (
  id: number,
  studentId: number,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<void>({ url: `/api/ib/reflection-diary/${id}/student/${studentId}`, method: 'delete' }, options)
}

export type IBReflectionDiaryDeleteItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBReflectionDiaryDeleteItem>>
>

export type IBReflectionDiaryDeleteItemMutationError = ErrorType<unknown>

export const useIBReflectionDiaryDeleteItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBReflectionDiaryDeleteItem>>,
    TError,
    { id: number; studentId: number },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBReflectionDiaryDeleteItem>>,
    { id: number; studentId: number }
  > = (props) => {
    const { id, studentId } = props ?? {}

    return iBReflectionDiaryDeleteItem(id, studentId, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBReflectionDiaryDeleteItem>>,
    TError,
    { id: number; studentId: number },
    TContext
  >(mutationFn, mutationOptions)
}

/**
 * @summary ÏÑ±Ï∞∞ÏùºÏßÄ ÏÉùÏÑ±
 */
export const iBReflectionDiaryCreateItem = (
  requestIBBasicContentDto: RequestIBBasicContentDto,
  options?: SecondParameter<typeof mutator>,
) => {
  return mutator<ResponseIBBasicContentDto>(
    {
      url: `/api/ib/reflection-diary`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: requestIBBasicContentDto,
    },
    options,
  )
}

export type IBReflectionDiaryCreateItemMutationResult = NonNullable<
  Awaited<ReturnType<typeof iBReflectionDiaryCreateItem>>
>
export type IBReflectionDiaryCreateItemMutationBody = RequestIBBasicContentDto
export type IBReflectionDiaryCreateItemMutationError = ErrorType<unknown>

export const useIBReflectionDiaryCreateItem = <TError = ErrorType<unknown>, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof iBReflectionDiaryCreateItem>>,
    TError,
    { data: RequestIBBasicContentDto },
    TContext
  >
  request?: SecondParameter<typeof mutator>
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof iBReflectionDiaryCreateItem>>,
    { data: RequestIBBasicContentDto }
  > = (props) => {
    const { data } = props ?? {}

    return iBReflectionDiaryCreateItem(data, requestOptions)
  }

  return useMutation<
    Awaited<ReturnType<typeof iBReflectionDiaryCreateItem>>,
    TError,
    { data: RequestIBBasicContentDto },
    TContext
  >(mutationFn, mutationOptions)
}
